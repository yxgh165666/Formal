-- Base64 解码器（Roblox 可用）
local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local b64lookup = {}
for i = 1, #b64chars do
    b64lookup[b64chars:sub(i, i)] = i - 1
end

local function base64_decode(data)
    data = data:gsub('[^%w%+%/%=]', '')
    local result = {}
    local n = 1
    while n <= #data do
        local a = b64lookup[data:sub(n, n)]
        local b = b64lookup[data:sub(n+1, n+1)]
        local c = b64lookup[data:sub(n+2, n+2)]
        local d = b64lookup[data:sub(n+3, n+3)]

        local x = (a * 262144) + (b * 4096) + ((c or 0) * 64) + (d or 0)
        result[#result+1] = string.char(
            math.floor(x / 65536) % 256,
            math.floor(x / 256) % 256,
            x % 256
        )
        n = n + 4
    end

    local pad = select(2, data:gsub('=', '='))
    if pad == 2 then
        result[#result] = result[#result]:sub(1, 1)
    elseif pad == 1 then
        result[#result] = result[#result]:sub(1, 2)
    end

    return table.concat(result)
end

-- ✅ 示例：解码并执行（仅限你自己的脚本）
local decoded = base64_decode("")
loadstring(decoded)()
