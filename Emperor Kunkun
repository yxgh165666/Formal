local b64 = require "base64_decode"
print("-- 坤坤大帝脚本 - WindUI 高级升级版 (手机优化版)
local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/Footagesus/WindUI/main/dist/main.lua"))()

-- 手机屏幕适配配置
local IS_MOBILE = false
local SCREEN_SCALE = 0.85  -- 默认缩放比例

-- 检测移动设备并调整缩放
pcall(function()
    local UserInputService = game:GetService("UserInputService")
    IS_MOBILE = UserInputService.TouchEnabled
    
    if IS_MOBILE then
        SCREEN_SCALE = 0.75  -- 手机设备使用更小的缩放
        WindUI:Notify({
            Title = "移动设备检测",
            Content = "已自动优化界面为手机模式",
            Duration = 3,
            Icon = "smartphone"
        })
    end
end)

-- 高级本地化配置
WindUI:Localization({
    Enabled = true,
    Prefix = "loc:",
    DefaultLanguage = "zh",
    Translations = {
        ["zh"] = {
            ["KUNKUN_SCRIPT"] = "坤坤大帝脚本",
            ["PREMIUM_EDITION"] = "尊享特权版",
            ["WELCOME"] = "欢迎使用坤坤大帝脚本",
            ["ANNOUNCEMENT"] = "公告",
            ["PLAYER_FUNCTIONS"] = "人物功能",
            ["AI_AIMBOT"] = "AI-Aimbot",
            ["ESP_FEATURES"] = "透视功能",
            ["SCRIPT_CENTER"] = "脚本中心",
            ["SETTINGS"] = "设置",
            ["SYSTEM_INFO"] = "系统信息",
            ["COPY_QQ"] = "一键复制QQ号",
            ["REMOVE_SHADOWS"] = "删除阴影",
            ["FLIGHT_FUNCTIONS"] = "飞行功能",
            ["THREE_LOCKS"] = "三锁定",
            ["CONNECT_SUCCESS"] = "连接成功",
            ["INJECTION_SUCCESS"] = "注入成功",
            ["SCRIPT_LOADED"] = "脚本加载完成"
        }
    }
})

-- 高级主题配置
WindUI.TransparencyValue = 0.15
WindUI:SetTheme("Dark")

-- 坤坤大帝高级动画系统
local function CreateAdvancedKunKunAnimation()
    -- 创建粒子系统
    local particles = {}
    for i = 1, 30 do  -- 减少粒子数量以适应手机性能
        local particle = Drawing.new("Circle")
        particle.Color = Color3.fromHSV(i/30, 1, 1)
        particle.Radius = math.random(3, 15)
        particle.Position = Vector2.new(
            math.random(0, workspace.CurrentCamera.ViewportSize.X),
            math.random(0, workspace.CurrentCamera.ViewportSize.Y)
        )
        particle.Filled = true
        particle.Transparency = 0
        particle.ZIndex = 998
        table.insert(particles, particle)
    end
    
    -- 创建全屏背景
    local bg = Drawing.new("Square")
    bg.Size = workspace.CurrentCamera.ViewportSize
    bg.Position = Vector2.new(0, 0)
    bg.Color = Color3.new(0, 0, 0)
    bg.Filled = true
    bg.Transparency = 1
    bg.Visible = true
    bg.ZIndex = 999
    
    -- 创建坤坤大帝文字
    local text = Drawing.new("Text")
    text.Text = "坤坤大帝脚本"
    text.Size = IS_MOBILE and 60 or 80  -- 手机使用更小的字体
    text.Center = true
    text.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X/2, -200)
    text.Color = Color3.new(1, 0.2, 0.2)
    text.Outline = true
    text.OutlineColor = Color3.new(1, 1, 1)
    text.Transparency = 0
    text.Visible = true
    text.ZIndex = 1000
    
    -- 创建副标题
    local subText = Drawing.new("Text")
    subText.Text = "尊享特权版 - 启动成功"
    subText.Size = IS_MOBILE and 25 or 35  -- 手机使用更小的字体
    subText.Center = true
    subText.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X/2, -100)
    subText.Color = Color3.new(0.8, 0.8, 1)
    subText.Outline = true
    subText.OutlineColor = Color3.new(0.2, 0.2, 0.2)
    subText.Transparency = 0
    subText.Visible = true
    subText.ZIndex = 1000
    
    -- 高级弹性动画函数
    local function advancedElasticAnimation(obj, targetY, duration, particleEffect)
        local startY = obj.Position.Y
        local startTime = tick()
        local damping = 0.7
        local stiffness = 0.3
        
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            local elapsed = tick() - startTime
            local progress = elapsed / duration
            
            if progress >= 1 then
                obj.Position = Vector2.new(obj.Position.X, targetY)
                connection:Disconnect()
                return
            end
            
            -- 高级弹性计算
            local overshoot = math.sin(progress * math.pi * 4) * (1 - progress)
            local newY = targetY + (startY - targetY) * math.pow(1 - progress, 2) * overshoot * stiffness
            stiffness = stiffness * damping
            
            obj.Position = Vector2.new(obj.Position.X, newY)
            
            -- 粒子效果
            if particleEffect and progress < 0.8 then
                for _, particle in ipairs(particles) do
                    particle.Transparency = progress
                    particle.Radius = particle.Radius * 0.98
                end
            end
        end)
    end
    
    spawn(function()
        -- 背景淡入
        for i = 0, 1, 0.02 do
            bg.Transparency = 1 - i * 0.8
            wait(0.01)
        end
        
        -- 主标题动画
        advancedElasticAnimation(text, workspace.CurrentCamera.ViewportSize.Y/2 - 100, 2, true)
        
        wait(0.3)
        
        -- 副标题动画
        advancedElasticAnimation(subText, workspace.CurrentCamera.ViewportSize.Y/2 + 20, 1.8, false)
        
        wait(3)  -- 减少等待时间
        
        -- 淡出动画
        for i = 0, 1, 0.03 do
            text.Transparency = i
            subText.Transparency = i
            bg.Transparency = 0.2 + i * 0.8
            for _, particle in ipairs(particles) do
                particle.Transparency = i
            end
            wait(0.01)
        end
        
        -- 清理
        bg:Remove()
        text:Remove()
        subText:Remove()
        for _, particle in ipairs(particles) do
            particle:Remove()
        end
    end)
end

-- 复制到剪贴板函数
local function CopyToClipboard(text)
    if setclipboard then
        setclipboard(text)
        return true
    elseif writeclipboard then
        writeclipboard(text)
        return true
    elseif toclipboard then
        toclipboard(text)
        return true
    else
        print("[复制内容] " .. text)
        return false
    end
end

-- 灵动岛通知系统
local DynamicIsland = {
    messages = {},
    currentMessage = nil,
    isShowing = false
}

function DynamicIsland:Show(message, messageType, duration)
    table.insert(self.messages, {
        text = message,
        type = messageType or "info",
        duration = duration or 3
    })
    
    if not self.isShowing then
        self:ShowNext()
    end
end

function DynamicIsland:ShowNext()
    if #self.messages == 0 then
        self.isShowing = false
        return
    end
    
    self.currentMessage = table.remove(self.messages, 1)
    self.isShowing = true
    
    -- 创建灵动岛通知
    WindUI:Notify({
        Title = self.currentMessage.type:upper(),
        Content = self.currentMessage.text,
        Duration = self.currentMessage.duration,
        Icon = self:GetIconByType(self.currentMessage.type)
    })
    
    -- 设置定时器显示下一条消息
    delay(self.currentMessage.duration + 0.5, function()
        self:ShowNext()
    end)
end

function DynamicIsland:GetIconByType(messageType)
    local icons = {
        success = "check-circle",
        error = "x-circle",
        warning = "alert-triangle",
        info = "info"
    }
    return icons[messageType] or "info"
end

-- 创建高级窗口 (手机适配)
local Window = WindUI:CreateWindow({
    Title = "坤坤大帝脚本",
    Icon = "crown",
    Author = "尊享特权版",
    Folder = "KunkunScript",
    Size = IS_MOBILE and UDim2.fromOffset(500, 600) or UDim2.fromOffset(650, 550),  -- 手机使用更小尺寸
    Theme = "Dark",
    Background = WindUI:Gradient({
        ["0"] = { Color = Color3.fromHex("#1a1a2e"), Transparency = 0.9 },
        ["50"] = { Color = Color3.fromHex("#16213e"), Transparency = 0.85 },
        ["100"] = { Color = Color3.fromHex("#0f3460"), Transparency = 0.8 },
    }, {
        Rotation = 135,
    }),
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
            WindUI:Notify({
                Title = "用户信息",
                Content = "尊贵的坤坤大帝用户",
                Duration = 2,
                Icon = "user"
            })
        end
    },
    SideBarWidth = IS_MOBILE and 180 or 220,  -- 手机侧边栏更窄
})

-- 添加动态标签
Window:Tag({
    Title = "Premium",
    Color = Color3.fromHex("#4ecdc4")
})

-- 移动设备检测标签
if IS_MOBILE then
    Window:Tag({
        Title = "手机模式",
        Color = Color3.fromHex("#45aaf2")
    })
end

-- 动态时间标签
local TimeTag = Window:Tag({
    Title = "00:00:00",
    Color = Color3.fromHex("#45aaf2")
})

-- 实时更新时间
spawn(function()
    while true do
        local now = os.date("*t")
        local timeString = string.format("%02d:%02d:%02d", now.hour, now.min, now.sec)
        TimeTag:SetTitle(timeString)
        wait(1)
    end
end)

-- 主题切换按钮
Window:CreateTopbarButton("theme-switcher", "sun", function()
    local newTheme = WindUI:GetCurrentTheme() == "Dark" and "Light" or "Dark"
    WindUI:SetTheme(newTheme)
    DynamicIsland:Show("主题已切换至 " .. newTheme, "success", 2)
end, 1000)

-- 屏幕缩放按钮 (手机专用)
if IS_MOBILE then
    Window:CreateTopbarButton("screen-scale", "maximize", function()
        SCREEN_SCALE = SCREEN_SCALE == 0.75 and 0.9 or 0.75
        DynamicIsland:Show("界面缩放: " .. (SCREEN_SCALE == 0.75 and "标准" or "大屏"), "info", 2)
    end, 999)
end

-- 创建标签页结构
local Tabs = {
    Main = Window:Section({ Title = "主要功能", Opened = true }),
    Combat = Window:Section({ Title = "战斗功能", Opened = true }),
    Visual = Window:Section({ Title = "视觉功能", Opened = true }),
    Movement = Window:Section({ Title = "移动功能", Opened = true }),
    Scripts = Window:Section({ Title = "脚本中心", Opened = true }),
    Settings = Window:Section({ Title = "系统设置", Opened = true })
}

local TabHandles = {
    Announcement = Tabs.Main:Tab({ Title = "公告信息", Icon = "megaphone", Desc = "系统状态和公告" }),
    PlayerFunctions = Tabs.Main:Tab({ Title = "人物功能", Icon = "user", Desc = "角色相关功能" }),
    AimbotTab = Tabs.Combat:Tab({ Title = "AI-Aimbot", Icon = "crosshair", Desc = "高级瞄准系统" }),
    ESPTab = Tabs.Visual:Tab({ Title = "透视功能", Icon = "eye", Desc = "视觉增强功能" }),
    MovementTab = Tabs.Movement:Tab({ Title = "移动功能", Icon = "wind", Desc = "移动增强功能" }),
    ScriptsTab = Tabs.Scripts:Tab({ Title = "脚本中心", Icon = "code", Desc = "一键加载脚本" }),
    SettingsTab = Tabs.Settings:Tab({ Title = "系统设置", Icon = "settings", Desc = "系统配置" })
}

-- 公告标签页
TabHandles.Announcement:Paragraph({
    Title = "坤坤大帝脚本系统",
    Desc = IS_MOBILE and "尊享特权版 (手机优化)" or "尊享特权版",
    Image = "shield",
    ImageSize = 24,
    Color = Color3.fromHex("#4ecdc4"),
})

-- 系统信息显示
local function getSystemInfo()
    local player = game.Players.LocalPlayer
    local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
    
    return {
        {"🕒 当前时间", os.date("%Y-%m-%d %H:%M:%S")},
        {"👤 用户名称", player.Name},
        {"🆔 用户ID", tostring(player.UserId)},
        {"📅 注册天数", tostring(player.AccountAge) .. " 天"},
        {"🎮 当前游戏", gameInfo.Name},
        {"🌐 游戏ID", tostring(game.PlaceId)},
        {"📱 运行模式", IS_MOBILE and "手机模式" or "电脑模式"}
    }
end

for _, info in ipairs(getSystemInfo()) do
    TabHandles.Announcement:Label(info[1] .. ": " .. info[2])
end

TabHandles.Announcement:Button({
    Title = "一键复制QQ号",
    Icon = "copy",
    Variant = "Primary",
    Callback = function()
        CopyToClipboard("913348285")
        DynamicIsland:Show("QQ号已复制到剪贴板", "success", 3)
    end
})

TabHandles.Announcement:Button({
    Title = "复制Discord链接",
    Icon = "message-circle",
    Callback = function()
        CopyToClipboard("https://discord.gg/xVUf7H9M")
        DynamicIsland:Show("Discord链接已复制", "info", 3)
    end
})

-- 人物功能标签页
local PlayerSection = TabHandles.PlayerFunctions:Section({
    Title = "基础功能",
    Icon = "zap"
})

-- 删除阴影功能
PlayerSection:Toggle({
    Title = "删除阴影",
    Desc = "移除游戏中的阴影效果以提高性能",
    Value = false,
    Callback = function(v)
        game.Lighting.GlobalShadows = not v
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") or obj:IsA("MeshPart") then
                obj.CastShadow = not v
            end
        end
        DynamicIsland:Show(v and "阴影已删除" or "阴影已恢复", "success", 2)
    end
})

-- 三锁定系统
local lockSpeed, lockJump, lockGrav = false, false, false
local savedSpeed, savedJump, savedGrav = 16, 50, 196

local function applyCharacterValues()
    local char = game.Players.LocalPlayer.Character
    if not char then return end
    
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    if lockSpeed then humanoid.WalkSpeed = savedSpeed end
    if lockJump then humanoid.JumpPower = savedJump end
    if lockGrav then workspace.Gravity = savedGrav end
end

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    wait(0.5)
    applyCharacterValues()
end)

PlayerSection:Input({
    Title = "移动速度",
    Value = tostring(savedSpeed),
    Callback = function(value)
        savedSpeed = tonumber(value) or 16
        applyCharacterValues()
    end
})

PlayerSection:Input({
    Title = "跳跃力量",
    Value = tostring(savedJump),
    Callback = function(value)
        savedJump = tonumber(value) or 50
        applyCharacterValues()
    end
})

PlayerSection:Input({
    Title = "重力设置",
    Value = tostring(savedGrav),
    Callback = function(value)
        savedGrav = tonumber(value) or 196
        applyCharacterValues()
    end
})

PlayerSection:Toggle({
    Title = "锁定移动速度",
    Value = lockSpeed,
    Callback = function(v)
        lockSpeed = v
        applyCharacterValues()
    end
})

PlayerSection:Toggle({
    Title = "锁定跳跃力量",
    Value = lockJump,
    Callback = function(v)
        lockJump = v
        applyCharacterValues()
    end
})

PlayerSection:Toggle({
    Title = "锁定重力",
    Value = lockGrav,
    Callback = function(v)
        lockGrav = v
        applyCharacterValues()
    end
})

-- 飞行系统
local flying = false
local flySpeed = 50
local bg, bv
local flyConnection

local function startFlying()
    if flying then return end
    
    local character = game.Players.LocalPlayer.Character
    if not character then
        DynamicIsland:Show("找不到角色", "error", 3)
        return
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        DynamicIsland:Show("找不到Humanoid", "error", 3)
        return
    end
    
    local torso = character:FindFirstChild("HumanoidRootPart")
    if not torso then
        DynamicIsland:Show("找不到身体部位", "error", 3)
        return
    end
    
    flying = true
    
    bg = Instance.new("BodyGyro", torso)
    bg.P = 9e4
    bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.cframe = torso.CFrame
    
    bv = Instance.new("BodyVelocity", torso)
    bv.Velocity = Vector3.new(0, 0.1, 0)
    bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    
    humanoid.PlatformStand = true
    
    -- 飞行控制
    flyConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if not flying or not torso then
            stopFlying()
            return
        end
        
        local cam = workspace.CurrentCamera
        local moveDirection = Vector3.new(0, 0, 0)
        
        -- 键盘控制
        if not IS_MOBILE then
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + cam.CFrame.LookVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - cam.CFrame.LookVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - cam.CFrame.RightVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + cam.CFrame.RightVector
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
                moveDirection = moveDirection + Vector3.new(0, 1, 0)
            end
            if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
                moveDirection = moveDirection - Vector3.new(0, 1, 0)
            end
        end
        
        if moveDirection.Magnitude > 0 then
            bv.Velocity = moveDirection.Unit * flySpeed
        else
            bv.Velocity = Vector3.new(0, 0, 0)
        end
    end)
    
    DynamicIsland:Show("飞行模式已启用 - 速度: " .. flySpeed, "success", 3)
end

local function stopFlying()
    if not flying then return end
    flying = false
    
    if bg then bg:Destroy() end
    if bv then bv:Destroy() end
    if flyConnection then flyConnection:Disconnect() end
    
    local character = game.Players.LocalPlayer.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end
    
    DynamicIsland:Show("飞行模式已禁用", "info", 3)
end

PlayerSection:Toggle({
    Title = "启用飞行",
    Desc = IS_MOBILE and "自动飞行模式" or "使用WASD和空格键控制飞行",
    Value = false,
    Callback = function(v)
        if v then
            startFlying()
        else
            stopFlying()
        end
    end
})

PlayerSection:Slider({
    Title = "飞行速度",
    Desc = "调整飞行移动速度",
    Value = { Min = 10, Max = 200, Default = 50 },
    Callback = function(value)
        flySpeed = value
        if flying then
            DynamicIsland:Show("飞行速度更新: " .. value, "info", 2)
        end
    end
})

-- 无敌模式
local godMode = false
PlayerSection:Toggle({
    Title = "无敌模式",
    Desc = "免疫所有伤害",
    Value = false,
    Callback = function(v)
        godMode = v
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.MaxHealth = v and math.huge or 100
                if v then
                    humanoid.Health = math.huge
                end
            end
        end
        DynamicIsland:Show(v and "无敌模式已启用" or "无敌模式已禁用", v and "success" or "info", 2)
    end
})

-- 穿墙模式
local noclip = false
local noclipConnection
PlayerSection:Toggle({
    Title = "穿墙模式",
    Desc = "可以穿过墙壁和障碍物",
    Value = false,
    Callback = function(v)
        noclip = v
        if v then
            noclipConnection = game:GetService("RunService").Stepped:Connect(function()
                if noclip and game.Players.LocalPlayer.Character then
                    for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
            end
        end
        DynamicIsland:Show(v and "穿墙模式已启用" or "穿墙模式已禁用", v and "success" or "info", 2)
    end
})

-- AI-Aimbot 系统
local AimbotSection = TabHandles.AimbotTab:Section({
    Title = "AI瞄准系统",
    Icon = "target"
})

local aimbotEnabled = false
local aimbotSettings = {
    smoothness = 0.35,
    fov = 120,
    prediction = 0.12,
    bone = "Head"
}

AimbotSection:Toggle({
    Title = "启用Aimbot",
    Desc = "激活AI辅助瞄准系统",
    Value = false,
    Callback = function(v)
        aimbotEnabled = v
        DynamicIsland:Show(v and "Aimbot已启用" or "Aimbot已禁用", v and "success" or "info", 2)
    end
})

AimbotSection:Slider({
    Title = "平滑度",
    Desc = "瞄准移动的平滑程度",
    Value = { Min = 0.1, Max = 1, Default = 0.35 },
    Callback = function(value)
        aimbotSettings.smoothness = value
    end
})

AimbotSection:Slider({
    Title = "FOV范围",
    Desc = "瞄准检测范围",
    Value = { Min = 50, Max = 300, Default = 120 },
    Callback = function(value)
        aimbotSettings.fov = value
    end
})

AimbotSection:Dropdown({
    Title = "瞄准骨骼",
    Values = {"Head", "UpperTorso", "HumanoidRootPart", "Random"},
    Value = "Head",
    Callback = function(option)
        aimbotSettings.bone = option
    end
})

-- 自动射击功能
AimbotSection:Toggle({
    Title = "自动射击",
    Desc = "自动瞄准并射击目标",
    Value = false,
    Callback = function(v)
        DynamicIsland:Show(v and "自动射击已启用" or "自动射击已禁用", v and "success" or "info", 2)
    end
})

-- ESP系统
local ESPSection = TabHandles.ESPTab:Section({
    Title = "透视系统",
    Icon = "eye"
})

local espEnabled = false
local espSettings = {
    showBoxes = true,
    showTracers = true,
    showNames = true,
    showDistance = true,
    showHealth = true
}

ESPSection:Toggle({
    Title = "启用ESP",
    Desc = "显示玩家位置和信息",
    Value = false,
    Callback = function(v)
        espEnabled = v
        DynamicIsland:Show(v and "ESP已启用" or "ESP已禁用", v and "success" or "info", 2)
    end
})

ESPSection:Toggle({
    Title = "显示方框",
    Value = true,
    Callback = function(v)
        espSettings.showBoxes = v
    end
})

ESPSection:Toggle({
    Title = "显示线条",
    Value = true,
    Callback = function(v)
        espSettings.showTracers = v
    end
})

ESPSection:Toggle({
    Title = "显示名称",
    Value = true,
    Callback = function(v)
        espSettings.showNames = v
    end
})

ESPSection:Toggle({
    Title = "显示距离",
    Value = true,
    Callback = function(v)
        espSettings.showDistance = v
    end
})

ESPSection:Toggle({
    Title = "显示血量",
    Value = true,
    Callback = function(v)
        espSettings.showHealth = v
    end
})

-- 移动功能增强
local MovementSection = TabHandles.MovementTab:Section({
    Title = "移动增强",
    Icon = "wind"
})

-- 超级跳跃
local superJump = false
MovementSection:Toggle({
    Title = "超级跳跃",
    Desc = "大幅增加跳跃高度",
    Value = false,
    Callback = function(v)
        superJump = v
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = v and 120 or 50
            end
        end
        DynamicIsland:Show(v and "超级跳跃已启用" or "超级跳跃已禁用", v and "success" or "info", 2)
    end
})

-- 速度提升
local speedBoost = false
MovementSection:Toggle({
    Title = "速度提升",
    Desc = "大幅增加移动速度",
    Value = false,
    Callback = function(v)
        speedBoost = v
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = v and 40 or 16
            end
        end
        DynamicIsland:Show(v and "速度提升已启用" or "速度提升已禁用", v and "success" or "info", 2)
    end
})

-- 无限体力
local infiniteStamina = false
MovementSection:Toggle({
    Title = "无限体力",
    Desc = "永远不会消耗体力",
    Value = false,
    Callback = function(v)
        infiniteStamina = v
        DynamicIsland:Show(v and "无限体力已启用" or "无限体力已禁用", v and "success" or "info", 2)
    end
})

-- 脚本中心
local ScriptsSection = TabHandles.ScriptsTab:Section({
    Title = "脚本库",
    Icon = "package"
})

-- 脚本按钮配置
local scriptButtons = {
    {"FEVR脚本", "vr", "https://raw.githubusercontent.com/randomstring0/Qwerty/refs/heads/main/qwerty45.lua"},
    {"控制台脚本", "terminal", "https://raw.githubusercontent.com/yxgh165/yxgh165/main/666"},
    {"XA HUB", "codesandbox", "https://raw.gitcode.com/Xingtaiduan/Scripts/raw/main/Loader.lua"},
    {"RB脚本", "cpu", "https://raw.githubusercontent.com/Yungengxin/roblox/refs/heads/main/Rb-Hub"},
    {"生存与杀手", "skull", "https://raw.githubusercontent.com/Milan08Studio/ChairWare/main/main.lua"},
    {"爱德华", "user", "https://raw.githubusercontent.com/gumanba/Scripts/main/Edward"},
    {"活了7天", "calendar", "https://rawscripts.net/raw/Universal-Script-7-days-to-live-36824"},
    {"死铁轨", "train", "https://raw.githubusercontent.com/iopjklbnmsss/SansHubScript/refs/heads/main/SansHub"},
    {"一路向西刷钱", "dollar-sign", "https://raw.githubusercontent.com/yxgh165/yxgh165/main/一路向西"},
    {"自然灾害黑洞v6", "cloud-rain", "https://rawscripts.net/raw/Universal-Script-Super-ring-Parts-V6-28581"},
    {"俄亥俄州", "map", "https://raw.githubusercontent.com/Xingtaiduan/Script/refs/heads/main/Games/俄亥俄州.lua"},
    {"墨水游戏", "pen-tool", "https://raw.githubusercontent.com/Xingtaiduan/Script/refs/heads/main/Games/墨水游戏.lua"},
    {"99夜", "moon", "https://raw.githubusercontent.com/Xingtaiduan/Script/refs/heads/main/Games/森林中的99夜.lua"},
    {"Doors汉化", "door-open", "https://example.com/doors-script"},
    {"烂梗社区刷钱", "trending-up", "https://raw.githubusercontent.com/XOTRXONY/EasyScript/main/Suao.luau"}
}

-- 创建脚本按钮
for i, script in ipairs(scriptButtons) do
    ScriptsSection:Button({
        Title = script[1],
        Icon = script[2],
        Callback = function()
            DynamicIsland:Show("正在加载: " .. script[1], "info", 2)
            local success, err = pcall(function()
                loadstring(game:HttpGet(script[3]))()
            end)
            
            if success then
                DynamicIsland:Show(script[1] .. " 加载成功", "success", 3)
            else
                DynamicIsland:Show(script[1] .. " 加载失败", "error", 3)
                warn("脚本加载错误: " .. tostring(err))
            end
        end
    })
end

-- 设置页面
local SettingsSection = TabHandles.SettingsTab:Section({
    Title = "界面设置",
    Icon = "sliders"
})

-- 主题选择
local themes = {"Dark", "Light", "Blue", "Purple", "Green"}
SettingsSection:Dropdown({
    Title = "界面主题",
    Values = themes,
    Value = "Dark",
    Callback = function(theme)
        WindUI:SetTheme(theme)
        DynamicIsland:Show("主题已切换: " .. theme, "success", 2)
    end
})

SettingsSection:Slider({
    Title = "界面透明度",
    Value = { Min = 0, Max = 1, Default = 0.15 },
    Callback = function(value)
        WindUI.TransparencyValue = value
        Window:ToggleTransparency(value > 0)
    end
})

-- 手机专用设置
if IS_MOBILE then
    SettingsSection:Slider({
        Title = "界面缩放",
        Desc = "调整界面大小适应手机屏幕",
        Value = { Min = 0.6, Max = 1, Default = 0.75 },
        Callback = function(value)
            SCREEN_SCALE = value
            DynamicIsland:Show("界面缩放: " .. math.floor(value * 100) .. "%", "info", 2)
        end
    })
end

SettingsSection:Button({
    Title = "重置所有设置",
    Icon = "refresh-cw",
    Variant = "Destructive",
    Callback = function()
        Window:Dialog({
            Title = "确认重置",
            Content = "确定要重置所有设置吗？此操作不可撤销。",
            Buttons = {
                {
                    Title = "确认重置",
                    Variant = "Destructive",
                    Callback = function()
                        -- 重置所有设置
                        aimbotEnabled = false
                        espEnabled = false
                        flying = false
                        godMode = false
                        noclip = false
                        superJump = false
                        speedBoost = false
                        infiniteStamina = false
                        
                        stopFlying()
                        if noclipConnection then
                            noclipConnection:Disconnect()
                        end
                        
                        DynamicIsland:Show("所有设置已重置", "success", 3)
                    end
                },
                {
                    Title = "取消",
                    Variant = "Tertiary"
                }
            }
        })
    end
})

-- 窗口事件
Window:OnClose(function()
    DynamicIsland:Show("坤坤大帝脚本已关闭", "info", 2)
end)

Window:OnDestroy(function()
    stopFlying()
    if noclipConnection then
        noclipConnection:Disconnect()
    end
    DynamicIsland:Show("脚本已卸载", "info", 2)
end)

-- 初始化完成
CreateAdvancedKunKunAnimation()

-- 延迟显示欢迎消息
delay(5, function()
    DynamicIsland:Show("坤坤大帝脚本加载完成", "success", 4)
    if IS_MOBILE then
        DynamicIsland:Show("已自动适配手机屏幕，点击缩放按钮调整大小", "info", 5)
    end
end)

return {
    Window = Window,
    DynamicIsland = DynamicIsland,
    IsMobile = IS_MOBILE,
    ScreenScale = SCREEN_SCALE
}")
local input = io.read()
print("解码结果：", b64.decode(input))
