-- Base64 解码器（Roblox 可用）
local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local b64lookup = {}
for i = 1, #b64chars do
    b64lookup[b64chars:sub(i, i)] = i - 1
end

local function base64_decode(data)
    data = data:gsub('[^%w%+%/%=]', '')
    local result = {}
    local n = 1
    while n <= #data do
        local a = b64lookup[data:sub(n, n)]
        local b = b64lookup[data:sub(n+1, n+1)]
        local c = b64lookup[data:sub(n+2, n+2)]
        local d = b64lookup[data:sub(n+3, n+3)]

        local x = (a * 262144) + (b * 4096) + ((c or 0) * 64) + (d or 0)
        result[#result+1] = string.char(
            math.floor(x / 65536) % 256,
            math.floor(x / 256) % 256,
            x % 256
        )
        n = n + 4
    end

    local pad = select(2, data:gsub('=', '='))
    if pad == 2 then
        result[#result] = result[#result]:sub(1, 1)
    elseif pad == 1 then
        result[#result] = result[#result]:sub(1, 2)
    end

    return table.concat(result)
end

-- ✅ 示例：解码并执行（仅限你自己的脚本）
local decoded = base64_decode("bG9jYWwgUmF5ZmllbGQgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9zaXJpdXMubWVudS9yYXlmaWVsZCcpKSgpCgotLSDkvb/nlKggUmF5ZmllbGQg5YaF572u5a+G6ZKl57O757ufCmxvY2FsIFdpbmRvdyA9IFJheWZpZWxkOkNyZWF0ZVdpbmRvdyh7CiAgICBOYW1lID0gIuWdpOWdpOWkp+W4neiEmuacrCAtICIgLi4gKGlkZW50aWZ5ZXhlY3V0b3IgYW5kIGlkZW50aWZ5ZXhlY3V0b3IoKSBvciAi5pyq55+l5omn6KGM5ZmoIiksCiAgICBMb2FkaW5nVGl0bGUgPSAi5Z2k5Z2k5aSn5bid6ISa5pys5Yqg6L295LitIiwKICAgIExvYWRpbmdTdWJ0aXRsZSA9ICLlsIrkuqvnibnmnYPniYgiLAogICAgQ29uZmlndXJhdGlvblNhdmluZyA9IHsKICAgICAgICBFbmFibGVkID0gdHJ1ZSwKICAgICAgICBGb2xkZXJOYW1lID0gIlN0aXRjaENvbmZpZyIsCiAgICAgICAgRmlsZU5hbWUgPSAiU2V0dGluZ3MiCiAgICB9LAogICAgRGlzY29yZCA9IHsKICAgICAgICBFbmFibGVkID0gZmFsc2UsCiAgICAgICAgSW52aXRlID0gImh0dHBzOi8vZGlzY29yZC5nZy8iLAogICAgICAgIFJlbWVtYmVySm9pbnMgPSB0cnVlCiAgICB9LAogICAgS2V5U3lzdGVtID0gdHJ1ZSwgLS0g5ZCv55So5YaF572u5a+G6ZKl57O757ufCiAgICBLZXlTZXR0aW5ncyA9IHsKICAgICAgICBUaXRsZSA9ICLlnaTlnaTlpKfluJ3ohJrmnKzpqozor4EiLAogICAgICAgIFN1YnRpdGxlID0gIuivt+i+k+WFpeacieaViOWvhumSpSIsCiAgICAgICAgTm90ZSA9ICLmsqHmnInlr4bpkqXvvJ/liqDlhaVEaXNjb3Jk6I635Y+WIiwKICAgICAgICBGaWxlTmFtZSA9ICJTdGl0Y2hLZXkiLAogICAgICAgIFNhdmVLZXkgPSB0cnVlLAogICAgICAgIEdyYWJLZXlGcm9tU2l0ZSA9IGZhbHNlLAogICAgICAgIEtleSA9IHsiMjAyNSIsICI2NjYiLCAiS1VOS1VONjY2IiwgIjY2NmZyZWUiLCAiVEFJWU9VWUlTSUxFIn0gLS0g5pyJ5pWI5a+G6ZKl5YiX6KGoCiAgICB9Cn0pCgotLSDlnaTlnaTlpKfluJ3ohJrmnKzlvLnmgKfliqjnlLsKbG9jYWwgZnVuY3Rpb24gQ3JlYXRlS3VuS3VuQW5pbWF0aW9uKCkKICAgIC0tIOWIm+W7uuWFqOWxj+iDjOaZrwogICAgbG9jYWwgYmcgPSBEcmF3aW5nLm5ldygiU3F1YXJlIikKICAgIGJnLlNpemUgPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUKICAgIGJnLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoMCwgMCkKICAgIGJnLkNvbG9yID0gQ29sb3IzLm5ldygwLCAwLCAwKQogICAgYmcuRmlsbGVkID0gdHJ1ZQogICAgYmcuVHJhbnNwYXJlbmN5ID0gMQogICAgYmcuVmlzaWJsZSA9IHRydWUKICAgIGJnLlpJbmRleCA9IDk5OQogICAgCiAgICAtLSDliJvlu7rlnaTlnaTlpKfluJ3mloflrZcKICAgIGxvY2FsIHRleHQgPSBEcmF3aW5nLm5ldygiVGV4dCIpCiAgICB0ZXh0LlRleHQgPSAi5Z2k5Z2k5aSn5bid6ISa5pysIgogICAgdGV4dC5TaXplID0gMTAwCiAgICB0ZXh0LkNlbnRlciA9IHRydWUKICAgIHRleHQuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyh3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWC8yLCAtMjAwKQogICAgdGV4dC5Db2xvciA9IENvbG9yMy5uZXcoMSwgMC4yLCAwLjIpCiAgICB0ZXh0Lk91dGxpbmUgPSB0cnVlCiAgICB0ZXh0Lk91dGxpbmVDb2xvciA9IENvbG9yMy5uZXcoMSwgMSwgMSkKICAgIHRleHQuVHJhbnNwYXJlbmN5ID0gMAogICAgdGV4dC5WaXNpYmxlID0gdHJ1ZQogICAgdGV4dC5aSW5kZXggPSAxMDAwCiAgICAKICAgIC0tIOWIm+W7uuWJr+agh+mimAogICAgbG9jYWwgc3ViVGV4dCA9IERyYXdpbmcubmV3KCJUZXh0IikKICAgIHN1YlRleHQuVGV4dCA9ICLlsIrkuqvnibnmnYPniYggLSDlkK/liqjmiJDlip8iCiAgICBzdWJUZXh0LlNpemUgPSA0MAogICAgc3ViVGV4dC5DZW50ZXIgPSB0cnVlCiAgICBzdWJUZXh0LlBvc2l0aW9uID0gVmVjdG9yMi5uZXcod29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgLTEwMCkKICAgIHN1YlRleHQuQ29sb3IgPSBDb2xvcjMubmV3KDAuOCwgMC44LCAxKQogICAgc3ViVGV4dC5PdXRsaW5lID0gdHJ1ZQogICAgc3ViVGV4dC5PdXRsaW5lQ29sb3IgPSBDb2xvcjMubmV3KDAuMiwgMC4yLCAwLjIpCiAgICBzdWJUZXh0LlRyYW5zcGFyZW5jeSA9IDAKICAgIHN1YlRleHQuVmlzaWJsZSA9IHRydWUKICAgIHN1YlRleHQuWkluZGV4ID0gMTAwMAogICAgCiAgICAtLSDlvLnmgKfliqjnlLvlh73mlbAKICAgIGxvY2FsIGZ1bmN0aW9uIGVsYXN0aWNBbmltYXRpb24ob2JqLCB0YXJnZXRZLCBkdXJhdGlvbikKICAgICAgICBsb2NhbCBzdGFydFkgPSBvYmouUG9zaXRpb24uWQogICAgICAgIGxvY2FsIHN0YXJ0VGltZSA9IHRpY2soKQogICAgICAgIGxvY2FsIGRhbXBpbmcgPSAwLjcKICAgICAgICBsb2NhbCBzdGlmZm5lc3MgPSAwLjMKICAgICAgICAKICAgICAgICBsb2NhbCBjb25uZWN0aW9uCiAgICAgICAgY29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIGVsYXBzZWQgPSB0aWNrKCkgLSBzdGFydFRpbWUKICAgICAgICAgICAgbG9jYWwgcHJvZ3Jlc3MgPSBlbGFwc2VkIC8gZHVyYXRpb24KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHByb2dyZXNzID49IDEgdGhlbgogICAgICAgICAgICAgICAgb2JqLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcob2JqLlBvc2l0aW9uLlgsIHRhcmdldFkpCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgb3ZlcnNob290ID0gbWF0aC5zaW4ocHJvZ3Jlc3MgKiBtYXRoLnBpICogNCkgKiAoMSAtIHByb2dyZXNzKQogICAgICAgICAgICBsb2NhbCBuZXdZID0gdGFyZ2V0WSArIChzdGFydFkgLSB0YXJnZXRZKSAqIG1hdGgucG93KDEgLSBwcm9ncmVzcywgMikgKiBvdmVyc2hvb3QgKiBzdGlmZm5lc3MKICAgICAgICAgICAgc3RpZmZuZXNzID0gc3RpZmZuZXNzICogZGFtcGluZwogICAgICAgICAgICBvYmouUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhvYmouUG9zaXRpb24uWCwgbmV3WSkKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGZvciBpID0gMCwgMSwgMC4wNSBkbwogICAgICAgICAgICBiZy5UcmFuc3BhcmVuY3kgPSAxIC0gaSAqIDAuNwogICAgICAgICAgICB3YWl0KDAuMDEpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZWxhc3RpY0FuaW1hdGlvbih0ZXh0LCB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWS8yIC0gMTAwLCAxLjUpCiAgICAgICAgCiAgICAgICAgd2FpdCgwLjIpCiAgICAgICAgZWxhc3RpY0FuaW1hdGlvbihzdWJUZXh0LCB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWS8yICsgMjAsIDEuMykKICAgICAgICAKICAgICAgICB3YWl0KDMuNSkKICAgICAgICAKICAgICAgICBmb3IgaSA9IDAsIDEsIDAuMDUgZG8KICAgICAgICAgICAgdGV4dC5UcmFuc3BhcmVuY3kgPSBpCiAgICAgICAgICAgIHN1YlRleHQuVHJhbnNwYXJlbmN5ID0gaQogICAgICAgICAgICBiZy5UcmFuc3BhcmVuY3kgPSAwLjMgKyBpICogMC43CiAgICAgICAgICAgIHdhaXQoMC4wMSkKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBiZzpSZW1vdmUoKQogICAgICAgIHRleHQ6UmVtb3ZlKCkKICAgICAgICBzdWJUZXh0OlJlbW92ZSgpCiAgICBlbmQpCmVuZAoKLS0g5aSN5Yi25Yiw5Ymq6LS05p2/5Ye95pWwCmxvY2FsIGZ1bmN0aW9uIENvcHlUb0NsaXBib2FyZCh0ZXh0KQogICAgaWYgc2V0Y2xpcGJvYXJkIHRoZW4KICAgICAgICBzZXRjbGlwYm9hcmQodGV4dCkKICAgICAgICByZXR1cm4gdHJ1ZQogICAgZWxzZWlmIHdyaXRlY2xpcGJvYXJkIHRoZW4KICAgICAgICB3cml0ZWNsaXBib2FyZCh0ZXh0KQogICAgICAgIHJldHVybiB0cnVlCiAgICBlbHNlaWYgdG9jbGlwYm9hcmQgdGhlbgogICAgICAgIHRvY2xpcGJvYXJkKHRleHQpCiAgICAgICAgcmV0dXJuIHRydWUKICAgIGVsc2UKICAgICAgICBwcmludCgiW+WkjeWItuWGheWuuV0gIiAuLiB0ZXh0KQogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCmVuZAoKLS0g5pi+56S65aSN5Yi25oiQ5Yqf6YCa55+lCmxvY2FsIGZ1bmN0aW9uIFNob3dDb3B5Tm90aWZpY2F0aW9uKHN1Y2Nlc3MsIGNvbnRlbnQpCiAgICBpZiBzdWNjZXNzIHRoZW4KICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLlpI3liLbmiJDlip8iLAogICAgICAgICAgICBDb250ZW50ID0gIuW3suWkjeWItuWIsOWJqui0tOadvzogIiAuLiBjb250ZW50LAogICAgICAgICAgICBEdXJhdGlvbiA9IDMsCiAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgIH0pCiAgICBlbHNlCiAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgVGl0bGUgPSAi5aSN5Yi25aSx6LSlIiwKICAgICAgICAgICAgQ29udGVudCA9ICLor7fmiYvliqjlpI3liLbmjqfliLblj7DkuK3nmoTlhoXlrrkiLAogICAgICAgICAgICBEdXJhdGlvbiA9IDUsCiAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgIH0pCiAgICBlbmQKZW5kCgotLSDliJvlu7rkuLvnqpflj6PlhoXlrrkKbG9jYWwgZnVuY3Rpb24gQ3JlYXRlTWFpbldpbmRvd0NvbnRlbnQoKQogICAgLS0g5YWs5ZGKIFRhYgogICAgbG9jYWwgVGFiMSA9IFdpbmRvdzpDcmVhdGVUYWIoIuWFrOWRiiIsIDc3MzM3Nzk2MTApCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGdldERhdGUoKSByZXR1cm4gb3MuZGF0ZSgiJVktJW0tJWQgJUg6JU0iKSBlbmQKICAgIGxvY2FsIGZ1bmN0aW9uIGdldFBsYXllcigpCiAgICAgICAgbG9jYWwgcCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIFsi55So5oi35ZCNIl0gICA9IHAuTmFtZSwKICAgICAgICAgICAgWyLmmL7npLrlkI0iXSAgID0gcC5EaXNwbGF5TmFtZSwKICAgICAgICAgICAgWyLnlKjmiLdJRCJdICAgPSBwLlVzZXJJZCwKICAgICAgICAgICAgWyLms6jlhozlpKnmlbAiXSA9IHAuQWNjb3VudEFnZSwKICAgICAgICAgICAgWyLlvZPliY3muLjmiI8iXSA9IGdhbWU6R2V0U2VydmljZSgiTWFya2V0cGxhY2VTZXJ2aWNlIik6R2V0UHJvZHVjdEluZm8oZ2FtZS5QbGFjZUlkKS5OYW1lCiAgICAgICAgfQogICAgZW5kCiAgICAKICAgIFRhYjE6Q3JlYXRlU2VjdGlvbigi57O757uf5L+h5oGvIikKICAgIFRhYjE6Q3JlYXRlTGFiZWwoIvCfk4Ug5b2T5YmN5pe26Ze0OiAiIC4uIGdldERhdGUoKSkKICAgIAogICAgZm9yIGssIHYgaW4gcGFpcnMoZ2V0UGxheWVyKCkpIGRvCiAgICAgICAgVGFiMTpDcmVhdGVMYWJlbChrIC4uICLvvJogIiAuLiB0b3N0cmluZyh2KSkKICAgIGVuZAogICAgCiAgICBUYWIxOkNyZWF0ZUJ1dHRvbih7CiAgICAgICAgTmFtZSA9ICLkuIDplK7lpI3liLZRUeWPtyIsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKSAKICAgICAgICAgICAgbG9jYWwgc3VjY2VzcyA9IENvcHlUb0NsaXBib2FyZCgiOTEzMzQ4Mjg1IikKICAgICAgICAgICAgU2hvd0NvcHlOb3RpZmljYXRpb24oc3VjY2VzcywgIjkxMzM0ODI4NSIpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICAtLSDkurrnianlip/og70gVGFiCiAgICBsb2NhbCBUYWIyID0gV2luZG93OkNyZWF0ZVRhYigi5Lq654mp5Yqf6IO9IiwgNzczMzc3OTYxMCkKICAgIAogICAgLS0g5YW85a65IGV4ZWN1dG9yIOayoeaciSBtb3VzZTFwcmVzcyAvIG1vdXNlMXJlbGVhc2UKICAgIGxvY2FsIG1vdXNlMXByZXNzICA9IG1vdXNlMXByZXNzICBvciBmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgdmltID0gZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsSW5wdXRNYW5hZ2VyIikKICAgICAgICB2aW06U2VuZE1vdXNlQnV0dG9uRXZlbnQoMCwwLDAsdHJ1ZSxnYW1lLDEpCiAgICBlbmQKICAgIGxvY2FsIG1vdXNlMXJlbGVhc2UgPSBtb3VzZTFyZWxlYXNlIG9yIGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCB2aW0gPSBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKQogICAgICAgIHZpbTpTZW5kTW91c2VCdXR0b25FdmVudCgwLDAsMCxmYWxzZSxnYW1lLDEpCiAgICBlbmQKICAgIAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIOWPjOeLrOeriyBGT1bvvIjnmb3ot5/pmo8gKyDmqZnlm7rlrprvvInpg73lj4LkuI7nnoTlh4bliKTlrpogLSDlop7lvLrniYgKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAtLSDpgJrnlKjlj4LmlbAKICAgIGxvY2FsIGFpbWJvdEVuYWJsZWQgICAgICA9IGZhbHNlCiAgICBsb2NhbCBhaW1ib3RTbW9vdGggICAgICAgPSAwLjM1CiAgICBsb2NhbCBhaW1ib3RCb25lICAgICAgICAgPSAiSGVhZCIKICAgIGxvY2FsIGFpbWJvdFByZWRpY3Rpb24gICA9IDAuMTIKICAgIGxvY2FsIGFpbWJvdERlbGF5ICAgICAgICA9IDAuMDgKICAgIGxvY2FsIGFpbWJvdENoZWNrVGVhbSAgICA9IGZhbHNlCiAgICBsb2NhbCBsYXN0RmlyZSA9IDAKICAgIGxvY2FsIGFpbWJvdENvbm4KICAgIGxvY2FsIGFpbWJvdE1vZGUgPSAiRGlzdGFuY2UiCiAgICBsb2NhbCB3YWxsQ2hlY2tFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIGFpbUxpbmVFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIGFpbUxpbmUgPSBEcmF3aW5nLm5ldygiTGluZSIpCiAgICAKICAgIC0tIOWIneWni+WMluiHqueehOe6v+adoQogICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgIGFpbUxpbmUuVGhpY2tuZXNzID0gMS41CiAgICBhaW1MaW5lLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMCwgMjU1LCAwKQogICAgYWltTGluZS5aSW5kZXggPSAxMQogICAgCiAgICAtLSDnvLrlpLHlj5jph4/kuIDmrKHmgKfooaXlhagKICAgIGxvY2FsIENhbWVyYSA9IHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhCiAgICBsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKICAgIGxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQogICAgbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCiAgICAKICAgIC0tIDEuIOi3n+maj+m8oOaghyBGT1YKICAgIGxvY2FsIG1vdXNlRk9WICAgICAgPSAxMjAKICAgIGxvY2FsIG1vdXNlRm92Q2lyY2xlID0gRHJhd2luZy5uZXcoIkNpcmNsZSIpCiAgICBtb3VzZUZvdkNpcmNsZS5OdW1TaWRlcyAgPSA2NAogICAgbW91c2VGb3ZDaXJjbGUuUmFkaXVzICAgID0gbW91c2VGT1YKICAgIG1vdXNlRm92Q2lyY2xlLlRoaWNrbmVzcyA9IDEuNQogICAgbW91c2VGb3ZDaXJjbGUuQ29sb3IgICAgID0gQ29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpCiAgICBtb3VzZUZvdkNpcmNsZS5GaWxsZWQgICAgPSBmYWxzZQogICAgbW91c2VGb3ZDaXJjbGUuVmlzaWJsZSAgID0gZmFsc2UKICAgIG1vdXNlRm92Q2lyY2xlLlpJbmRleCA9IDEwCiAgICAKICAgIC0tIDIuIOWbuuWumuS4reW/gyBGT1YKICAgIGxvY2FsIGZpeGVkRk9WICAgICAgPSA5MAogICAgbG9jYWwgZml4ZWRGb3ZDaXJjbGUgPSBEcmF3aW5nLm5ldygiQ2lyY2xlIikKICAgIGZpeGVkRm92Q2lyY2xlLk51bVNpZGVzICA9IDY0CiAgICBmaXhlZEZvdkNpcmNsZS5SYWRpdXMgICAgPSBmaXhlZEZPVgogICAgZml4ZWRGb3ZDaXJjbGUuVGhpY2tuZXNzID0gMS41CiAgICBmaXhlZEZvdkNpcmNsZS5Db2xvciAgICAgPSBDb2xvcjMuZnJvbVJHQigyNTUsMTY1LDApCiAgICBmaXhlZEZvdkNpcmNsZS5GaWxsZWQgICAgPSBmYWxzZQogICAgZml4ZWRGb3ZDaXJjbGUuVmlzaWJsZSAgID0gZmFsc2UKICAgIGZpeGVkRm92Q2lyY2xlLlpJbmRleCA9IDkKICAgIAogICAgLS0g5Zu65a6a5ZyG5Lit5b+D5LiA5qyh6K6+572uCiAgICBsb2NhbCBmdW5jdGlvbiBzZXRGaXhlZENlbnRlcigpCiAgICAgICAgbG9jYWwgY2VudGVyID0gVmVjdG9yMi5uZXcoQ2FtZXJhLlZpZXdwb3J0U2l6ZS5YLzIsIENhbWVyYS5WaWV3cG9ydFNpemUuWS8yKQogICAgICAgIGZpeGVkRm92Q2lyY2xlLlBvc2l0aW9uID0gY2VudGVyCiAgICAgICAgLS0g5Yid5aeL5YyW6Ieq556E57q/5p2h55qE6LW354K5CiAgICAgICAgYWltTGluZS5Gcm9tID0gY2VudGVyCiAgICBlbmQKICAgIENhbWVyYTpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIlZpZXdwb3J0U2l6ZSIpOkNvbm5lY3Qoc2V0Rml4ZWRDZW50ZXIpCiAgICBzZXRGaXhlZENlbnRlcigpCiAgICAKICAgIC0tIOW3peWFt+WHveaVsAogICAgbG9jYWwgZnVuY3Rpb24gZ2V0QWltUG9zKGNoYXJhY3RlcikKICAgICAgICBpZiBub3QgY2hhcmFjdGVyIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgICAgICBsb2NhbCByb290ID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBsb2NhbCBib25lID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKGFpbWJvdEJvbmUpIG9yIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgaWYgbm90IChyb290IGFuZCBib25lKSB0aGVuIHJldHVybiBuaWwgZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgdmVsID0gcm9vdC5WZWxvY2l0eQogICAgICAgIHJldHVybiBib25lLlBvc2l0aW9uICsgdmVsICogYWltYm90UHJlZGljdGlvbgogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGlzVmlzaWJsZShwb3MsIHRhcmdldENoYXJhY3RlcikKICAgICAgICBpZiBub3Qgd2FsbENoZWNrRW5hYmxlZCB0aGVuIHJldHVybiB0cnVlIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIG9yaWdpbiA9IENhbWVyYS5DRnJhbWUuUG9zaXRpb24KICAgICAgICBsb2NhbCBkaXJlY3Rpb24gPSAocG9zIC0gb3JpZ2luKS5Vbml0CiAgICAgICAgbG9jYWwgcmF5ID0gUmF5Lm5ldyhvcmlnaW4sIGRpcmVjdGlvbiAqIChvcmlnaW4gLSBwb3MpLk1hZ25pdHVkZSkKICAgICAgICAKICAgICAgICBsb2NhbCBpZ25vcmVMaXN0ID0ge0xvY2FsUGxheWVyLkNoYXJhY3RlciwgQ2FtZXJhfQogICAgICAgIGlmIHRhcmdldENoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIHRhYmxlLmluc2VydChpZ25vcmVMaXN0LCB0YXJnZXRDaGFyYWN0ZXIpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgcGFydCwgcG9zaXRpb24gPSB3b3Jrc3BhY2U6RmluZFBhcnRPblJheVdpdGhJZ25vcmVMaXN0KHJheSwgaWdub3JlTGlzdCkKICAgICAgICByZXR1cm4gcGFydCA9PSBuaWwKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBpbkFueUZPVih3b3JsZFBvcykKICAgICAgICBsb2NhbCBzY3JlZW5Qb3MgPSBDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQod29ybGRQb3MpCiAgICAgICAgaWYgc2NyZWVuUG9zLlogPD0gMCB0aGVuIHJldHVybiBmYWxzZSBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCBtb3VzZVBvcyA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpCiAgICAgICAgbG9jYWwgY2VudGVyID0gVmVjdG9yMi5uZXcoQ2FtZXJhLlZpZXdwb3J0U2l6ZS5YLzIsIENhbWVyYS5WaWV3cG9ydFNpemUuWS8yKQogICAgICAgIAogICAgICAgIGlmIG1vdXNlRm92Q2lyY2xlLlZpc2libGUgdGhlbgogICAgICAgICAgICBpZiAoVmVjdG9yMi5uZXcoc2NyZWVuUG9zLlgsIHNjcmVlblBvcy5ZKSAtIG1vdXNlUG9zKS5NYWduaXR1ZGUgPD0gbW91c2VGT1YgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgZml4ZWRGb3ZDaXJjbGUuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgIGlmIChWZWN0b3IyLm5ldyhzY3JlZW5Qb3MuWCwgc2NyZWVuUG9zLlkpIC0gY2VudGVyKS5NYWduaXR1ZGUgPD0gZml4ZWRGT1YgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gZ2V0Q2xvc2VzdCgpCiAgICAgICAgbG9jYWwgY2xvc2VzdCwgbWluRGlzdCA9IG5pbCwgbWF0aC5odWdlCiAgICAgICAgbG9jYWwgY2VudGVyID0gVmVjdG9yMi5uZXcoQ2FtZXJhLlZpZXdwb3J0U2l6ZS5YLzIsIENhbWVyYS5WaWV3cG9ydFNpemUuWS8yKQogICAgICAgIAogICAgICAgIGZvciBfLCBwbHIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBwbHIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgaWYgYWltYm90Q2hlY2tUZWFtIGFuZCBwbHIuVGVhbSBhbmQgcGxyLlRlYW0gPT0gTG9jYWxQbGF5ZXIuVGVhbSB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgY2hhciA9IHBsci5DaGFyYWN0ZXIKICAgICAgICAgICAgaWYgbm90IGNoYXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGFpbVBvcyA9IGdldEFpbVBvcyhjaGFyKQogICAgICAgICAgICBpZiBub3QgYWltUG9zIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIGlmIG5vdCBpbkFueUZPVihhaW1Qb3MpIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBzcCA9IENhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludChhaW1Qb3MpCiAgICAgICAgICAgIGlmIHNwLlogPD0gMCB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgaWdub3JlTGlzdCA9IHtMb2NhbFBsYXllci5DaGFyYWN0ZXIsIENhbWVyYX0KICAgICAgICAgICAgaWYgbm90IGlzVmlzaWJsZShhaW1Qb3MsIGNoYXIpIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBkaXN0CiAgICAgICAgICAgIGlmIGFpbWJvdE1vZGUgPT0gIkRpc3RhbmNlIiB0aGVuCiAgICAgICAgICAgICAgICBkaXN0ID0gKGFpbVBvcyAtIENhbWVyYS5DRnJhbWUuUG9zaXRpb24pLk1hZ25pdHVkZQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBkaXN0ID0gKFZlY3RvcjIubmV3KHNwLlgsIHNwLlkpIC0gY2VudGVyKS5NYWduaXR1ZGUKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBkaXN0IDwgbWluRGlzdCB0aGVuCiAgICAgICAgICAgICAgICBtaW5EaXN0LCBjbG9zZXN0ID0gZGlzdCwgcGxyCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBjbG9zZXN0CiAgICBlbmQKICAgIAogICAgLS0g5Li75b6q546v77yI5bim6Ziy556s55Sp77yJCiAgICBsb2NhbCBmdW5jdGlvbiBzdGFydEFpbWJvdCgpCiAgICAgICAgaWYgYWltYm90Q29ubiB0aGVuIHJldHVybiBlbmQKICAgICAgICAKICAgICAgICBhaW1ib3RDb25uID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgaWYgbm90IGFpbWJvdEVuYWJsZWQgdGhlbiAKICAgICAgICAgICAgICAgIGFpbUxpbmUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbW91c2VGb3ZDaXJjbGUuUG9zaXRpb24gPSBVc2VySW5wdXRTZXJ2aWNlOkdldE1vdXNlTG9jYXRpb24oKQoKICAgICAgICAgICAgbG9jYWwgdGFyZ2V0ID0gZ2V0Q2xvc2VzdCgpCiAgICAgICAgICAgIGlmIG5vdCB0YXJnZXQgb3Igbm90IHRhcmdldC5DaGFyYWN0ZXIgdGhlbiAKICAgICAgICAgICAgICAgIGFpbUxpbmUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgYWltUG9zID0gZ2V0QWltUG9zKHRhcmdldC5DaGFyYWN0ZXIpCiAgICAgICAgICAgIGlmIG5vdCBhaW1Qb3MgdGhlbiAKICAgICAgICAgICAgICAgIGFpbUxpbmUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICByZXR1cm4gCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgYWltTGluZUVuYWJsZWQgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgc2NyZWVuUG9zID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KGFpbVBvcykKICAgICAgICAgICAgICAgIGlmIHNjcmVlblBvcy5aID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYWltTGluZS5Gcm9tID0gVmVjdG9yMi5uZXcoQ2FtZXJhLlZpZXdwb3J0U2l6ZS5YLzIsIENhbWVyYS5WaWV3cG9ydFNpemUuWS8yKQogICAgICAgICAgICAgICAgICAgIGFpbUxpbmUuVG8gPSBWZWN0b3IyLm5ldyhzY3JlZW5Qb3MuWCwgc2NyZWVuUG9zLlkpCiAgICAgICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGFpbUxpbmUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBkZWx0YSA9IGFpbVBvcyAtIENhbWVyYS5DRnJhbWUuUG9zaXRpb24KICAgICAgICAgICAgaWYgZGVsdGEuTWFnbml0dWRlIDwgMC4wMSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIHRhcmdldENGID0gQ0ZyYW1lLm5ldyhDYW1lcmEuQ0ZyYW1lLlBvc2l0aW9uLCBDYW1lcmEuQ0ZyYW1lLlBvc2l0aW9uICsgZGVsdGEpCiAgICAgICAgICAgIGxvY2FsIGN1cnJlbnRMb29rID0gQ2FtZXJhLkNGcmFtZS5Mb29rVmVjdG9yCiAgICAgICAgICAgIGxvY2FsIHRhcmdldExvb2sgPSB0YXJnZXRDRi5Mb29rVmVjdG9yCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBkb3QgPSBjdXJyZW50TG9vazpEb3QodGFyZ2V0TG9vaykKICAgICAgICAgICAgbG9jYWwgYW5nbGUgPSBtYXRoLmFjb3MobWF0aC5jbGFtcChkb3QsIC0xLCAxKSkKICAgICAgICAgICAgbG9jYWwgbWF4QW5nbGUgPSBtYXRoLnJhZCg5MCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGFuZ2xlIDw9IG1heEFuZ2xlIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHNtb290aEZhY3RvciA9IG1hdGguY2xhbXAoYWltYm90U21vb3RoLCAwLjAxLCAwLjk5KQogICAgICAgICAgICAgICAgbG9jYWwgbmV3TG9vayA9IGN1cnJlbnRMb29rOkxlcnAodGFyZ2V0TG9vaywgMSAtIHNtb290aEZhY3RvcikKICAgICAgICAgICAgICAgIENhbWVyYS5DRnJhbWUgPSBDRnJhbWUubmV3KENhbWVyYS5DRnJhbWUuUG9zaXRpb24sIENhbWVyYS5DRnJhbWUuUG9zaXRpb24gKyBuZXdMb29rKQogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGlmIHRpY2soKSAtIGxhc3RGaXJlID4gYWltYm90RGVsYXkgdGhlbgogICAgICAgICAgICAgICAgbW91c2UxcHJlc3MoKQogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuMDUpCiAgICAgICAgICAgICAgICBtb3VzZTFyZWxlYXNlKCkKICAgICAgICAgICAgICAgIGxhc3RGaXJlID0gdGljaygpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBzdG9wQWltYm90KCkKICAgICAgICBpZiBhaW1ib3RDb25uIHRoZW4gCiAgICAgICAgICAgIGFpbWJvdENvbm46RGlzY29ubmVjdCgpIAogICAgICAgICAgICBhaW1ib3RDb25uID0gbmlsIAogICAgICAgIGVuZAogICAgICAgIG1vdXNlRm92Q2lyY2xlLlZpc2libGUgPSBmYWxzZQogICAgICAgIGZpeGVkRm92Q2lyY2xlLlZpc2libGUgPSBmYWxzZQogICAgICAgIGFpbUxpbmUuVmlzaWJsZSA9IGZhbHNlCiAgICBlbmQKICAgIAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIEFJLUFpbWJvdCDni6znq4vmoIfnrb7pobUKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBsb2NhbCBUYWIzID0gV2luZG93OkNyZWF0ZVRhYigiQUktQWltYm90IiwgNzczMzk2MTc0OCkgLS0g5L2/55So5LiN5ZCM55qE5Zu+5qCHCiAgICAKICAgIFRhYjM6Q3JlYXRlU2VjdGlvbigiQUktQWltYm90IikKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuWQr+eUqCBBaW1ib3QiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgYWltYm90RW5hYmxlZCA9IHYKICAgICAgICAgICAgaWYgdiB0aGVuIAogICAgICAgICAgICAgICAgc3RhcnRBaW1ib3QoKSAKICAgICAgICAgICAgZWxzZSAKICAgICAgICAgICAgICAgIHN0b3BBaW1ib3QoKSAKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLku4XnnoTlh4bmlYzkuroiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGFpbWJvdENoZWNrVGVhbSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbWJvdENoZWNrVGVhbSA9IHYgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLlopnkvZPmo4DmtYsiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IHdhbGxDaGVja0VuYWJsZWQsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSB3YWxsQ2hlY2tFbmFibGVkID0gdiBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuaYvuekuuiHqueehOe6v+adoSIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gYWltTGluZUVuYWJsZWQsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBhaW1MaW5lRW5hYmxlZCA9IHYgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZURyb3Bkb3duKHsKICAgICAgICBOYW1lID0gIueehOWHhuaWueW8jyIsCiAgICAgICAgT3B0aW9ucyA9IHsiRGlzdGFuY2UiLCAiQ3Jvc3NoYWlyIn0sCiAgICAgICAgQ3VycmVudE9wdGlvbiA9IGFpbWJvdE1vZGUsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBhaW1ib3RNb2RlID0gdiBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlU2VjdGlvbigi6Lef6ZqP6byg5qCHIEZPViIpCiAgICBUYWIzOkNyZWF0ZVRvZ2dsZSh7IAogICAgICAgIE5hbWUgPSAi5pi+56S66Lef6ZqPRk9WIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgbW91c2VGb3ZDaXJjbGUuVmlzaWJsZSA9IHYgZW5kIAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVTbGlkZXIoewogICAgICAgIE5hbWUgPSAi5Y2K5b6E77yI5ruR5p2h77yJIiwKICAgICAgICBSYW5nZSA9IHswLCA1MDB9LAogICAgICAgIEluY3JlbWVudCA9IDUsCiAgICAgICAgU3VmZml4ID0gInB4IiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBtb3VzZUZPViwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIAogICAgICAgICAgICBtb3VzZUZPViA9IHYKICAgICAgICAgICAgbW91c2VGb3ZDaXJjbGUuUmFkaXVzID0gdiAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlSW5wdXQoewogICAgICAgIE5hbWUgPSAi5Y2K5b6E77yI6L6T5YWl77yJIiwKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhtb3VzZUZPViksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBsb2NhbCBuID0gdG9udW1iZXIodHh0KSAKICAgICAgICAgICAgaWYgbiB0aGVuIAogICAgICAgICAgICAgICAgbW91c2VGT1YgPSBuCiAgICAgICAgICAgICAgICBtb3VzZUZvdkNpcmNsZS5SYWRpdXMgPSBuCiAgICAgICAgICAgIGVuZCAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlU2VjdGlvbigi5Zu65a6a5Lit5b+DIEZPViIpCiAgICBUYWIzOkNyZWF0ZVRvZ2dsZSh7IAogICAgICAgIE5hbWUgPSAi5pi+56S65Zu65a6aRk9WIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgZml4ZWRGb3ZDaXJjbGUuVmlzaWJsZSA9IHYgZW5kIAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVTbGlkZXIoewogICAgICAgIE5hbWUgPSAi5Y2K5b6E77yI5ruR5p2h77yJIiwKICAgICAgICBSYW5nZSA9IHswLCA1MDB9LAogICAgICAgIEluY3JlbWVudCA9IDUsCiAgICAgICAgU3VmZml4ID0gInB4IiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmaXhlZEZPViwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIAogICAgICAgICAgICBmaXhlZEZPViA9IHYKICAgICAgICAgICAgZml4ZWRGb3ZDaXJjbGUuUmFkaXVzID0gdiAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlSW5wdXQoewogICAgICAgIE5hbWUgPSAi5Y2K5b6E77yI6L6T5YWl77yJIiwKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhmaXhlZEZPViksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBsb2NhbCBuID0gdG9udW1iZXIodHh0KSAKICAgICAgICAgICAgaWYgbiB0aGVuIAogICAgICAgICAgICAgICAgZml4ZWRGT1YgPSBuCiAgICAgICAgICAgICAgICBmaXhlZEZvdkNpcmNsZS5SYWRpdXMgPSBuCiAgICAgICAgICAgIGVuZCAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlU2VjdGlvbigi6YCa55So5Y+C5pWwIikKICAgIFRhYjM6Q3JlYXRlU2xpZGVyKHsKICAgICAgICBOYW1lID0gIuW5s+a7keezu+aVsO+8iOa7keadoe+8iSIsCiAgICAgICAgUmFuZ2UgPSB7MCwgMX0sCiAgICAgICAgSW5jcmVtZW50ID0gMC4wMSwKICAgICAgICBTdWZmaXggPSAiIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBhaW1ib3RTbW9vdGgsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBhaW1ib3RTbW9vdGggPSB2IGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLlubPmu5Hns7vmlbDvvIjovpPlhaXvvIkiLAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKGFpbWJvdFNtb290aCksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBsb2NhbCBuID0gdG9udW1iZXIodHh0KSAKICAgICAgICAgICAgaWYgbiB0aGVuIAogICAgICAgICAgICAgICAgYWltYm90U21vb3RoID0gbgogICAgICAgICAgICBlbmQgCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVNsaWRlcih7CiAgICAgICAgTmFtZSA9ICLpooTmtYsgKOenkinvvIjmu5HmnaHvvIkiLAogICAgICAgIFJhbmdlID0gezAsIDF9LAogICAgICAgIEluY3JlbWVudCA9IDAuMDEsCiAgICAgICAgU3VmZml4ID0gInMiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGFpbWJvdFByZWRpY3Rpb24sCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBhaW1ib3RQcmVkaWN0aW9uID0gdiBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlSW5wdXQoewogICAgICAgIE5hbWUgPSAi6aKE5rWLICjnp5Ip77yI6L6T5YWl77yJIiwKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhhaW1ib3RQcmVkaWN0aW9uKSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIGxvY2FsIG4gPSB0b251bWJlcih0eHQpIAogICAgICAgICAgICBpZiBuIHRoZW4gCiAgICAgICAgICAgICAgICBhaW1ib3RQcmVkaWN0aW9uID0gbgogICAgICAgICAgICBlbmQgCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVNsaWRlcih7CiAgICAgICAgTmFtZSA9ICLlvIDngavlu7bov58gKOenkinvvIjmu5HmnaHvvIkiLAogICAgICAgIFJhbmdlID0gezAsIDF9LAogICAgICAgIEluY3JlbWVudCA9IDAuMDEsCiAgICAgICAgU3VmZml4ID0gInMiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGFpbWJvdERlbGF5LAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgYWltYm90RGVsYXkgPSB2IGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLlvIDngavlu7bov58gKOenkinvvIjovpPlhaXvvIkiLAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKGFpbWJvdERlbGF5KSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIGxvY2FsIG4gPSB0b251bWJlcih0eHQpIAogICAgICAgICAgICBpZiBuIHRoZW4gCiAgICAgICAgICAgICAgICBhaW1ib3REZWxheSA9IG4KICAgICAgICAgICAgZW5kIAogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVEcm9wZG93bih7CiAgICAgICAgTmFtZSA9ICLnnoTlh4bpqqjpqrwiLAogICAgICAgIE9wdGlvbnMgPSB7IkhlYWQiLCJOZWNrIiwiVXBwZXJUb3JzbyIsIkh1bWFub2lkUm9vdFBhcnQifSwKICAgICAgICBDdXJyZW50T3B0aW9uID0gYWltYm90Qm9uZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbWJvdEJvbmUgPSB2IGVuZAogICAgfSkKICAgIAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIOWIoOmZpOmYtOW9se+8iOWFqOWxgOW8gOWFs++8iQogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIFRhYjI6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuWIoOmZpOmYtOW9sSIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBnYW1lLkxpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSBub3QgdgogICAgICAgICAgICBmb3IgXywgbCBpbiBpcGFpcnMod29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBsOklzQSgiQmFzZVBhcnQiKSBvciBsOklzQSgiTWVzaFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbC5DYXN0U2hhZG93ID0gbm90IHYKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgIFRpdGxlID0gIuaPkOekuiIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gdiBhbmQgIumYtOW9seW3suWIoOmZpCIgb3IgIumYtOW9seW3suaBouWkjSIsCiAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDIsCiAgICAgICAgICAgICAgICBJbWFnZSA9IDQ0ODMzNjI0NTgKICAgICAgICAgICAgfSkKICAgICAgICBlbmQKICAgIH0pCgogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIOS8mOWMluWQjueahOmjnuihjOWKn+iDvQogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGxvY2FsIGZseWluZyA9IGZhbHNlCiAgICBsb2NhbCBmbHlTcGVlZCA9IDUwCiAgICBsb2NhbCBiZywgYnYKICAgIGxvY2FsIGN0cmwgPSB7ZiA9IDAsIGIgPSAwLCBsID0gMCwgciA9IDAsIHUgPSAwLCBkID0gMH0KICAgIGxvY2FsIGZseUNvbm5lY3Rpb24KICAgIAogICAgbG9jYWwgZnVuY3Rpb24gZmx5TG9vcCgpCiAgICAgICAgd2hpbGUgZmx5aW5nIGFuZCBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5IZWFydGJlYXQ6V2FpdCgpIGRvCiAgICAgICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAgICAgaWYgbm90IGNoYXJhY3RlciB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgdG9yc28gPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciAKICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIlRvcnNvIikgb3IgCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJVcHBlclRvcnNvIikKICAgICAgICAgICAgaWYgbm90IHRvcnNvIHRoZW4gYnJlYWsgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBtb3ZlRGlyZWN0aW9uID0gVmVjdG9yMy5uZXcoY3RybC5yIC0gY3RybC5sLCBjdHJsLnUgLSBjdHJsLmQsIGN0cmwuYiAtIGN0cmwuZikKICAgICAgICAgICAgaWYgbW92ZURpcmVjdGlvbi5NYWduaXR1ZGUgPiAwIHRoZW4KICAgICAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPSBtb3ZlRGlyZWN0aW9uLlVuaXQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBjYW1lcmEgPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYQogICAgICAgICAgICBsb2NhbCBjYW1lcmFDRnJhbWUgPSBjYW1lcmEuQ0ZyYW1lCiAgICAgICAgICAgIGxvY2FsIGNhbWVyYUxvb2tWZWN0b3IgPSBjYW1lcmFDRnJhbWUuTG9va1ZlY3RvcgogICAgICAgICAgICBsb2NhbCBjYW1lcmFSaWdodFZlY3RvciA9IGNhbWVyYUNGcmFtZS5SaWdodFZlY3RvcgogICAgICAgICAgICBsb2NhbCBjYW1lcmFVcFZlY3RvciA9IGNhbWVyYUNGcmFtZS5VcFZlY3RvcgogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgdmVsb2NpdHkgPSAoY2FtZXJhTG9va1ZlY3RvciAqIG1vdmVEaXJlY3Rpb24uWiAqIGZseVNwZWVkKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FtZXJhUmlnaHRWZWN0b3IgKiBtb3ZlRGlyZWN0aW9uLlggKiBmbHlTcGVlZCkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNhbWVyYVVwVmVjdG9yICogbW92ZURpcmVjdGlvbi5ZICogZmx5U3BlZWQpCiAgICAgICAgICAgIAogICAgICAgICAgICBidi5WZWxvY2l0eSA9IHZlbG9jaXR5CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBtb3ZlRGlyZWN0aW9uLk1hZ25pdHVkZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgYmcuQ0ZyYW1lID0gY2FtZXJhQ0ZyYW1lICogQ0ZyYW1lLkFuZ2xlcygKICAgICAgICAgICAgICAgICAgICAtbWF0aC5yYWQobW92ZURpcmVjdGlvbi5aICogMTUpLAogICAgICAgICAgICAgICAgICAgIG1hdGgucmFkKG1vdmVEaXJlY3Rpb24uWCAqIDE1KSwKICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHN0YXJ0Rmx5aW5nKCkKICAgICAgICBpZiBmbHlpbmcgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIG5vdCBjaGFyYWN0ZXIgdGhlbiAKICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgIFRpdGxlID0gIumjnuihjOmUmeivryIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIuaJvuS4jeWIsOinkuiJsiIsCiAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDMsCiAgICAgICAgICAgICAgICBJbWFnZSA9IDQ0ODMzNjI0NTgKICAgICAgICAgICAgfSkKICAgICAgICAgICAgcmV0dXJuIAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGh1bWFub2lkID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgICAgIGlmIG5vdCBodW1hbm9pZCB0aGVuIAogICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgVGl0bGUgPSAi6aOe6KGM6ZSZ6K+vIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAi5om+5LiN5YiwSHVtYW5vaWQiLAogICAgICAgICAgICAgICAgRHVyYXRpb24gPSAzLAogICAgICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHJldHVybiAKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBmbHlpbmcgPSB0cnVlCiAgICAgICAgCiAgICAgICAgbG9jYWwgdG9yc28gPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciAKICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVG9yc28iKSBvciAKICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVXBwZXJUb3JzbyIpCiAgICAgICAgaWYgbm90IHRvcnNvIHRoZW4gCiAgICAgICAgICAgIGZseWluZyA9IGZhbHNlCiAgICAgICAgICAgIFJheWZpZWxkOk5vdGlmeSh7CiAgICAgICAgICAgICAgICBUaXRsZSA9ICLpo57ooYzplJnor68iLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICLmib7kuI3liLDouqvkvZPpg6jkvY0iLAogICAgICAgICAgICAgICAgRHVyYXRpb24gPSAzLAogICAgICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHJldHVybiAKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBiZyA9IEluc3RhbmNlLm5ldygiQm9keUd5cm8iLCB0b3JzbykKICAgICAgICBiZy5QID0gOWU0CiAgICAgICAgYmcubWF4VG9ycXVlID0gVmVjdG9yMy5uZXcoOWU5LCA5ZTksIDllOSkKICAgICAgICBiZy5jZnJhbWUgPSB0b3Jzby5DRnJhbWUKICAgICAgICAKICAgICAgICBidiA9IEluc3RhbmNlLm5ldygiQm9keVZlbG9jaXR5IiwgdG9yc28pCiAgICAgICAgYnYuVmVsb2NpdHkgPSBWZWN0b3IzLm5ldygwLCAwLjEsIDApCiAgICAgICAgYnYuTWF4Rm9yY2UgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KQogICAgICAgIAogICAgICAgIGh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSB0cnVlCiAgICAgICAgCiAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgVGl0bGUgPSAi6aOe6KGM5qih5byPIiwKICAgICAgICAgICAgQ29udGVudCA9ICLpo57ooYzlt7LlkK/nlKggKOmAn+W6pjogIiAuLiBmbHlTcGVlZCAuLiAiKSIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgfSkKICAgICAgICAKICAgICAgICBmbHlDb25uZWN0aW9uID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuSGVhcnRiZWF0OkNvbm5lY3QoZmx5TG9vcCkKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBzdG9wRmx5aW5nKCkKICAgICAgICBpZiBub3QgZmx5aW5nIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIGZseWluZyA9IGZhbHNlCiAgICAgICAgCiAgICAgICAgaWYgYmcgdGhlbiBiZzpEZXN0cm95KCkgZW5kCiAgICAgICAgaWYgYnYgdGhlbiBidjpEZXN0cm95KCkgZW5kCiAgICAgICAgaWYgZmx5Q29ubmVjdGlvbiB0aGVuIGZseUNvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBjaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgaWYgaHVtYW5vaWQgdGhlbgogICAgICAgICAgICAgICAgaHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgYW5pbWF0ZSA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiQW5pbWF0ZSIpCiAgICAgICAgICAgIGlmIGFuaW1hdGUgdGhlbgogICAgICAgICAgICAgICAgYW5pbWF0ZS5EaXNhYmxlZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGN0cmwgPSB7ZiA9IDAsIGIgPSAwLCBsID0gMCwgciA9IDAsIHUgPSAwLCBkID0gMH0KICAgICAgICAKICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLpo57ooYzmqKHlvI8iLAogICAgICAgICAgICBDb250ZW50ID0gIumjnuihjOW3suemgeeUqCIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgfSkKICAgIGVuZAogICAgCiAgICBsb2NhbCBpbnB1dEJlZ2FuQ29ubiwgaW5wdXRFbmRlZENvbm4KICAgIAogICAgbG9jYWwgZnVuY3Rpb24gc2V0dXBJbnB1dCgpCiAgICAgICAgaWYgaW5wdXRCZWdhbkNvbm4gdGhlbiBpbnB1dEJlZ2FuQ29ubjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgaWYgaW5wdXRFbmRlZENvbm4gdGhlbiBpbnB1dEVuZGVkQ29ubjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgCiAgICAgICAgaW5wdXRCZWdhbkNvbm4gPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgICAgIGlmIG5vdCBmbHlpbmcgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5XIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuZiA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLlMgdGhlbgogICAgICAgICAgICAgICAgY3RybC5iID0gMQogICAgICAgICAgICBlbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuQSB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmwgPSAxCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5EIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuciA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLlNwYWNlIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwudSA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkxlZnRDb250cm9sIG9yIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkJ1dHRvbkwzIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuZCA9IDEKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgICAgIAogICAgICAgIGlucHV0RW5kZWRDb25uID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikuSW5wdXRFbmRlZDpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQogICAgICAgICAgICBpZiBub3QgZmx5aW5nIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuVyB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmYgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5TIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuYiA9IDAKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkEgdGhlbgogICAgICAgICAgICAgICAgY3RybC5sID0gMAogICAgICAgICAgICBlbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuRCB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLnIgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5TcGFjZSB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLnUgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5MZWZ0Q29udHJvbCBvciBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5CdXR0b25MMyB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmQgPSAwCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgc3RvcEZseWluZygpCiAgICBlbmQpCiAgICAKICAgIFRhYjI6Q3JlYXRlU2VjdGlvbigi6aOe6KGM5Yqf6IO9IikKICAgIAogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5ZCv55So6aOe6KGMIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGlmIHYgdGhlbgogICAgICAgICAgICAgICAgc3RhcnRGbHlpbmcoKQogICAgICAgICAgICAgICAgc2V0dXBJbnB1dCgpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHN0b3BGbHlpbmcoKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjI6Q3JlYXRlU2xpZGVyKHsKICAgICAgICBOYW1lID0gIumjnuihjOmAn+W6piIsCiAgICAgICAgUmFuZ2UgPSB7MTAsIDIwMH0sCiAgICAgICAgSW5jcmVtZW50ID0gNSwKICAgICAgICBTdWZmaXggPSAi5Y2V5L2NIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmbHlTcGVlZCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKQogICAgICAgICAgICBmbHlTcGVlZCA9IHZhbHVlCiAgICAgICAgICAgIGlmIGZseWluZyB0aGVuCiAgICAgICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIumjnuihjOaooeW8jyIsCiAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9ICLpo57ooYzpgJ/luqbmm7TmlrDkuLo6ICIgLi4gZmx5U3BlZWQsCiAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSAyLAogICAgICAgICAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIyOkNyZWF0ZUxhYmVsKCLmjqfliLbmlrnlvI86IikKICAgIFRhYjI6Q3JlYXRlTGFiZWwoIlcvQS9TL0QgLSDliY3lkI7lt6blj7Pnp7vliqgiKQogICAgVGFiMjpDcmVhdGVMYWJlbCgi56m65qC86ZSuIC0g5ZCR5LiK6aOe6KGMIikKICAgIFRhYjI6Q3JlYXRlTGFiZWwoIkN0cmzplK4gLSDlkJHkuIvpo57ooYwiKQogICAgCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0g5aKe5by654mI546p5a62IEVTUO+8iOWQq+mYn+S8jeajgOa1i+OAgei3neemu+OAgeihgOadoeWSjOe6v+adoee7mOWItu+8iQogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGxvY2FsIGVzcEVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgZXNwQ2FjaGUgPSB7fQogICAgbG9jYWwgdHJhY2VyUG9zaXRpb24gPSAiQm90dG9tIgogICAgbG9jYWwgZXNwU2hvd0VuZW15T25seSA9IGZhbHNlCgogICAgbG9jYWwgZnVuY3Rpb24gZ2V0VGVhbUNvbG9yKHBscikKICAgICAgICBpZiBwbHIuVGVhbSBhbmQgTG9jYWxQbGF5ZXIuVGVhbSBhbmQgcGxyLlRlYW0gPT0gTG9jYWxQbGF5ZXIuVGVhbSB0aGVuCiAgICAgICAgICAgIHJldHVybiBDb2xvcjMuZnJvbVJHQigwLCAyNTUsIDApCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gaXNUZWFtbWF0ZShwbHIpCiAgICAgICAgaWYgcGxyLlRlYW0gYW5kIExvY2FsUGxheWVyLlRlYW0gYW5kIHBsci5UZWFtID09IExvY2FsUGxheWVyLlRlYW0gdGhlbgogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gY3JlYXRlRVNQT2JqZWN0KHBscikKICAgICAgICBsb2NhbCBlc3AgPSB7CiAgICAgICAgICAgIEJveCA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIE5hbWUgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBEaXN0YW5jZSA9IERyYXdpbmcubmV3KCJUZXh0IiksCiAgICAgICAgICAgIEhlYWx0aEJhciA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIEhlYWx0aFRleHQgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBUcmFjZXIgPSBEcmF3aW5nLm5ldygiTGluZSIpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGVzcC5Cb3guVGhpY2tuZXNzID0gMS41CiAgICAgICAgZXNwLkJveC5GaWxsZWQgPSBmYWxzZQogICAgICAgIGVzcC5Cb3guWkluZGV4ID0gNQogICAgICAgIAogICAgICAgIGVzcC5OYW1lLlNpemUgPSAxOAogICAgICAgIGVzcC5OYW1lLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuTmFtZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5OYW1lLlpJbmRleCA9IDYKICAgICAgICAKICAgICAgICBlc3AuRGlzdGFuY2UuU2l6ZSA9IDE2CiAgICAgICAgZXNwLkRpc3RhbmNlLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuRGlzdGFuY2UuT3V0bGluZSA9IHRydWUKICAgICAgICBlc3AuRGlzdGFuY2UuWkluZGV4ID0gNgogICAgICAgIAogICAgICAgIGVzcC5IZWFsdGhCYXIuRmlsbGVkID0gdHJ1ZQogICAgICAgIGVzcC5IZWFsdGhCYXIuVGhpY2tuZXNzID0gMQogICAgICAgIGVzcC5IZWFsdGhCYXIuWkluZGV4ID0gNQogICAgICAgIAogICAgICAgIGVzcC5IZWFsdGhUZXh0LlNpemUgPSAxNAogICAgICAgIGVzcC5IZWFsdGhUZXh0LkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuSGVhbHRoVGV4dC5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5IZWFsdGhUZXh0LlpJbmRleCA9IDYKICAgICAgICAKICAgICAgICBlc3AuVHJhY2VyLlRoaWNrbmVzcyA9IDEuNQogICAgICAgIGVzcC5UcmFjZXIuWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcENhY2hlW3Bscl0gPSBlc3AKICAgICAgICByZXR1cm4gZXNwCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVFU1AoKQogICAgICAgIGlmIG5vdCBlc3BFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGZvciBfLCBwbHIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBwbHIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGVzcFNob3dFbmVteU9ubHkgYW5kIGlzVGVhbW1hdGUocGxyKSB0aGVuCiAgICAgICAgICAgICAgICBpZiBlc3BDYWNoZVtwbHJdIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcENhY2hlW3Bscl0pIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBjaGFyID0gcGxyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBub3QgY2hhciB0aGVuCiAgICAgICAgICAgICAgICBpZiBlc3BDYWNoZVtwbHJdIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcENhY2hlW3Bscl0pIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgY29udGludWUgCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgcm9vdCA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgICAgICBsb2NhbCBoZWFkID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgICAgIGxvY2FsIGh1bWFub2lkID0gY2hhcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCAocm9vdCBhbmQgaGVhZCBhbmQgaHVtYW5vaWQpIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCByb290UG9zLCByb290VmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KHJvb3QuUG9zaXRpb24pCiAgICAgICAgICAgIGxvY2FsIGhlYWRQb3MsIGhlYWRWaXMgPSBDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoaGVhZC5Qb3NpdGlvbiArIFZlY3RvcjMubmV3KDAsIDEuNSwgMCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgKHJvb3RWaXMgYW5kIGhlYWRWaXMpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGVzcENhY2hlW3Bscl0gdGhlbgogICAgICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwQ2FjaGVbcGxyXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGVzcCA9IGVzcENhY2hlW3Bscl0gb3IgY3JlYXRlRVNQT2JqZWN0KHBscikKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGhlaWdodCA9IG1hdGguYWJzKGhlYWRQb3MuWSAtIHJvb3RQb3MuWSkgKiAxLjUKICAgICAgICAgICAgbG9jYWwgd2lkdGggPSBoZWlnaHQgKiAwLjYKICAgICAgICAgICAgbG9jYWwgbGVmdCA9IGhlYWRQb3MuWCAtIHdpZHRoIC8gMgogICAgICAgICAgICBsb2NhbCByaWdodCA9IGhlYWRQb3MuWCArIHdpZHRoIC8gMgogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgY29sb3IgPSBnZXRUZWFtQ29sb3IocGxyKQogICAgICAgICAgICAKICAgICAgICAgICAgZXNwLkJveC5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICBlc3AuQm94LkNvbG9yID0gY29sb3IKICAgICAgICAgICAgZXNwLkJveC5Qb2ludEEgPSBWZWN0b3IyLm5ldyhsZWZ0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgIGVzcC5Cb3guUG9pbnRCID0gVmVjdG9yMi5uZXcocmlnaHQsIGhlYWRQb3MuWSkKICAgICAgICAgICAgZXNwLkJveC5Qb2ludEMgPSBWZWN0b3IyLm5ldyhyaWdodCwgaGVhZFBvcy5ZICsgaGVpZ2h0KQogICAgICAgICAgICBlc3AuQm94LlBvaW50RCA9IFZlY3RvcjIubmV3KGxlZnQsIGhlYWRQb3MuWSArIGhlaWdodCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGVzcC5OYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVzcC5OYW1lLkNvbG9yID0gY29sb3IKICAgICAgICAgICAgZXNwLk5hbWUuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhoZWFkUG9zLlgsIGhlYWRQb3MuWSAtIDIwKQogICAgICAgICAgICBlc3AuTmFtZS5UZXh0ID0gcGxyLk5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gbWF0aC5mbG9vcigocm9vdC5Qb3NpdGlvbiAtIENhbWVyYS5DRnJhbWUuUG9zaXRpb24pLk1hZ25pdHVkZSkKICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVzcC5EaXN0YW5jZS5Db2xvciA9IGNvbG9yCiAgICAgICAgICAgIGVzcC5EaXN0YW5jZS5Qb3NpdGlvbiA9IFZlY3RvcjIubmV3KGhlYWRQb3MuWCwgaGVhZFBvcy5ZICsgaGVpZ2h0ICsgNSkKICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlRleHQgPSB0b3N0cmluZyhkaXN0YW5jZSkgLi4gIm0iCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBoZWFsdGhQZXJjZW50ID0gbWF0aC5jbGFtcChodW1hbm9pZC5IZWFsdGggLyBodW1hbm9pZC5NYXhIZWFsdGgsIDAsIDEpCiAgICAgICAgICAgIGxvY2FsIGJhcldpZHRoID0gd2lkdGgKICAgICAgICAgICAgbG9jYWwgYmFySGVpZ2h0ID0gNQogICAgICAgICAgICBsb2NhbCBiYXJYID0gbGVmdAogICAgICAgICAgICBsb2NhbCBiYXJZID0gaGVhZFBvcy5ZICsgaGVpZ2h0ICsgMjAKICAgICAgICAgICAgCiAgICAgICAgICAgIGVzcC5IZWFsdGhCYXIuVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgZXNwLkhlYWx0aEJhci5Db2xvciA9IENvbG9yMy5uZXcoMSAtIGhlYWx0aFBlcmNlbnQsIGhlYWx0aFBlcmNlbnQsIDApCiAgICAgICAgICAgIGVzcC5IZWFsdGhCYXIuUG9pbnRBID0gVmVjdG9yMi5uZXcoYmFyWCwgYmFyWSkKICAgICAgICAgICAgZXNwLkhlYWx0aEJhci5Qb2ludEIgPSBWZWN0b3IyLm5ldyhiYXJYICsgYmFyV2lkdGggKiBoZWFsdGhQZXJjZW50LCBiYXJZKQogICAgICAgICAgICBlc3AuSGVhbHRoQmFyLlBvaW50QyA9IFZlY3RvcjIubmV3KGJhclggKyBiYXJXaWR0aCAqIGhlYWx0aFBlcmNlbnQsIGJhclkgKyBiYXJIZWlnaHQpCiAgICAgICAgICAgIGVzcC5IZWFsdGhCYXIuUG9pbnREID0gVmVjdG9yMi5uZXcoYmFyWCwgYmFyWSArIGJhckhlaWdodCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGVzcC5IZWFsdGhUZXh0LlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVzcC5IZWFsdGhUZXh0LkNvbG9yID0gQ29sb3IzLm5ldygxLCAxLCAxKQogICAgICAgICAgICBlc3AuSGVhbHRoVGV4dC5Qb3NpdGlvbiA9IFZlY3RvcjIubmV3KGJhclggKyBiYXJXaWR0aCAvIDIsIGJhclkgLSAxMCkKICAgICAgICAgICAgZXNwLkhlYWx0aFRleHQuVGV4dCA9IG1hdGguZmxvb3IoaHVtYW5vaWQuSGVhbHRoKSAuLiAiLyIgLi4gbWF0aC5mbG9vcihodW1hbm9pZC5NYXhIZWFsdGgpCiAgICAgICAgICAgIAogICAgICAgICAgICBlc3AuVHJhY2VyLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVzcC5UcmFjZXIuQ29sb3IgPSBjb2xvcgogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgc3RhcnRQb2ludAogICAgICAgICAgICBpZiB0cmFjZXJQb3NpdGlvbiA9PSAiVG9wIiB0aGVuCiAgICAgICAgICAgICAgICBzdGFydFBvaW50ID0gVmVjdG9yMi5uZXcoQ2FtZXJhLlZpZXdwb3J0U2l6ZS5YLzIsIDApCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgQ2FtZXJhLlZpZXdwb3J0U2l6ZS5ZKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGVuZFBvaW50ID0gVmVjdG9yMi5uZXcoaGVhZFBvcy5YLCBoZWFkUG9zLlkgKyBoZWlnaHQvMikKICAgICAgICAgICAgCiAgICAgICAgICAgIGVzcC5UcmFjZXIuRnJvbSA9IHN0YXJ0UG9pbnQKICAgICAgICAgICAgZXNwLlRyYWNlci5UbyA9IGVuZFBvaW50CiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZm9yIHBsciwgZXNwIGluIHBhaXJzKGVzcENhY2hlKSBkbwogICAgICAgICAgICBpZiBub3QgcGxyIG9yIG5vdCBwbHIuUGFyZW50IG9yIHBsciA9PSBMb2NhbFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcCkgZG8KICAgICAgICAgICAgICAgICAgICBvYmouVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgb2JqOlJlbW92ZSgpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVzcENhY2hlW3Bscl0gPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBlc3BMb29wCiAgICAKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAtLSBOUEMg6YCP6KeG77yI5aKe5by654mI77yJCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgbG9jYWwgbnBjRXNwRW5hYmxlZCA9IGZhbHNlCiAgICBsb2NhbCBucGNFc3BDYWNoZSA9IHt9CiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGNyZWF0ZU5wY0VTUE9iamVjdChtb2RlbCkKICAgICAgICBsb2NhbCBlc3AgPSB7CiAgICAgICAgICAgIEJveCA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIE5hbWUgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBEaXN0YW5jZSA9IERyYXdpbmcubmV3KCJUZXh0IikKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZXNwLkJveC5UaGlja25lc3MgPSAxLjUKICAgICAgICBlc3AuQm94LkZpbGxlZCA9IGZhbHNlCiAgICAgICAgZXNwLkJveC5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTY1LCAwKQogICAgICAgIGVzcC5Cb3guWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcC5OYW1lLlNpemUgPSAxNgogICAgICAgIGVzcC5OYW1lLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuTmFtZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5OYW1lLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxNjUsIDApCiAgICAgICAgZXNwLk5hbWUuWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcC5EaXN0YW5jZS5TaXplID0gMTQKICAgICAgICBlc3AuRGlzdGFuY2UuQ2VudGVyID0gdHJ1ZQogICAgICAgIGVzcC5EaXN0YW5jZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5EaXN0YW5jZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTY1LCAwKQogICAgICAgIGVzcC5EaXN0YW5jZS5aSW5kZXggPSA0CiAgICAgICAgCiAgICAgICAgbnBjRXNwQ2FjaGVbbW9kZWxdID0gZXNwCiAgICAgICAgcmV0dXJuIGVzcAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHVwZGF0ZU5wY0VTUCgpCiAgICAgICAgaWYgbm90IG5wY0VzcEVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgZm9yIF8sIG1vZGVsIGluIGlwYWlycyh3b3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgaWYgbW9kZWw6SXNBKCJNb2RlbCIpIGFuZCBtb2RlbDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIG5vdCBQbGF5ZXJzOkdldFBsYXllckZyb21DaGFyYWN0ZXIobW9kZWwpIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHJvb3QgPSBtb2RlbDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIG9yIG1vZGVsOkZpbmRGaXJzdENoaWxkKCJUb3JzbyIpCiAgICAgICAgICAgICAgICBsb2NhbCBoZWFkID0gbW9kZWw6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgKHJvb3QgYW5kIGhlYWQpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBucGNFc3BDYWNoZVttb2RlbF0gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKG5wY0VzcENhY2hlW21vZGVsXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCByb290UG9zLCByb290VmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KHJvb3QuUG9zaXRpb24pCiAgICAgICAgICAgICAgICBsb2NhbCBoZWFkUG9zLCBoZWFkVmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KGhlYWQuUG9zaXRpb24gKyBWZWN0b3IzLm5ldygwLCAxLjUsIDApKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgKHJvb3RWaXMgYW5kIGhlYWRWaXMpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBucGNFc3BDYWNoZVttb2RlbF0gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKG5wY0VzcENhY2hlW21vZGVsXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBlc3AgPSBucGNFc3BDYWNoZVttb2RlbF0gb3IgY3JlYXRlTnBjRVNQT2JqZWN0KG1vZGVsKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBoZWlnaHQgPSBtYXRoLmFicyhoZWFkUG9zLlkgLSByb290UG9zLlkpICogMS41CiAgICAgICAgICAgICAgICBsb2NhbCB3aWR0aCA9IGhlaWdodCAqIDAuNgogICAgICAgICAgICAgICAgbG9jYWwgbGVmdCA9IGhlYWRQb3MuWCAtIHdpZHRoIC8gMgogICAgICAgICAgICAgICAgbG9jYWwgcmlnaHQgPSBoZWFkUG9zLlggKyB3aWR0aCAvIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXNwLkJveC5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICAgICAgZXNwLkJveC5Qb2ludEEgPSBWZWN0b3IyLm5ldyhsZWZ0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50QiA9IFZlY3RvcjIubmV3KHJpZ2h0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50QyA9IFZlY3RvcjIubmV3KHJpZ2h0LCBoZWFkUG9zLlkgKyBoZWlnaHQpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50RCA9IFZlY3RvcjIubmV3KGxlZnQsIGhlYWRQb3MuWSArIGhlaWdodCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXNwLk5hbWUuVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgICAgIGVzcC5OYW1lLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoaGVhZFBvcy5YLCBoZWFkUG9zLlkgLSAxNSkKICAgICAgICAgICAgICAgIGVzcC5OYW1lLlRleHQgPSBtb2RlbC5OYW1lCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gbWF0aC5mbG9vcigocm9vdC5Qb3NpdGlvbiAtIENhbWVyYS5DRnJhbWUuUG9zaXRpb24pLk1hZ25pdHVkZSkKICAgICAgICAgICAgICAgIGVzcC5EaXN0YW5jZS5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoaGVhZFBvcy5YLCBoZWFkUG9zLlkgKyBoZWlnaHQgKyA1KQogICAgICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlRleHQgPSB0b3N0cmluZyhkaXN0YW5jZSkgLi4gIm0iCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGZvciBtb2RlbCwgZXNwIGluIHBhaXJzKG5wY0VzcENhY2hlKSBkbwogICAgICAgICAgICBpZiBub3QgbW9kZWwgb3Igbm90IG1vZGVsLlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcCkgZG8KICAgICAgICAgICAgICAgICAgICBvYmouVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgb2JqOlJlbW92ZSgpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIG5wY0VzcENhY2hlW21vZGVsXSA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBucGNFc3BMb29wCiAgICAKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAtLSDpgI/op4blip/og73ni6znq4vmoIfnrb7pobUKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBsb2NhbCBUYWI0ID0gV2luZG93OkNyZWF0ZVRhYigi6YCP6KeG5Yqf6IO9IiwgNzczMzk2MTc0OSkgLS0g5L2/55So5LiN5ZCM55qE5Zu+5qCHCiAgICAKICAgIFRhYjQ6Q3JlYXRlU2VjdGlvbigi546p5a626YCP6KeGIikKICAgIFRhYjQ6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuWinuW8uueOqeWutiBFU1AiLCAKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwgCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBlc3BFbmFibGVkID0gdgogICAgICAgICAgICBpZiB2IHRoZW4KICAgICAgICAgICAgICAgIGlmIG5vdCBlc3BMb29wIHRoZW4KICAgICAgICAgICAgICAgICAgICBlc3BMb29wID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KHVwZGF0ZUVTUCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiBlc3BMb29wIHRoZW4KICAgICAgICAgICAgICAgICAgICBlc3BMb29wOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgIGVzcExvb3AgPSBuaWwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZm9yIHBsciwgZXNwIGluIHBhaXJzKGVzcENhY2hlKSBkbwogICAgICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpIG9iajpSZW1vdmUoKSBlbmQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHRhYmxlLmNsZWFyKGVzcENhY2hlKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCgogICAgVGFiNDpDcmVhdGVEcm9wZG93bih7CiAgICAgICAgTmFtZSA9ICLnur/mnaHkvY3nva4iLAogICAgICAgIE9wdGlvbnMgPSB7IlRvcCIsICJCb3R0b20ifSwKICAgICAgICBDdXJyZW50T3B0aW9uID0gdHJhY2VyUG9zaXRpb24sCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSkKICAgICAgICAgICAgdHJhY2VyUG9zaXRpb24gPSB2YWx1ZQogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLlj6rmmL7npLrmlYzkuroiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGVzcFNob3dFbmVteU9ubHksCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBlc3BTaG93RW5lbXlPbmx5ID0gdgogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiNDpDcmVhdGVTZWN0aW9uKCJOUEPpgI/op4YiKQogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5aKe5by6TlBD6YCP6KeGIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgbnBjRXNwRW5hYmxlZCA9IHYKICAgICAgICAgICAgaWYgdiB0aGVuCiAgICAgICAgICAgICAgICBpZiBub3QgbnBjRXNwTG9vcCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbnBjRXNwTG9vcCA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdCh1cGRhdGVOcGNFU1ApCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYgbnBjRXNwTG9vcCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbnBjRXNwTG9vcDpEaXNjb25uZWN0KCkKICAgICAgICAgICAgICAgICAgICBucGNFc3BMb29wID0gbmlsCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGZvciBtb2RlbCwgZXNwIGluIHBhaXJzKG5wY0VzcENhY2hlKSBkbwogICAgICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpIG9iajpSZW1vdmUoKSBlbmQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHRhYmxlLmNsZWFyKG5wY0VzcENhY2hlKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAtLSDkuInplIHlrprvvJrnp7vpgJ8gLyDot7Pot4MgLyDph43lipsKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBsb2NhbCBsb2NrU3BlZWQsIGxvY2tKdW1wLCBsb2NrR3JhdiA9IGZhbHNlLCBmYWxzZSwgZmFsc2UKICAgIGxvY2FsIHNhdmVkU3BlZWQsIHNhdmVkSnVtcCwgc2F2ZWRHcmF2ID0gMTYsIDUwLCAxOTYKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gYXBwbHlWYWx1ZXMoKQogICAgICAgIGxvY2FsIGNoYXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBub3QgY2hhciB0aGVuIHJldHVybiBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCBodW0gPSBjaGFyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgICAgIGlmIG5vdCBodW0gdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgaWYgbG9ja1NwZWVkIHRoZW4gaHVtLldhbGtTcGVlZCA9IHNhdmVkU3BlZWQgZW5kCiAgICAgICAgaWYgbG9ja0p1bXAgdGhlbiBodW0uSnVtcFBvd2VyID0gc2F2ZWRKdW1wIGVuZAogICAgICAgIGlmIGxvY2tHcmF2IHRoZW4gd29ya3NwYWNlLkdyYXZpdHkgPSBzYXZlZEdyYXYgZW5kCiAgICBlbmQKICAgIAogICAgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICBhcHBseVZhbHVlcygpCiAgICBlbmQpCiAgICAKICAgIFRhYjI6Q3JlYXRlU2VjdGlvbigi5LiJ6ZSB5a6aIikKICAgIFRhYjI6Q3JlYXRlSW5wdXQoewogICAgICAgIE5hbWUgPSAi6K6+5a6a56e76YCf77yI5LuF5L+d5a2Y5YC877yJIiwgCiAgICAgICAgUGxhY2Vob2xkZXJUZXh0ID0gdG9zdHJpbmcoc2F2ZWRTcGVlZCksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBzYXZlZFNwZWVkID0gdG9udW1iZXIodHh0KSBvciAxNiAKICAgICAgICAgICAgYXBwbHlWYWx1ZXMoKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMjpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLorr7lrprot7Pot4Ppq5jluqbvvIjku4Xkv53lrZjlgLzvvIkiLCAKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhzYXZlZEp1bXApLAogICAgICAgIFJlbW92ZVRleHRBZnRlckZvY3VzTG9zdCA9IGZhbHNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odHh0KSAKICAgICAgICAgICAgc2F2ZWRKdW1wID0gdG9udW1iZXIodHh0KSBvciA1MCAKICAgICAgICAgICAgYXBwbHlWYWx1ZXMoKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMjpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLorr7lrprph43lipvlgLzvvIjku4Xkv53lrZjlgLzvvIkiLCAKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhzYXZlZEdyYXYpLAogICAgICAgIFJlbW92ZVRleHRBZnRlckZvY3VzTG9zdCA9IGZhbHNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odHh0KSAKICAgICAgICAgICAgc2F2ZWRHcmF2ID0gdG9udW1iZXIodHh0KSBvciAxOTYgCiAgICAgICAgICAgIGFwcGx5VmFsdWVzKCkKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjI6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIumUgeWumuenu+mAnyIsIAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLCAKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIAogICAgICAgICAgICBsb2NrU3BlZWQgPSB2CiAgICAgICAgICAgIGFwcGx5VmFsdWVzKCkKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjI6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIumUgeWumui3s+i3gyIsIAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGZhbHNlLCAKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIAogICAgICAgICAgICBsb2NrSnVtcCA9IHYKICAgICAgICAgICAgYXBwbHlWYWx1ZXMoKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi6ZSB5a6a6YeN5YqbIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgCiAgICAgICAgICAgIGxvY2tHcmF2ID0gdgogICAgICAgICAgICBhcHBseVZhbHVlcygpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICAtLSBWUuiEmuacrCBUYWIKICAgIGxvY2FsIFRhYjUgPSBXaW5kb3c6Q3JlYXRlVGFiKCJWUiIsIDc3MzM3Nzk2MTApCiAgICBUYWI1OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJGRVZS6ISa5pysIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9yYW5kb21zdHJpbmcwL1F3ZXJ0eS9yZWZzL2hlYWRzL21haW4vcXdlcnR5NDUubHVhIikpKCkKICAgIGVuZH0pCgogICAgLS0g5o6n5Yi25Y+wIFRhYgogICAgbG9jYWwgVGFiNiA9IFdpbmRvdzpDcmVhdGVUYWIoIuaOp+WItuWPsCIsIDc3MzM3Nzk2MTApCiAgICBUYWI2OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLmjqfliLblj7DohJrmnKwiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3l4Z2gxNjUveXhnaDE2NS9tYWluLzY2NiIpKSgpCiAgICBlbmR9KQogICAgCiAgICAtLSBYQeiEmuacrCBUYWIKICAgIGxvY2FsIFRhYjcgPSBXaW5kb3c6Q3JlYXRlVGFiKCJYQeiEmuacrCIsIDc3MzM3Nzk2MTApCiAgICBUYWI3OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJYQSBIVUIiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0Y29kZS5jb20vWGluZ3RhaWR1YW4vU2NyaXB0cy9yYXcvbWFpbi9Mb2FkZXIubHVhIikpKCkKICAgIGVuZH0pCiAgICAKICAgIC0tIFJC6ISa5pys5Lit5b+DIFRhYgogICAgbG9jYWwgVGFiOCA9IFdpbmRvdzpDcmVhdGVUYWIoIlJC6ISa5pysIiwgNzczMzc3OTYxMCkKICAgIFRhYjg6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIlJi6ISa5pysIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ZdW5nZW5neGluL3JvYmxveC9yZWZzL2hlYWRzL21haW4vUmItSHViIikpKCkKICAgIGVuZH0pCiAgICAKICAgIC0tIOeUn+WtmOS4juadgOaJiyBUYWIKICAgIGxvY2FsIFRhYjkgPSBXaW5kb3c6Q3JlYXRlVGFiKCLnlJ/lrZjkuI7mnYDmiYsiLCA3NzMzNzc5NjEwKQogICAgVGFiOTpDcmVhdGVCdXR0b24oe05hbWUgPSAi55Sf5a2Y5LiO5p2A5omLIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NaWxhbjA4U3R1ZGlvL0NoYWlyV2FyZS9tYWluL21haW4ubHVhIikpKCkKICAgIGVuZH0pCiAgICAKICAgIC0tIOeIseW+t+WNjiBUYWIKICAgIGxvY2FsIFRhYjEwID0gV2luZG93OkNyZWF0ZVRhYigi54ix5b635Y2OIiwgNzczMzc3OTYxMCkKICAgIFRhYjEwOkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLniLHlvrfljY4iLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2d1bWFuYmEvU2NyaXB0cy9tYWluL0Vkd2FyZCIpKSgpCiAgICBlbmR9KQogICAgCiAgICAtLSDmtLvkuoY35aSpIFRhYgogICAgbG9jYWwgVGFiMTEgPSBXaW5kb3c6Q3JlYXRlVGFiKCLmtLvkuoY35aSpIiwgNzczMzc3OTYxMCkKICAgIFRhYjExOkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLmtLvkuoY35aSpIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3c2NyaXB0cy5uZXQvcmF3L1VuaXZlcnNhbC1TY3JpcHQtNy1kYXlzLXRvLWxpdmUtMzY4MjQiKSkoKQogICAgZW5kfSkKICAgIAogICAgLS0g5q276ZOB6L2oIFRhYgogICAgbG9jYWwgVGFiMTIgPSBXaW5kb3c6Q3JlYXRlVGFiKCLmrbvpk4HovagiLCA3NzMzOTc5NjEwKQogICAgVGFiMTI6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIuatu+mTgei9qCIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaW9wamtsYm5tc3NzL1NhbnNIdWJTY3JpcHQvcmVmcy9oZWFkcy9tYWluL1NhbnNIdWIiKSkoKQogICAgZW5kfSkKCiAgICAtLSDkuIDot6/lkJHopb/liLfpkrEgVGFiCiAgICBsb2NhbCBUYWIxMyA9IFdpbmRvdzpDcmVhdGVUYWIoIuS4gOi3r+WQkeilvyIsIDc3MzM5Nzk2MTApCiAgICBUYWIxMzpDcmVhdGVCdXR0b24oe05hbWUgPSAi5LiA6Lev5ZCR6KW/5Yi36ZKxIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS95eGdoMTY1L3l4Z2gxNjUvbWFpbi/kuIDot6/lkJHopb8iKSkoKQogICAgZW5kfSkKICAgICAgICAKICAgIC0tIOiHqueEtueBvuWusyBUYWIKICAgIGxvY2FsIFRhYjE0ID0gV2luZG93OkNyZWF0ZVRhYigi6Ieq54S254G+5a6zIiwgNzczMzk3OTYxMCkKICAgIFRhYjE0OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLoh6rnhLbngb7lrrPpu5HmtJ52NiIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhd3NjcmlwdHMubmV0L3Jhdy9Vbml2ZXJzYWwtU2NyaXB0LVN1cGVyLXJpbmctUGFydHMtVjYtMjg1ODEiKSkoKQogICAgZW5kfSkKCi0tIOS/hOS6peS/hOW3niBUYWIKICAgIGxvY2FsIFRhYjE1ID0gV2luZG93OkNyZWF0ZVRhYigi5L+E5Lql5L+E5beeIiwgNzczMzk3OTYxMCkKICAgIFRhYjE1OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJYQeS/hOS6peS/hOW3niIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWGluZ3RhaWR1YW4vU2NyaXB0L3JlZnMvaGVhZHMvbWFpbi9HYW1lcy/kv4TkuqXkv4Tlt54ubHVhIikpKCkKICAgIGVuZH0pCgotLSDloqjmsLTmuLjmiI8gVGFiCiAgICBsb2NhbCBUYWIxNiA9IFdpbmRvdzpDcmVhdGVUYWIoIuWiqOawtOa4uOaIjyIsIDc3MzM5Nzk2MTApCiAgICBUYWIxNjpDcmVhdGVCdXR0b24oe05hbWUgPSAiWEHloqjmsLTmuLjmiI8iLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1hpbmd0YWlkdWFuL1NjcmlwdC9yZWZzL2hlYWRzL21haW4vR2FtZXMv5aKo5rC05ri45oiPLmx1YSIpKSgpCiAgICBlbmR9KQoKLS0gOTnlpJwgVGFiCiAgICBsb2NhbCBUYWIxNyA9IFdpbmRvdzpDcmVhdGVUYWIoIjk55aScIiwgNzczMzk3OTYxMCkKICAgIFRhYjE3OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJYQTk55aScIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9YaW5ndGFpZHVhbi9TY3JpcHQvcmVmcy9oZWFkcy9tYWluL0dhbWVzL+ajruael+S4reeahDk55aScLmx1YSIpKSgpCiAgICBlbmR9KQoKLS0gZG9vcnMgVGFiCiAgICBsb2NhbCBUYWIxOCA9IFdpbmRvdzpDcmVhdGVUYWIoImRvb3JzIiwgNzczMzk3OTYxMCkKICAgIFRhYjE4OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJkb29yc+axieWMliIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJcMTA0XDExNlwxMTZcMTEyXDExNVw1OFw0N1w0N1wxMTJcOTdcMTE1XDExNlwxMDFcOThcMTA1XDExMFw0Nlw5OVwxMTFcMTA5XDQ3XDExNFw5N1wxMTlcNDdcNTRcNTNcODRcMTE5XDg0XDU2XDEwNlw5NyIpKSgpCiAgICBlbmR9KQoKLS0g54OC5qKX56S+5Yy6IFRhYgogICAgbG9jYWwgVGFiMTkgPSBXaW5kb3c6Q3JlYXRlVGFiKCLng4LmopfnpL7ljLoiLCA3NzMzOTc5NjEwKQogICAgVGFiMTk6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIueDguail+ekvuWMuuWIt+mSsSIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWE9UUlhPTlkvRWFzeVNjcmlwdC9tYWluL1N1YW8ubHVhdScpLHRydWUpKSgpCiAgICBlbmR9KQoKICAgIC0tIOiuvue9rlRhYgogICAgbG9jYWwgVGFiMjAgPSBXaW5kb3c6Q3JlYXRlVGFiKCLorr7nva4iLCA3NzMzNzc5NjEwKQogICAgVGFiMjA6Q3JlYXRlQnV0dG9uKHsKICAgICAgICBOYW1lID0gIuS4gOmUruWkjeWItkRpc2NvcmTpk77mjqUiLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBkaXNjb3JkTGluayA9ICJodHRwczovL2Rpc2NvcmQuZ2cveFZVZjdIOU0iCiAgICAgICAgICAgIGxvY2FsIHN1Y2Nlc3MgPSBDb3B5VG9DbGlwYm9hcmQoZGlzY29yZExpbmspCiAgICAgICAgICAgIFNob3dDb3B5Tm90aWZpY2F0aW9uKHN1Y2Nlc3MsIGRpc2NvcmRMaW5rKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgLS0g5b+N6ICF5rOo5YWl5Zmo5YW85a655oCn5qOA5p+lCiAgICBpZiBpZGVudGlmeWV4ZWN1dG9yIGFuZCBpZGVudGlmeWV4ZWN1dG9yKCk6bG93ZXIoKTpmaW5kKCJuaW5qYSIpIHRoZW4KICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLms6jlhaXlmajmo4DmtYsiLAogICAgICAgICAgICBDb250ZW50ID0gIuW/jeiAheazqOWFpeWZqOW3suivhuWIq++8jOaJgOacieWKn+iDveWFvOWuuSIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgfSkKICAgIGVuZAogICAgCiAgICAtLSDpqozor4HpgJrov4flkI7mkq3mlL7liqjnlLsKICAgIENyZWF0ZUt1bkt1bkFuaW1hdGlvbigpCmVuZAoKLS0g55u05o6l5Yib5bu65Li756qX5Y+j5YaF5a65CkNyZWF0ZU1haW5XaW5kb3dDb250ZW50KCkK5pu/5o2i5LiA5LiL5Zyo5q2k6K+05piO5oiR5LiN566h6ZW/5LiN6ZW/5Y+q6KaB5a6M5pW055qECi0tIEdlbmVyYXRlZCBieSBBSS4gCgpsb2NhbCBXaW5kVUkgPSByZXF1aXJlKCIuL3NyYy9pbml0IikKCldpbmRVSTpMb2NhbGl6YXRpb24oewogICAgRW5hYmxlZCA9IHRydWUsCiAgICBQcmVmaXggPSAibG9jOiIsCiAgICBEZWZhdWx0TGFuZ3VhZ2UgPSAiZW4iLAogICAgVHJhbnNsYXRpb25zID0gewogICAgICAgIFsicnUiXSA9IHsKICAgICAgICAgICAgWyJXSU5EVUlfRVhBTVBMRSJdID0gIldpbmRVSSDQn9GA0LjQvNC10YAiLAogICAgICAgICAgICBbIldFTENPTUUiXSA9ICLQlNC+0LHRgNC+INC/0L7QttCw0LvQvtCy0LDRgtGMINCyIFdpbmRVSSEiLAogICAgICAgICAgICBbIkxJQl9ERVNDIl0gPSAi0JHQuNCx0LvQuNC+0YLQtdC60LAg0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0LrRgNCw0YHQuNCy0YvRhSDQuNC90YLQtdGA0YTQtdC50YHQvtCyIiwKICAgICAgICAgICAgWyJTRVRUSU5HUyJdID0gItCd0LDRgdGC0YDQvtC50LrQuCIsCiAgICAgICAgICAgIFsiQVBQRUFSQU5DRSJdID0gItCS0L3QtdGI0L3QuNC5INCy0LjQtCIsCiAgICAgICAgICAgIFsiRkVBVFVSRVMiXSA9ICLQpNGD0L3QutGG0LjQvtC90LDQuyIsCiAgICAgICAgICAgIFsiVVRJTElUSUVTIl0gPSAi0JjQvdGB0YLRgNGD0LzQtdC90YLRiyIsCiAgICAgICAgICAgIFsiVUlfRUxFTUVOVFMiXSA9ICJVSSDQrdC70LXQvNC10L3RgtGLIiwKICAgICAgICAgICAgWyJDT05GSUdVUkFUSU9OIl0gPSAi0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPIiwKICAgICAgICAgICAgWyJTQVZFX0NPTkZJRyJdID0gItCh0L7RhdGA0LDQvdC40YLRjCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4iLAogICAgICAgICAgICBbIkxPQURfQ09ORklHIl0gPSAi0JfQsNCz0YDRg9C30LjRgtGMINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiIsCiAgICAgICAgICAgIFsiVEhFTUVfU0VMRUNUIl0gPSAi0JLRi9Cx0LXRgNC40YLQtSDRgtC10LzRgyIsCiAgICAgICAgICAgIFsiVFJBTlNQQVJFTkNZIl0gPSAi0J/RgNC+0LfRgNCw0YfQvdC+0YHRgtGMINC+0LrQvdCwIgogICAgICAgIH0sCiAgICAgICAgWyJlbiJdID0gewogICAgICAgICAgICBbIldJTkRVSV9FWEFNUExFIl0gPSAiV2luZFVJIEV4YW1wbGUiLAogICAgICAgICAgICBbIldFTENPTUUiXSA9ICJXZWxjb21lIHRvIFdpbmRVSSEiLAogICAgICAgICAgICBbIkxJQl9ERVNDIl0gPSAiQmVhdXRpZnVsIFVJIGxpYnJhcnkgZm9yIFJvYmxveCIsCiAgICAgICAgICAgIFsiU0VUVElOR1MiXSA9ICJTZXR0aW5ncyIsCiAgICAgICAgICAgIFsiQVBQRUFSQU5DRSJdID0gIkFwcGVhcmFuY2UiLAogICAgICAgICAgICBbIkZFQVRVUkVTIl0gPSAiRmVhdHVyZXMiLAogICAgICAgICAgICBbIlVUSUxJVElFUyJdID0gIlV0aWxpdGllcyIsCiAgICAgICAgICAgIFsiVUlfRUxFTUVOVFMiXSA9ICJVSSBFbGVtZW50cyIsCiAgICAgICAgICAgIFsiQ09ORklHVVJBVElPTiJdID0gIkNvbmZpZ3VyYXRpb24iLAogICAgICAgICAgICBbIlNBVkVfQ09ORklHIl0gPSAiU2F2ZSBDb25maWd1cmF0aW9uIiwKICAgICAgICAgICAgWyJMT0FEX0NPTkZJRyJdID0gIkxvYWQgQ29uZmlndXJhdGlvbiIsCiAgICAgICAgICAgIFsiVEhFTUVfU0VMRUNUIl0gPSAiU2VsZWN0IFRoZW1lIiwKICAgICAgICAgICAgWyJUUkFOU1BBUkVOQ1kiXSA9ICJXaW5kb3cgVHJhbnNwYXJlbmN5IgogICAgICAgIH0KICAgIH0KfSkKCldpbmRVSS5UcmFuc3BhcmVuY3lWYWx1ZSA9IDAuMgpXaW5kVUk6U2V0VGhlbWUoIkRhcmsiKQoKbG9jYWwgZnVuY3Rpb24gZ3JhZGllbnQodGV4dCwgc3RhcnRDb2xvciwgZW5kQ29sb3IpCiAgICBsb2NhbCByZXN1bHQgPSAiIgogICAgZm9yIGkgPSAxLCAjdGV4dCBkbwogICAgICAgIGxvY2FsIHQgPSAoaSAtIDEpIC8gKCN0ZXh0IC0gMSkKICAgICAgICBsb2NhbCByID0gbWF0aC5mbG9vcigoc3RhcnRDb2xvci5SICsgKGVuZENvbG9yLlIgLSBzdGFydENvbG9yLlIpICogdCkgKiAyNTUpCiAgICAgICAgbG9jYWwgZyA9IG1hdGguZmxvb3IoKHN0YXJ0Q29sb3IuRyArIChlbmRDb2xvci5HIC0gc3RhcnRDb2xvci5HKSAqIHQpICogMjU1KQogICAgICAgIGxvY2FsIGIgPSBtYXRoLmZsb29yKChzdGFydENvbG9yLkIgKyAoZW5kQ29sb3IuQiAtIHN0YXJ0Q29sb3IuQikgKiB0KSAqIDI1NSkKICAgICAgICByZXN1bHQgPSByZXN1bHQgLi4gc3RyaW5nLmZvcm1hdCgnPGZvbnQgY29sb3I9InJnYiglZCwlZCwlZCkiPiVzPC9mb250PicsIHIsIGcsIGIsIHRleHQ6c3ViKGksIGkpKQogICAgZW5kCiAgICByZXR1cm4gcmVzdWx0CmVuZAoKV2luZFVJOlBvcHVwKHsKICAgIFRpdGxlID0gZ3JhZGllbnQoIldpbmRVSSBEZW1vIiwgQ29sb3IzLmZyb21IZXgoIiM2QTExQ0IiKSwgQ29sb3IzLmZyb21IZXgoIiMyNTc1RkMiKSksCiAgICBJY29uID0gInNwYXJrbGVzIiwKICAgIENvbnRlbnQgPSAibG9jOkxJQl9ERVNDIiwKICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgewogICAgICAgICAgICBUaXRsZSA9ICJHZXQgU3RhcnRlZCIsCiAgICAgICAgICAgIEljb24gPSAiYXJyb3ctcmlnaHQiLAogICAgICAgICAgICBWYXJpYW50ID0gIlByaW1hcnkiLAogICAgICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkgZW5kCiAgICAgICAgfQogICAgfQp9KQoKCi0tIEFkZCB5b3VyIHNlcnZpY2UgdG8gZ2V0IGtleSAKLS1bWwpXaW5kVUkuU2VydmljZXMubXlzdXBlcnNlcnZpY2V0b2dldGtleSA9IHsKICAgIE5hbWUgPSAiTXkgU3VwZXIgU2VydmljZSIsCiAgICBJY29uID0gImRyb3BsZXQiLCAtLSBsdWNpZGUgb3IgcmJ4YXNzZXRpZCBvciByYXcgbGluayB0byBpbWcKICAgIAogICAgQXJncyA9IHsgIlNlcnZpY2VJZCIgfSwgLS0gICAgICAgPC0gXAogICAgLS0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgIC0tIGltcG9ydGFudCEhISEhISEhISEhISEhISAgICAgICAgICB8CiAgICBOZXcgPSBmdW5jdGlvbihTZXJ2aWNlSWQpIC0tIDwtLS0tLS0gfCBBcmdzISEhISEhISEhISEhCiAgICAgICAgCiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVLZXkoa2V5KSAtLSA8LS0tIHRoaXMgdG9vIGltcG9ydGFudCEhIQogICAgICAgICAgICAtLSB5b3VyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIGtleQogICAgICAgICAgICAtLSBzZWUgZXhhbXBsZXMgYXQgc3JjL3V0aWxzLwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGtleSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UsICJLZXkgaXMgaW52YWxpZCEiIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHRydWUsICJLZXkgaXMgdmFsaWQhIiAKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBmdW5jdGlvbiBjb3B5TGluaygpCiAgICAgICAgICAgIHJldHVybiBzZXRjbGlwYm9hcmQoImxpbmsgdG8ga2V5IHN5c3RlbSBzZXJ2aWNlLiIpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLS0g4oaTIGRvIG5vdCBjaGFuZ2UgdGhpcyEhMSExITEhMSExISExITEwMAogICAgICAgICAgICBWZXJpZnkgPSB2YWxpZGF0ZUtleSwgLS0gPC0tLS0tICBUSElTIFRPTyBJTVBPUlRBTlQhISEhIQogICAgICAgICAgICBDb3B5ID0gY29weUxpbmsgLS0gPC0tLS0tLS0tIElNUE9SVEFOVCExITEhMSExITEhMSExMSEKICAgICAgICAgICAgLS0g4oaRIGRvIG5vdCBjaGFuZ2UgdGhpcyEhMSExITEhMSExISExITEwMAogICAgICAgIH0KICAgIGVuZAp9Cl1dCgpsb2NhbCBXaW5kb3cgPSBXaW5kVUk6Q3JlYXRlV2luZG93KHsKICAgIFRpdGxlID0gImxvYzpXSU5EVUlfRVhBTVBMRSIsCiAgICBJY29uID0gInBhbGV0dGUiLAogICAgQXV0aG9yID0gImxvYzpXRUxDT01FIiwKICAgIEZvbGRlciA9ICJXaW5kVUlfRXhhbXBsZSIsCiAgICBTaXplID0gVURpbTIuZnJvbU9mZnNldCg1ODAsIDQ5MCksCiAgICBUaGVtZSA9ICJEYXJrIiwKICAgIC0tIEJhY2tncm91bmQgPSBXaW5kVUk6R3JhZGllbnQoewogICAgLS0gICAgIFsiMCJdID0geyBDb2xvciA9IENvbG9yMy5mcm9tSGV4KCIjMGYwYzI5IiksIFRyYW5zcGFyZW5jeSA9IDEgfSwKICAgIC0tICAgICBbIjEwMCJdID0geyBDb2xvciA9IENvbG9yMy5mcm9tSGV4KCIjMzAyYjYzIiksIFRyYW5zcGFyZW5jeSA9IDAuOSB9LAogICAgLS0gfSwgewogICAgLS0gICAgIFJvdGF0aW9uID0gNDUsCiAgICAtLSB9KSwKICAgIC0tQmFja2dyb3VuZCA9ICJ2aWRlbzpodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMzM3MzY4NDUxODY1NjQ1MDk2LzE0MDI3MDM4NDU2NTc2NzM4NzgvVklEXzIwMjUwNjE2XzE4MDczMl8xNTgud2VibT9leD02ODk1OGEwMSZpcz02ODk0Mzg4MSZobT0xNjRjNWIwNGQxMDc2MzA4YjM4MDU1MDc1ZjdlYjA2NTNjMWQ3M2JlYzliY2VlMDhlOTE4YTMxMzIxZmUzMDU4JiIsCiAgICBVc2VyID0gewogICAgICAgIEVuYWJsZWQgPSB0cnVlLAogICAgICAgIEFub255bW91cyA9IHRydWUsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgIFdpbmRVSTpOb3RpZnkoewogICAgICAgICAgICAgICAgVGl0bGUgPSAiVXNlciBQcm9maWxlIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiVXNlciBwcm9maWxlIGNsaWNrZWQhIiwKICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMwogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgfSwKICAgIFNpZGVCYXJXaWR0aCA9IDIwMCwKICAgIC0tIEtleVN5c3RlbSA9IHsgLS0gPC0g4oaTIHJlbW92ZSB0aGlzIGFsbCwgaWYgeW91IGRvbnQgbmVldCB0aGUga2V5IHN5c3RlbQogICAgLS0gICAgIC0tIEtleSA9IHsgIjEyMzQiLCAiNTY3OCIgfSwgIAogICAgLS0gICAgIE5vdGUgPSAiRXhhbXBsZSBLZXkgU3lzdGVtLiBXaXRoIHBsYXRvYm9vc3QsIGV0Yy4iLAogICAgLS0gICAgIC0tIFVSTCA9ICJodHRwczovL2dpdGh1Yi5jb20vRm9vdGFnZXN1cy9XaW5kVUkiLAogICAgLS0gICAgIC0tIFRodW1ibmFpbCA9IHsKICAgIC0tICAgICAtLSAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLyIsCiAgICAtLSAgICAgLS0gICAgIFRpdGxlID0gIlRodW1ibmFpbCIsCiAgICAtLSAgICAgLS0gfSwKICAgIC0tICAgICBBUEkgPSB7CiAgICAtLSAgICAgICAgIHsgICAKICAgIC0tICAgICAgICAgICAgIC0tIFRpdGxlID0gIlBsYXRvYm9vc3QiLCAtLSBvcHRpb25hbCAKICAgIC0tICAgICAgICAgICAgIC0tIERlc2MgPSAiQ2xpY2sgdG8gY29weS4iLCAtLSBvcHRpb25hbAogICAgLS0gICAgICAgICAgICAgLS0gSWNvbiA9ICJyYnhhc3NldGlkOi8vIiwgLS0gb3B0aW9uYWwKICAgICAgICAgICAgICAgIAogICAgLS0gICAgICAgICAgICAgVHlwZSA9ICJwbGF0b2Jvb3N0IiwgLS0gdHlwZTogcGxhdG9ib29zdCwgLi4uCiAgICAtLSAgICAgICAgICAgICBTZXJ2aWNlSWQgPSA1NTQxLCAtLSBzZXJ2aWNlIGlkCiAgICAtLSAgICAgICAgICAgICBTZWNyZXQgPSAiMWVkYTNiNzAtYWFiNC00Mzk0LTgyZTQtNGU3ZjUwN2FlMTk4IiwgLS0gcGxhdG9ib29zdCBzZWNyZXQKICAgIC0tICAgICAgICAgfSwKICAgIC0tICAgICAgICAgeyAgIAogICAgLS0gICAgICAgICAgICAgLS0gVGl0bGUgPSAiT3RoZXIgc2VydmljZSIsIC0tIG9wdGlvbmFsIAogICAgLS0gICAgICAgICAgICAgLS0gRGVzYyA9IG5pbCwgLS0gb3B0aW9uYWwKICAgIC0tICAgICAgICAgICAgIC0tIEljb24gPSAicmJ4YXNzZXRpZDovLyIsIC0tIG9wdGlvbmFsCiAgICAgICAgICAgICAgICAKICAgIC0tICAgICAgICAgICAgIFR5cGUgPSAicGFuZGFkZXZlbG9wbWVudCIsIC0tIHR5cGU6IHBsYXRvYm9vc3QsIC4uLgogICAgLS0gICAgICAgICAgICAgU2VydmljZUlkID0gIndpbmR1aSIsIC0tIHNlcnZpY2UgaWQKICAgIC0tICAgICAgICAgfSwKICAgIC0tICAgICAgICAgeyAgIAogICAgLS0gICAgICAgICAgICAgVHlwZSA9ICJsdWFybW9yIiwKICAgIC0tICAgICAgICAgICAgIFNjcmlwdElkID0gIi4uLiIsCiAgICAtLSAgICAgICAgICAgICBEaXNjb3JkID0gImh0dHBzOi8vZGlzY29yZC5jb20vaW52aXRlLy4uLiIsCiAgICAtLSAgICAgICAgIH0sCiAgICAtLSAgICAgICAgIHsgLS0gQ3VzdG9tIHNlcnZpY2UgKCDihpHihpEgbG9vayBhdCBsaW5lIDczIOKGkeKGkSApCiAgICAtLSAgICAgICAgICAgICBUeXBlID0gIm15c3VwZXJzZXJ2aWNldG9nZXRrZXkiLAogICAgLS0gICAgICAgICAgICAgU2VydmljZUlkID0gNDIsCiAgICAtLSAgICAgICAgIH0KICAgIC0tICAgICB9LAogICAgLS0gICAgIFNhdmVLZXkgPSB0cnVlLAogICAgLS0gfSwKfSkKCldpbmRvdzpUYWcoewogICAgVGl0bGUgPSAidjEuNi40IiwKICAgIENvbG9yID0gQ29sb3IzLmZyb21IZXgoIiMzMGZmNmEiKQp9KQpXaW5kb3c6VGFnKHsKICAgIFRpdGxlID0gIkJldGEiLAogICAgQ29sb3IgPSBDb2xvcjMuZnJvbUhleCgiIzMxNWRmZiIpCn0pCmxvY2FsIFRpbWVUYWcgPSBXaW5kb3c6VGFnKHsKICAgIFRpdGxlID0gIjAwOjAwIiwKICAgIENvbG9yID0gQ29sb3IzLmZyb21IZXgoIiMwMDAwMDAiKQp9KQoKbG9jYWwgaHVlID0gMAoKdGFzay5zcGF3bihmdW5jdGlvbigpCgl3aGlsZSB0cnVlIGRvCgkJbG9jYWwgbm93ID0gb3MuZGF0ZSgiKnQiKQoJCWxvY2FsIGhvdXJzID0gc3RyaW5nLmZvcm1hdCgiJTAyZCIsIG5vdy5ob3VyKQoJCWxvY2FsIG1pbnV0ZXMgPSBzdHJpbmcuZm9ybWF0KCIlMDJkIiwgbm93Lm1pbikKCQkKCQlodWUgPSAoaHVlICsgMC4wMSkgJSAxCgkJbG9jYWwgY29sb3IgPSBDb2xvcjMuZnJvbUhTVihodWUsIDEsIDEpCgkJCgkJVGltZVRhZzpTZXRUaXRsZShob3VycyAuLiAiOiIgLi4gbWludXRlcykKCQlUaW1lVGFnOlNldENvbG9yKGNvbG9yKQoKCQl0YXNrLndhaXQoMC4wNikKCWVuZAplbmQpCgoKV2luZG93OkNyZWF0ZVRvcGJhckJ1dHRvbigidGhlbWUtc3dpdGNoZXIiLCAibW9vbiIsIGZ1bmN0aW9uKCkKICAgIFdpbmRVSTpTZXRUaGVtZShXaW5kVUk6R2V0Q3VycmVudFRoZW1lKCkgPT0gIkRhcmsiIGFuZCAiTGlnaHQiIG9yICJEYXJrIikKICAgIFdpbmRVSTpOb3RpZnkoewogICAgICAgIFRpdGxlID0gIlRoZW1lIENoYW5nZWQiLAogICAgICAgIENvbnRlbnQgPSAiQ3VycmVudCB0aGVtZTogIi4uV2luZFVJOkdldEN1cnJlbnRUaGVtZSgpLAogICAgICAgIER1cmF0aW9uID0gMgogICAgfSkKZW5kLCA5OTApCgpsb2NhbCBUYWJzID0gewogICAgTWFpbiA9IFdpbmRvdzpTZWN0aW9uKHsgVGl0bGUgPSAibG9jOkZFQVRVUkVTIiwgT3BlbmVkID0gdHJ1ZSB9KSwKICAgIFNldHRpbmdzID0gV2luZG93OlNlY3Rpb24oeyBUaXRsZSA9ICJsb2M6U0VUVElOR1MiLCBPcGVuZWQgPSB0cnVlIH0pLAogICAgVXRpbGl0aWVzID0gV2luZG93OlNlY3Rpb24oeyBUaXRsZSA9ICJsb2M6VVRJTElUSUVTIiwgT3BlbmVkID0gdHJ1ZSB9KQp9Cgpsb2NhbCBUYWJIYW5kbGVzID0gewogICAgRWxlbWVudHMgPSBUYWJzLk1haW46VGFiKHsgVGl0bGUgPSAibG9jOlVJX0VMRU1FTlRTIiwgSWNvbiA9ICJsYXlvdXQtZ3JpZCIsIERlc2MgPSAiVUkgRWxlbWVudHMgRXhhbXBsZSIgfSksCiAgICBBcHBlYXJhbmNlID0gVGFicy5TZXR0aW5nczpUYWIoeyBUaXRsZSA9ICJsb2M6QVBQRUFSQU5DRSIsIEljb24gPSAiYnJ1c2giIH0pLAogICAgQ29uZmlnID0gVGFicy5VdGlsaXRpZXM6VGFiKHsgVGl0bGUgPSAibG9jOkNPTkZJR1VSQVRJT04iLCBJY29uID0gInNldHRpbmdzIiB9KQp9CgpUYWJIYW5kbGVzLkVsZW1lbnRzOlBhcmFncmFwaCh7CiAgICBUaXRsZSA9ICJJbnRlcmFjdGl2ZSBDb21wb25lbnRzIiwKICAgIERlc2MgPSAiRXhwbG9yZSBXaW5kVUkncyBwb3dlcmZ1bCBlbGVtZW50cyIsCiAgICBJbWFnZSA9ICJjb21wb25lbnQiLAogICAgSW1hZ2VTaXplID0gMjAsCiAgICBDb2xvciA9IENvbG9yMy5mcm9tSGV4KCIjMzBmZjZhIiksCn0pCgpUYWJIYW5kbGVzLkVsZW1lbnRzOkRpdmlkZXIoKQoKbG9jYWwgRWxlbWVudHNTZWN0aW9uID0gVGFiSGFuZGxlcy5FbGVtZW50czpTZWN0aW9uKHsKICAgIFRpdGxlID0gIlNlY3Rpb24gRXhhbXBsZSIsCiAgICBJY29uID0gImJpcmQiLAp9KQoKbG9jYWwgdG9nZ2xlU3RhdGUgPSBmYWxzZQpsb2NhbCBmZWF0dXJlVG9nZ2xlID0gRWxlbWVudHNTZWN0aW9uOlRvZ2dsZSh7CiAgICBUaXRsZSA9ICJFbmFibGUgRmVhdHVyZXMiLAogICAgLS1EZXNjID0gIlVubG9ja3MgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IiwKICAgIFZhbHVlID0gZmFsc2UsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHN0YXRlKSAKICAgICAgICB0b2dnbGVTdGF0ZSA9IHN0YXRlCiAgICAgICAgV2luZFVJOk5vdGlmeSh7CiAgICAgICAgICAgIFRpdGxlID0gIkZlYXR1cmVzIiwKICAgICAgICAgICAgQ29udGVudCA9IHN0YXRlIGFuZCAiRmVhdHVyZXMgRW5hYmxlZCIgb3IgIkZlYXR1cmVzIERpc2FibGVkIiwKICAgICAgICAgICAgSWNvbiA9IHN0YXRlIGFuZCAiY2hlY2siIG9yICJ4IiwKICAgICAgICAgICAgRHVyYXRpb24gPSAyCiAgICAgICAgfSkKICAgIGVuZAp9KQoKbG9jYWwgaW50ZW5zaXR5U2xpZGVyID0gRWxlbWVudHNTZWN0aW9uOlNsaWRlcih7CiAgICBUaXRsZSA9ICJFZmZlY3QgSW50ZW5zaXR5IiwKICAgIERlc2MgPSAiQWRqdXN0IHRoZSBlZmZlY3Qgc3RyZW5ndGgiLAogICAgVmFsdWUgPSB7IE1pbiA9IDAsIE1heCA9IDEwMCwgRGVmYXVsdCA9IDUwIH0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKQogICAgICAgIHByaW50KCJJbnRlbnNpdHkgc2V0IHRvOiIsIHZhbHVlKQogICAgZW5kCn0pCgpsb2NhbCBtb2RlRHJvcGRvd24gPSBFbGVtZW50c1NlY3Rpb246RHJvcGRvd24oewogICAgVGl0bGUgPSAiU2VsZWN0IE1vZGUiLAogICAgVmFsdWVzID0geyAiU3RhbmRhcmQiLCAiQWR2YW5jZWQiLCAiRXhwZXJ0IiB9LAogICAgVmFsdWUgPSAiU3RhbmRhcmQiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihvcHRpb24pCiAgICAgICAgV2luZFVJOk5vdGlmeSh7CiAgICAgICAgICAgIFRpdGxlID0gIk1vZGUgQ2hhbmdlZCIsCiAgICAgICAgICAgIENvbnRlbnQgPSAiU2VsZWN0ZWQ6ICIuLm9wdGlvbiwKICAgICAgICAgICAgRHVyYXRpb24gPSAyCiAgICAgICAgfSkKICAgIGVuZAp9KQoKRWxlbWVudHNTZWN0aW9uOkRpdmlkZXIoKQoKRWxlbWVudHNTZWN0aW9uOkJ1dHRvbih7CiAgICBUaXRsZSA9ICJTaG93IE5vdGlmaWNhdGlvbiIsCiAgICBJY29uID0gImJlbGwiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgV2luZFVJOk5vdGlmeSh7CiAgICAgICAgICAgIFRpdGxlID0gIkhlbGxvIFdpbmRVSSEiLAogICAgICAgICAgICBDb250ZW50ID0gIlRoaXMgaXMgYSBzYW1wbGUgbm90aWZpY2F0aW9uIiwKICAgICAgICAgICAgSWNvbiA9ICJiZWxsIiwKICAgICAgICAgICAgRHVyYXRpb24gPSAzCiAgICAgICAgfSkKICAgIGVuZAp9KQoKRWxlbWVudHNTZWN0aW9uOkNvbG9ycGlja2VyKHsKICAgIFRpdGxlID0gIlNlbGVjdCBDb2xvciIsCiAgICAtLURlc2MgPSAiU2VsZWN0IGNvbG9lIiwKICAgIERlZmF1bHQgPSBDb2xvcjMuZnJvbUhleCgiIzMwZmY2YSIpLAogICAgVHJhbnNwYXJlbmN5ID0gMCwgLS0gZW5hYmxlIHRyYW5zcGFyZW5jeQogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihjb2xvciwgdHJhbnNwYXJlbmN5KQogICAgICAgIFdpbmRVSTpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICJDb2xvciBDaGFuZ2VkIiwKICAgICAgICAgICAgQ29udGVudCA9ICJOZXcgY29sb3I6ICIuLmNvbG9yOlRvSGV4KCkuLiJcblRyYW5zcGFyZW5jeTogIi4udHJhbnNwYXJlbmN5LAogICAgICAgICAgICBEdXJhdGlvbiA9IDIKICAgICAgICB9KQogICAgZW5kCn0pCgpFbGVtZW50c1NlY3Rpb246Q29kZSh7CiAgICBUaXRsZSA9ICJteV9jb2RlLmx1YXUiLAogICAgQ29kZSA9IFtbcHJpbnQoIkhlbGxvIHdvcmxkISIpXV0sCiAgICBPbkNvcHkgPSBmdW5jdGlvbigpCiAgICAgICAgcHJpbnQoIkNvcGllZCB0byBjbGlwYm9hcmQhIikKICAgIGVuZAp9KQoKVGFiSGFuZGxlcy5BcHBlYXJhbmNlOlBhcmFncmFwaCh7CiAgICBUaXRsZSA9ICJDdXN0b21pemUgSW50ZXJmYWNlIiwKICAgIERlc2MgPSAiUGVyc29uYWxpemUgeW91ciBleHBlcmllbmNlIiwKICAgIEltYWdlID0gInBhbGV0dGUiLAogICAgSW1hZ2VTaXplID0gMjAsCiAgICBDb2xvciA9ICJXaGl0ZSIKfSkKCmxvY2FsIHRoZW1lcyA9IHt9CmZvciB0aGVtZU5hbWUsIF8gaW4gcGFpcnMoV2luZFVJOkdldFRoZW1lcygpKSBkbwogICAgdGFibGUuaW5zZXJ0KHRoZW1lcywgdGhlbWVOYW1lKQplbmQKdGFibGUuc29ydCh0aGVtZXMpCgpsb2NhbCBjYW5jaGFuZ2V0aGVtZSA9IHRydWUKbG9jYWwgY2FuY2hhbmdlZHJvcGRvd24gPSB0cnVlCgoKCmxvY2FsIHRoZW1lRHJvcGRvd24gPSBUYWJIYW5kbGVzLkFwcGVhcmFuY2U6RHJvcGRvd24oewogICAgVGl0bGUgPSAibG9jOlRIRU1FX1NFTEVDVCIsCiAgICBWYWx1ZXMgPSB0aGVtZXMsCiAgICBWYWx1ZSA9ICJEYXJrIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24odGhlbWUpCiAgICAgICAgY2FuY2hhbmdlZHJvcGRvd24gPSBmYWxzZQogICAgICAgIFdpbmRVSTpTZXRUaGVtZSh0aGVtZSkKICAgICAgICBXaW5kVUk6Tm90aWZ5KHsKICAgICAgICAgICAgVGl0bGUgPSAiVGhlbWUgQXBwbGllZCIsCiAgICAgICAgICAgIENvbnRlbnQgPSB0aGVtZSwKICAgICAgICAgICAgSWNvbiA9ICJwYWxldHRlIiwKICAgICAgICAgICAgRHVyYXRpb24gPSAyCiAgICAgICAgfSkKICAgICAgICBjYW5jaGFuZ2Vkcm9wZG93biA9IHRydWUKICAgIGVuZAp9KQoKbG9jYWwgdHJhbnNwYXJlbmN5U2xpZGVyID0gVGFiSGFuZGxlcy5BcHBlYXJhbmNlOlNsaWRlcih7CiAgICBUaXRsZSA9ICJsb2M6VFJBTlNQQVJFTkNZIiwKICAgIFZhbHVlID0geyAKICAgICAgICBNaW4gPSAwLAogICAgICAgIE1heCA9IDEsCiAgICAgICAgRGVmYXVsdCA9IDAuMiwKICAgIH0sCiAgICBTdGVwID0gMC4xLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSkKICAgICAgICBXaW5kVUkuVHJhbnNwYXJlbmN5VmFsdWUgPSB0b251bWJlcih2YWx1ZSkKICAgICAgICBXaW5kb3c6VG9nZ2xlVHJhbnNwYXJlbmN5KHRvbnVtYmVyKHZhbHVlKSA+IDApCiAgICBlbmQKfSkKCmxvY2FsIFRoZW1lVG9nZ2xlID0gVGFiSGFuZGxlcy5BcHBlYXJhbmNlOlRvZ2dsZSh7CiAgICBUaXRsZSA9ICJFbmFibGUgRGFyayBNb2RlIiwKICAgIERlc2MgPSAiVXNlIGRhcmsgY29sb3Igc2NoZW1lIiwKICAgIFZhbHVlID0gdHJ1ZSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oc3RhdGUpCiAgICAgICAgaWYgY2FuY2hhbmdldGhlbWUgdGhlbgogICAgICAgICAgICBXaW5kVUk6U2V0VGhlbWUoc3RhdGUgYW5kICJEYXJrIiBvciAiTGlnaHQiKQogICAgICAgIGVuZAogICAgICAgIGlmIGNhbmNoYW5nZWRyb3Bkb3duIHRoZW4KICAgICAgICAgICAgdGhlbWVEcm9wZG93bjpTZWxlY3Qoc3RhdGUgYW5kICJEYXJrIiBvciAiTGlnaHQiKQogICAgICAgIGVuZAogICAgZW5kCn0pCgpXaW5kVUk6T25UaGVtZUNoYW5nZShmdW5jdGlvbih0aGVtZSkKICAgIGNhbmNoYW5nZXRoZW1lID0gZmFsc2UKICAgIFRoZW1lVG9nZ2xlOlNldCh0aGVtZSA9PSAiRGFyayIpCiAgICBjYW5jaGFuZ2V0aGVtZSA9IHRydWUKZW5kKQoKClRhYkhhbmRsZXMuQXBwZWFyYW5jZTpCdXR0b24oewogICAgVGl0bGUgPSAiQ3JlYXRlIE5ldyBUaGVtZSIsCiAgICBJY29uID0gInBsdXMiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgV2luZG93OkRpYWxvZyh7CiAgICAgICAgICAgIFRpdGxlID0gIkNyZWF0ZSBUaGVtZSIsCiAgICAgICAgICAgIENvbnRlbnQgPSAiVGhpcyBmZWF0dXJlIGlzIGNvbWluZyBzb29uISIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgVGl0bGUgPSAiT0siLAogICAgICAgICAgICAgICAgICAgIFZhcmlhbnQgPSAiUHJpbWFyeSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICBlbmQKfSkKClRhYkhhbmRsZXMuQ29uZmlnOlBhcmFncmFwaCh7CiAgICBUaXRsZSA9ICJDb25maWd1cmF0aW9uIE1hbmFnZXIiLAogICAgRGVzYyA9ICJTYXZlIGFuZCBsb2FkIHlvdXIgc2V0dGluZ3MiLAogICAgSW1hZ2UgPSAic2F2ZSIsCiAgICBJbWFnZVNpemUgPSAyMCwKICAgIENvbG9yID0gIldoaXRlIgp9KQoKbG9jYWwgY29uZmlnTmFtZSA9ICJkZWZhdWx0Igpsb2NhbCBjb25maWdGaWxlID0gbmlsCmxvY2FsIE15UGxheWVyRGF0YSA9IHsKICAgIG5hbWUgPSAiUGxheWVyMSIsCiAgICBsZXZlbCA9IDEsCiAgICBpbnZlbnRvcnkgPSB7ICJzd29yZCIsICJzaGllbGQiLCAicG90aW9uIiB9Cn0KClRhYkhhbmRsZXMuQ29uZmlnOklucHV0KHsKICAgIFRpdGxlID0gIkNvbmZpZyBOYW1lIiwKICAgIFZhbHVlID0gY29uZmlnTmFtZSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpCiAgICAgICAgY29uZmlnTmFtZSA9IHZhbHVlIG9yICJkZWZhdWx0IgogICAgZW5kCn0pCgpsb2NhbCBDb25maWdNYW5hZ2VyID0gV2luZG93LkNvbmZpZ01hbmFnZXIKaWYgQ29uZmlnTWFuYWdlciB0aGVuCiAgICBDb25maWdNYW5hZ2VyOkluaXQoV2luZG93KQogICAgCiAgICBUYWJIYW5kbGVzLkNvbmZpZzpCdXR0b24oewogICAgICAgIFRpdGxlID0gImxvYzpTQVZFX0NPTkZJRyIsCiAgICAgICAgSWNvbiA9ICJzYXZlIiwKICAgICAgICBWYXJpYW50ID0gIlByaW1hcnkiLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBjb25maWdGaWxlID0gQ29uZmlnTWFuYWdlcjpDcmVhdGVDb25maWcoY29uZmlnTmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbmZpZ0ZpbGU6UmVnaXN0ZXIoImZlYXR1cmVUb2dnbGUiLCBmZWF0dXJlVG9nZ2xlKQogICAgICAgICAgICBjb25maWdGaWxlOlJlZ2lzdGVyKCJpbnRlbnNpdHlTbGlkZXIiLCBpbnRlbnNpdHlTbGlkZXIpCiAgICAgICAgICAgIGNvbmZpZ0ZpbGU6UmVnaXN0ZXIoIm1vZGVEcm9wZG93biIsIG1vZGVEcm9wZG93bikKICAgICAgICAgICAgY29uZmlnRmlsZTpSZWdpc3RlcigidGhlbWVEcm9wZG93biIsIHRoZW1lRHJvcGRvd24pCiAgICAgICAgICAgIGNvbmZpZ0ZpbGU6UmVnaXN0ZXIoInRyYW5zcGFyZW5jeVNsaWRlciIsIHRyYW5zcGFyZW5jeVNsaWRlcikKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbmZpZ0ZpbGU6U2V0KCJwbGF5ZXJEYXRhIiwgTXlQbGF5ZXJEYXRhKQogICAgICAgICAgICBjb25maWdGaWxlOlNldCgibGFzdFNhdmUiLCBvcy5kYXRlKCIlWS0lbS0lZCAlSDolTTolUyIpKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgY29uZmlnRmlsZTpTYXZlKCkgdGhlbgogICAgICAgICAgICAgICAgV2luZFVJOk5vdGlmeSh7IAogICAgICAgICAgICAgICAgICAgIFRpdGxlID0gImxvYzpTQVZFX0NPTkZJRyIsIAogICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiU2F2ZWQgYXM6ICIuLmNvbmZpZ05hbWUsCiAgICAgICAgICAgICAgICAgICAgSWNvbiA9ICJjaGVjayIsCiAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSAzCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBXaW5kVUk6Tm90aWZ5KHsgCiAgICAgICAgICAgICAgICAgICAgVGl0bGUgPSAiRXJyb3IiLCAKICAgICAgICAgICAgICAgICAgICBDb250ZW50ID0gIkZhaWxlZCB0byBzYXZlIGNvbmZpZyIsCiAgICAgICAgICAgICAgICAgICAgSWNvbiA9ICJ4IiwKICAgICAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDMKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWJIYW5kbGVzLkNvbmZpZzpCdXR0b24oewogICAgICAgIFRpdGxlID0gImxvYzpMT0FEX0NPTkZJRyIsCiAgICAgICAgSWNvbiA9ICJmb2xkZXIiLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBjb25maWdGaWxlID0gQ29uZmlnTWFuYWdlcjpDcmVhdGVDb25maWcoY29uZmlnTmFtZSkKICAgICAgICAgICAgbG9jYWwgbG9hZGVkRGF0YSA9IGNvbmZpZ0ZpbGU6TG9hZCgpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBsb2FkZWREYXRhIHRoZW4KICAgICAgICAgICAgICAgIGlmIGxvYWRlZERhdGEucGxheWVyRGF0YSB0aGVuCiAgICAgICAgICAgICAgICAgICAgTXlQbGF5ZXJEYXRhID0gbG9hZGVkRGF0YS5wbGF5ZXJEYXRhCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgbGFzdFNhdmUgPSBsb2FkZWREYXRhLmxhc3RTYXZlIG9yICJVbmtub3duIgogICAgICAgICAgICAgICAgV2luZFVJOk5vdGlmeSh7IAogICAgICAgICAgICAgICAgICAgIFRpdGxlID0gImxvYzpMT0FEX0NPTkZJRyIsIAogICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiTG9hZGVkOiAiLi5jb25maWdOYW1lLi4iXG5MYXN0IHNhdmU6ICIuLmxhc3RTYXZlLAogICAgICAgICAgICAgICAgICAgIEljb24gPSAicmVmcmVzaC1jdyIsCiAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSA1CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBUYWJIYW5kbGVzLkNvbmZpZzpQYXJhZ3JhcGgoewogICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIlBsYXllciBEYXRhIiwKICAgICAgICAgICAgICAgICAgICBEZXNjID0gc3RyaW5nLmZvcm1hdCgiTmFtZTogJXNcbkxldmVsOiAlZFxuSW52ZW50b3J5OiAlcyIsIAogICAgICAgICAgICAgICAgICAgICAgICBNeVBsYXllckRhdGEubmFtZSwgCiAgICAgICAgICAgICAgICAgICAgICAgIE15UGxheWVyRGF0YS5sZXZlbCwgCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmNvbmNhdChNeVBsYXllckRhdGEuaW52ZW50b3J5LCAiLCAiKSkKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFdpbmRVSTpOb3RpZnkoeyAKICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJFcnJvciIsIAogICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiRmFpbGVkIHRvIGxvYWQgY29uZmlnIiwKICAgICAgICAgICAgICAgICAgICBJY29uID0gIngiLAogICAgICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KQplbHNlCiAgICBUYWJIYW5kbGVzLkNvbmZpZzpQYXJhZ3JhcGgoewogICAgICAgIFRpdGxlID0gIkNvbmZpZyBNYW5hZ2VyIE5vdCBBdmFpbGFibGUiLAogICAgICAgIERlc2MgPSAiVGhpcyBmZWF0dXJlIHJlcXVpcmVzIENvbmZpZ01hbmFnZXIiLAogICAgICAgIEltYWdlID0gImFsZXJ0LXRyaWFuZ2xlIiwKICAgICAgICBJbWFnZVNpemUgPSAyMCwKICAgICAgICBDb2xvciA9ICJXaGl0ZSIKICAgIH0pCmVuZAoKCmxvY2FsIGZvb3RlclNlY3Rpb24gPSBXaW5kb3c6U2VjdGlvbih7IFRpdGxlID0gIldpbmRVSSAiIC4uIFdpbmRVSS5WZXJzaW9uIH0pClRhYkhhbmRsZXMuQ29uZmlnOlBhcmFncmFwaCh7CiAgICBUaXRsZSA9ICJDcmVhdGVkIHdpdGgg4p2k77iPIiwKICAgIERlc2MgPSAiZ2l0aHViLmNvbS9Gb290YWdlc3VzL1dpbmRVSSIsCiAgICBJbWFnZSA9ICJnaXRodWIiLAogICAgSW1hZ2VTaXplID0gMjAsCiAgICBDb2xvciA9ICJHcmV5IiwKICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgewogICAgICAgICAgICBUaXRsZSA9ICJDb3B5IExpbmsiLAogICAgICAgICAgICBJY29uID0gImNvcHkiLAogICAgICAgICAgICBWYXJpYW50ID0gIlRlcnRpYXJ5IiwKICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBzZXRjbGlwYm9hcmQoImh0dHBzOi8vZ2l0aHViLmNvbS9Gb290YWdlc3VzL1dpbmRVSSIpCiAgICAgICAgICAgICAgICBXaW5kVUk6Tm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJDb3BpZWQhIiwKICAgICAgICAgICAgICAgICAgICBDb250ZW50ID0gIkdpdEh1YiBsaW5rIGNvcGllZCB0byBjbGlwYm9hcmQiLAogICAgICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMgogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgZW5kCiAgICAgICAgfQogICAgfQp9KQoKV2luZG93Ok9uQ2xvc2UoZnVuY3Rpb24oKQogICAgcHJpbnQoIldpbmRvdyBjbG9zZWQiKQogICAgCiAgICBpZiBDb25maWdNYW5hZ2VyIGFuZCBjb25maWdGaWxlIHRoZW4KICAgICAgICBjb25maWdGaWxlOlNldCgicGxheWVyRGF0YSIsIE15UGxheWVyRGF0YSkKICAgICAgICBjb25maWdGaWxlOlNldCgibGFzdFNhdmUiLCBvcy5kYXRlKCIlWS0lbS0lZCAlSDolTTolUyIpKQogICAgICAgIGNvbmZpZ0ZpbGU6U2F2ZSgpCiAgICAgICAgcHJpbnQoIkNvbmZpZyBhdXRvLXNhdmVkIG9uIGNsb3NlIikKICAgIGVuZAplbmQpCgpXaW5kb3c6T25EZXN0cm95KGZ1bmN0aW9uKCkKICAgIHByaW50KCJXaW5kb3cgZGVzdHJveWVkIikKZW5kKQ==")
loadstring(decoded)()
