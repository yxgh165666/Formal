-- Base64 解码器（Roblox 可用）
local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local b64lookup = {}
for i = 1, #b64chars do
    b64lookup[b64chars:sub(i, i)] = i - 1
end

local function base64_decode(data)
    data = data:gsub('[^%w%+%/%=]', '')
    local result = {}
    local n = 1
    while n <= #data do
        local a = b64lookup[data:sub(n, n)]
        local b = b64lookup[data:sub(n+1, n+1)]
        local c = b64lookup[data:sub(n+2, n+2)]
        local d = b64lookup[data:sub(n+3, n+3)]

        local x = (a * 262144) + (b * 4096) + ((c or 0) * 64) + (d or 0)
        result[#result+1] = string.char(
            math.floor(x / 65536) % 256,
            math.floor(x / 256) % 256,
            x % 256
        )
        n = n + 4
    end

    local pad = select(2, data:gsub('=', '='))
    if pad == 2 then
        result[#result] = result[#result]:sub(1, 1)
    elseif pad == 1 then
        result[#result] = result[#result]:sub(1, 2)
    end

    return table.concat(result)
end

-- ✅ 示例：解码并执行（仅限你自己的脚本）
local decoded = base64_decode("bG9jYWwgUmF5ZmllbGQgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgnaHR0cHM6Ly9zaXJpdXMubWVudS9yYXlmaWVsZCcpKSgpCgotLSDkvb/nlKggUmF5ZmllbGQg5YaF572u5a+G6ZKl57O757ufCmxvY2FsIFdpbmRvdyA9IFJheWZpZWxkOkNyZWF0ZVdpbmRvdyh7CiAgICBOYW1lID0gIuWdpOWdpOWkp+W4neiEmuacrCAtICIgLi4gKGlkZW50aWZ5ZXhlY3V0b3IgYW5kIGlkZW50aWZ5ZXhlY3V0b3IoKSBvciAi5pyq55+l5omn6KGM5ZmoIiksCiAgICBMb2FkaW5nVGl0bGUgPSAi5Z2k5Z2k5aSn5bid6ISa5pys5Yqg6L295LitIiwKICAgIExvYWRpbmdTdWJ0aXRsZSA9ICLlsIrkuqvnibnmnYPniYgiLAogICAgQ29uZmlndXJhdGlvblNhdmluZyA9IHsKICAgICAgICBFbmFibGVkID0gdHJ1ZSwKICAgICAgICBGb2xkZXJOYW1lID0gIlN0aXRjaENvbmZpZyIsCiAgICAgICAgRmlsZU5hbWUgPSAiU2V0dGluZ3MiCiAgICB9LAogICAgRGlzY29yZCA9IHsKICAgICAgICBFbmFibGVkID0gZmFsc2UsCiAgICAgICAgSW52aXRlID0gImh0dHBzOi8vZGlzY29yZC5nZy8iLAogICAgICAgIFJlbWVtYmVySm9pbnMgPSB0cnVlCiAgICB9LAogICAgS2V5U3lzdGVtID0gdHJ1ZSwgLS0g5ZCv55So5YaF572u5a+G6ZKl57O757ufCiAgICBLZXlTZXR0aW5ncyA9IHsKICAgICAgICBUaXRsZSA9ICLlnaTlnaTlpKfluJ3ohJrmnKzpqozor4EiLAogICAgICAgIFN1YnRpdGxlID0gIuivt+i+k+WFpeacieaViOWvhumSpSIsCiAgICAgICAgTm90ZSA9ICLmsqHmnInlr4bpkqXvvJ/liqDlhaVEaXNjb3Jk6I635Y+WIiwKICAgICAgICBGaWxlTmFtZSA9ICJTdGl0Y2hLZXkiLAogICAgICAgIFNhdmVLZXkgPSB0cnVlLAogICAgICAgIEdyYWJLZXlGcm9tU2l0ZSA9IGZhbHNlLAogICAgICAgIEtleSA9IHsiMjAyNSIsICI2NjYiLCAiS1VOS1VONjY2IiwgIjY2NmZyZWUiLCAiVEFJWU9VWUlTSUxFIn0gLS0g5pyJ5pWI5a+G6ZKl5YiX6KGoCiAgICB9Cn0pCgotLSDlnaTlnaTlpKfluJ3ohJrmnKzlvLnmgKfliqjnlLsKbG9jYWwgZnVuY3Rpb24gQ3JlYXRlS3VuS3VuQW5pbWF0aW9uKCkKICAgIC0tIOWIm+W7uuWFqOWxj+iDjOaZrwogICAgbG9jYWwgYmcgPSBEcmF3aW5nLm5ldygiU3F1YXJlIikKICAgIGJnLlNpemUgPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUKICAgIGJnLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoMCwgMCkKICAgIGJnLkNvbG9yID0gQ29sb3IzLm5ldygwLCAwLCAwKQogICAgYmcuRmlsbGVkID0gdHJ1ZQogICAgYmcuVHJhbnNwYXJlbmN5ID0gMQogICAgYmcuVmlzaWJsZSA9IHRydWUKICAgIGJnLlpJbmRleCA9IDk5OQogICAgCiAgICAtLSDliJvlu7rlnaTlnaTlpKfluJ3mloflrZcKICAgIGxvY2FsIHRleHQgPSBEcmF3aW5nLm5ldygiVGV4dCIpCiAgICB0ZXh0LlRleHQgPSAi5Z2k5Z2k5aSn5bid6ISa5pysIgogICAgdGV4dC5TaXplID0gMTAwCiAgICB0ZXh0LkNlbnRlciA9IHRydWUKICAgIHRleHQuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyh3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWC8yLCAtMjAwKQogICAgdGV4dC5Db2xvciA9IENvbG9yMy5uZXcoMSwgMC4yLCAwLjIpCiAgICB0ZXh0Lk91dGxpbmUgPSB0cnVlCiAgICB0ZXh0Lk91dGxpbmVDb2xvciA9IENvbG9yMy5uZXcoMSwgMSwgMSkKICAgIHRleHQuVHJhbnNwYXJlbmN5ID0gMAogICAgdGV4dC5WaXNpYmxlID0gdHJ1ZQogICAgdGV4dC5aSW5kZXggPSAxMDAwCiAgICAKICAgIC0tIOWIm+W7uuWJr+agh+mimAogICAgbG9jYWwgc3ViVGV4dCA9IERyYXdpbmcubmV3KCJUZXh0IikKICAgIHN1YlRleHQuVGV4dCA9ICLlsIrkuqvnibnmnYPniYggLSDlkK/liqjmiJDlip8iCiAgICBzdWJUZXh0LlNpemUgPSA0MAogICAgc3ViVGV4dC5DZW50ZXIgPSB0cnVlCiAgICBzdWJUZXh0LlBvc2l0aW9uID0gVmVjdG9yMi5uZXcod29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgLTEwMCkKICAgIHN1YlRleHQuQ29sb3IgPSBDb2xvcjMubmV3KDAuOCwgMC44LCAxKQogICAgc3ViVGV4dC5PdXRsaW5lID0gdHJ1ZQogICAgc3ViVGV4dC5PdXRsaW5lQ29sb3IgPSBDb2xvcjMubmV3KDAuMiwgMC4yLCAwLjIpCiAgICBzdWJUZXh0LlRyYW5zcGFyZW5jeSA9IDAKICAgIHN1YlRleHQuVmlzaWJsZSA9IHRydWUKICAgIHN1YlRleHQuWkluZGV4ID0gMTAwMAogICAgCiAgICAtLSDlvLnmgKfliqjnlLvlh73mlbAKICAgIGxvY2FsIGZ1bmN0aW9uIGVsYXN0aWNBbmltYXRpb24ob2JqLCB0YXJnZXRZLCBkdXJhdGlvbikKICAgICAgICBsb2NhbCBzdGFydFkgPSBvYmouUG9zaXRpb24uWQogICAgICAgIGxvY2FsIHN0YXJ0VGltZSA9IHRpY2soKQogICAgICAgIGxvY2FsIGRhbXBpbmcgPSAwLjcKICAgICAgICBsb2NhbCBzdGlmZm5lc3MgPSAwLjMKICAgICAgICAKICAgICAgICBsb2NhbCBjb25uZWN0aW9uCiAgICAgICAgY29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIGVsYXBzZWQgPSB0aWNrKCkgLSBzdGFydFRpbWUKICAgICAgICAgICAgbG9jYWwgcHJvZ3Jlc3MgPSBlbGFwc2VkIC8gZHVyYXRpb24KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHByb2dyZXNzID49IDEgdGhlbgogICAgICAgICAgICAgICAgb2JqLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcob2JqLlBvc2l0aW9uLlgsIHRhcmdldFkpCiAgICAgICAgICAgICAgICBjb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgb3ZlcnNob290ID0gbWF0aC5zaW4ocHJvZ3Jlc3MgKiBtYXRoLnBpICogNCkgKiAoMSAtIHByb2dyZXNzKQogICAgICAgICAgICBsb2NhbCBuZXdZID0gdGFyZ2V0WSArIChzdGFydFkgLSB0YXJnZXRZKSAqIG1hdGgucG93KDEgLSBwcm9ncmVzcywgMikgKiBvdmVyc2hvb3QgKiBzdGlmZm5lc3MKICAgICAgICAgICAgc3RpZmZuZXNzID0gc3RpZmZuZXNzICogZGFtcGluZwogICAgICAgICAgICBvYmouUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhvYmouUG9zaXRpb24uWCwgbmV3WSkKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIGZvciBpID0gMCwgMSwgMC4wNSBkbwogICAgICAgICAgICBiZy5UcmFuc3BhcmVuY3kgPSAxIC0gaSAqIDAuNwogICAgICAgICAgICB3YWl0KDAuMDEpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZWxhc3RpY0FuaW1hdGlvbih0ZXh0LCB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWS8yIC0gMTAwLCAxLjUpCiAgICAgICAgCiAgICAgICAgd2FpdCgwLjIpCiAgICAgICAgZWxhc3RpY0FuaW1hdGlvbihzdWJUZXh0LCB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5WaWV3cG9ydFNpemUuWS8yICsgMjAsIDEuMykKICAgICAgICAKICAgICAgICB3YWl0KDMuNSkKICAgICAgICAKICAgICAgICBmb3IgaSA9IDAsIDEsIDAuMDUgZG8KICAgICAgICAgICAgdGV4dC5UcmFuc3BhcmVuY3kgPSBpCiAgICAgICAgICAgIHN1YlRleHQuVHJhbnNwYXJlbmN5ID0gaQogICAgICAgICAgICBiZy5UcmFuc3BhcmVuY3kgPSAwLjMgKyBpICogMC43CiAgICAgICAgICAgIHdhaXQoMC4wMSkKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBiZzpSZW1vdmUoKQogICAgICAgIHRleHQ6UmVtb3ZlKCkKICAgICAgICBzdWJUZXh0OlJlbW92ZSgpCiAgICBlbmQpCmVuZAoKLS0g5aSN5Yi25Yiw5Ymq6LS05p2/5Ye95pWwCmxvY2FsIGZ1bmN0aW9uIENvcHlUb0NsaXBib2FyZCh0ZXh0KQogICAgaWYgc2V0Y2xpcGJvYXJkIHRoZW4KICAgICAgICBzZXRjbGlwYm9hcmQodGV4dCkKICAgICAgICByZXR1cm4gdHJ1ZQogICAgZWxzZWlmIHdyaXRlY2xpcGJvYXJkIHRoZW4KICAgICAgICB3cml0ZWNsaXBib2FyZCh0ZXh0KQogICAgICAgIHJldHVybiB0cnVlCiAgICBlbHNlaWYgdG9jbGlwYm9hcmQgdGhlbgogICAgICAgIHRvY2xpcGJvYXJkKHRleHQpCiAgICAgICAgcmV0dXJuIHRydWUKICAgIGVsc2UKICAgICAgICBwcmludCgiW+WkjeWItuWGheWuuV0gIiAuLiB0ZXh0KQogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCmVuZAoKLS0g5pi+56S65aSN5Yi25oiQ5Yqf6YCa55+lCmxvY2FsIGZ1bmN0aW9uIFNob3dDb3B5Tm90aWZpY2F0aW9uKHN1Y2Nlc3MsIGNvbnRlbnQpCiAgICBpZiBzdWNjZXNzIHRoZW4KICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLlpI3liLbmiJDlip8iLAogICAgICAgICAgICBDb250ZW50ID0gIuW3suWkjeWItuWIsOWJqui0tOadvzogIiAuLiBjb250ZW50LAogICAgICAgICAgICBEdXJhdGlvbiA9IDMsCiAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgIH0pCiAgICBlbHNlCiAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgVGl0bGUgPSAi5aSN5Yi25aSx6LSlIiwKICAgICAgICAgICAgQ29udGVudCA9ICLor7fmiYvliqjlpI3liLbmjqfliLblj7DkuK3nmoTlhoXlrrkiLAogICAgICAgICAgICBEdXJhdGlvbiA9IDUsCiAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgIH0pCiAgICBlbmQKZW5kCgotLSDliJvlu7rkuLvnqpflj6PlhoXlrrkKbG9jYWwgZnVuY3Rpb24gQ3JlYXRlTWFpbldpbmRvd0NvbnRlbnQoKQogICAgLS0g5YWs5ZGKIFRhYgogICAgbG9jYWwgVGFiMSA9IFdpbmRvdzpDcmVhdGVUYWIoIuWFrOWRiiIsIDc3MzM3Nzk2MTApCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGdldERhdGUoKSByZXR1cm4gb3MuZGF0ZSgiJVktJW0tJWQgJUg6JU0iKSBlbmQKICAgIGxvY2FsIGZ1bmN0aW9uIGdldFBsYXllcigpCiAgICAgICAgbG9jYWwgcCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIFsi55So5oi35ZCNIl0gICA9IHAuTmFtZSwKICAgICAgICAgICAgWyLmmL7npLrlkI0iXSAgID0gcC5EaXNwbGF5TmFtZSwKICAgICAgICAgICAgWyLnlKjmiLdJRCJdICAgPSBwLlVzZXJJZCwKICAgICAgICAgICAgWyLms6jlhozlpKnmlbAiXSA9IHAuQWNjb3VudEFnZSwKICAgICAgICAgICAgWyLlvZPliY3muLjmiI8iXSA9IGdhbWU6R2V0U2VydmljZSgiTWFya2V0cGxhY2VTZXJ2aWNlIik6R2V0UHJvZHVjdEluZm8oZ2FtZS5QbGFjZUlkKS5OYW1lCiAgICAgICAgfQogICAgZW5kCiAgICAKICAgIFRhYjE6Q3JlYXRlU2VjdGlvbigi57O757uf5L+h5oGvIikKICAgIFRhYjE6Q3JlYXRlTGFiZWwoIvCfk4Ug5b2T5YmN5pe26Ze0OiAiIC4uIGdldERhdGUoKSkKICAgIAogICAgZm9yIGssIHYgaW4gcGFpcnMoZ2V0UGxheWVyKCkpIGRvCiAgICAgICAgVGFiMTpDcmVhdGVMYWJlbChrIC4uICLvvJogIiAuLiB0b3N0cmluZyh2KSkKICAgIGVuZAogICAgCiAgICBUYWIxOkNyZWF0ZUJ1dHRvbih7CiAgICAgICAgTmFtZSA9ICLkuIDplK7lpI3liLZRUeWPtyIsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKSAKICAgICAgICAgICAgbG9jYWwgc3VjY2VzcyA9IENvcHlUb0NsaXBib2FyZCgiOTEzMzQ4Mjg1IikKICAgICAgICAgICAgU2hvd0NvcHlOb3RpZmljYXRpb24oc3VjY2VzcywgIjkxMzM0ODI4NSIpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICAtLSDkurrnianlip/og70gVGFiCiAgICBsb2NhbCBUYWIyID0gV2luZG93OkNyZWF0ZVRhYigi5Lq654mp5Yqf6IO9IiwgNzczMzc3OTYxMCkKICAgIAogICAgLS0g5YW85a65IGV4ZWN1dG9yIOayoeaciSBtb3VzZTFwcmVzcyAvIG1vdXNlMXJlbGVhc2UKICAgIGxvY2FsIG1vdXNlMXByZXNzID0gZnVuY3Rpb24oKQogICAgICAgIGlmIG1vdXNlMXByZXNzIHRoZW4KICAgICAgICAgICAgbW91c2UxcHJlc3MoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgdmltID0gZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsSW5wdXRNYW5hZ2VyIikKICAgICAgICAgICAgdmltOlNlbmRNb3VzZUJ1dHRvbkV2ZW50KDAsMCwwLHRydWUsZ2FtZSwxKQogICAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIG1vdXNlMXJlbGVhc2UgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgbW91c2UxcmVsZWFzZSB0aGVuCiAgICAgICAgICAgIG1vdXNlMXJlbGVhc2UoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgdmltID0gZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsSW5wdXRNYW5hZ2VyIikKICAgICAgICAgICAgdmltOlNlbmRNb3VzZUJ1dHRvbkV2ZW50KDAsMCwwLGZhbHNlLGdhbWUsMSkKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0g5Y+M54us56uLIEZPVu+8iOeZvei3n+majyArIOapmeWbuuWumu+8iemDveWPguS4jueehOWHhuWIpOWumiAtIOWinuW8uueJiAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIOmAmueUqOWPguaVsAogICAgbG9jYWwgYWltYm90RW5hYmxlZCAgICAgID0gZmFsc2UKICAgIGxvY2FsIGFpbWJvdFNtb290aCAgICAgICA9IDAuMzUKICAgIGxvY2FsIGFpbWJvdEJvbmUgICAgICAgICA9ICJIZWFkIgogICAgbG9jYWwgYWltYm90UHJlZGljdGlvbiAgID0gMC4xMgogICAgbG9jYWwgYWltYm90RGVsYXkgICAgICAgID0gMC4wOAogICAgbG9jYWwgYWltYm90Q2hlY2tUZWFtICAgID0gZmFsc2UKICAgIGxvY2FsIGxhc3RGaXJlID0gMAogICAgbG9jYWwgYWltYm90Q29ubgogICAgbG9jYWwgYWltYm90TW9kZSA9ICJEaXN0YW5jZSIKICAgIGxvY2FsIHdhbGxDaGVja0VuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgYWltTGluZUVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgYWltTGluZSA9IERyYXdpbmcubmV3KCJMaW5lIikKICAgIAogICAgLS0g5Yid5aeL5YyW6Ieq556E57q/5p2hCiAgICBhaW1MaW5lLlZpc2libGUgPSBmYWxzZQogICAgYWltTGluZS5UaGlja25lc3MgPSAxLjUKICAgIGFpbUxpbmUuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAyNTUsIDApCiAgICBhaW1MaW5lLlpJbmRleCA9IDExCiAgICAKICAgIC0tIOe8uuWkseWPmOmHj+S4gOasoeaAp+ihpeWFqAogICAgbG9jYWwgQ2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKICAgIGxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQogICAgbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCiAgICBsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKICAgIAogICAgLS0gMS4g6Lef6ZqP6byg5qCHIEZPVgogICAgbG9jYWwgbW91c2VGT1YgICAgICA9IDEyMAogICAgbG9jYWwgbW91c2VGb3ZDaXJjbGUgPSBEcmF3aW5nLm5ldygiQ2lyY2xlIikKICAgIG1vdXNlRm92Q2lyY2xlLk51bVNpZGVzICA9IDY0CiAgICBtb3VzZUZvdkNpcmNsZS5SYWRpdXMgICAgPSBtb3VzZUZPVgogICAgbW91c2VGb3ZDaXJjbGUuVGhpY2tuZXNzID0gMS41CiAgICBtb3VzZUZvdkNpcmNsZS5Db2xvciAgICAgPSBDb2xvcjMuZnJvbVJHQigyNTUsMjU1LDI1NSkKICAgIG1vdXNlRm92Q2lyY2xlLkZpbGxlZCAgICA9IGZhbHNlCiAgICBtb3VzZUZvdkNpcmNsZS5WaXNpYmxlICAgPSBmYWxzZQogICAgbW91c2VGb3ZDaXJjbGUuWkluZGV4ID0gMTAKICAgIAogICAgLS0gMi4g5Zu65a6a5Lit5b+DIEZPVgogICAgbG9jYWwgZml4ZWRGT1YgICAgICA9IDkwCiAgICBsb2NhbCBmaXhlZEZvdkNpcmNsZSA9IERyYXdpbmcubmV3KCJDaXJjbGUiKQogICAgZml4ZWRGb3ZDaXJjbGUuTnVtU2lkZXMgID0gNjQKICAgIGZpeGVkRm92Q2lyY2xlLlJhZGl1cyAgICA9IGZpeGVkRk9WCiAgICBmaXhlZEZvdkNpcmNsZS5UaGlja25lc3MgPSAxLjUKICAgIGZpeGVkRm92Q2lyY2xlLkNvbG9yICAgICA9IENvbG9yMy5mcm9tUkdCKDI1NSwxNjUsMCkKICAgIGZpeGVkRm92Q2lyY2xlLkZpbGxlZCAgICA9IGZhbHNlCiAgICBmaXhlZEZvdkNpcmNsZS5WaXNpYmxlICAgPSBmYWxzZQogICAgZml4ZWRGb3ZDaXJjbGUuWkluZGV4ID0gOQogICAgCiAgICAtLSDlm7rlrprlnIbkuK3lv4PkuIDmrKHorr7nva4KICAgIGxvY2FsIGZ1bmN0aW9uIHNldEZpeGVkQ2VudGVyKCkKICAgICAgICBsb2NhbCBjZW50ZXIgPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgQ2FtZXJhLlZpZXdwb3J0U2l6ZS5ZLzIpCiAgICAgICAgZml4ZWRGb3ZDaXJjbGUuUG9zaXRpb24gPSBjZW50ZXIKICAgICAgICAtLSDliJ3lp4vljJboh6rnnoTnur/mnaHnmoTotbfngrkKICAgICAgICBhaW1MaW5lLkZyb20gPSBjZW50ZXIKICAgIGVuZAogICAgQ2FtZXJhOkdldFByb3BlcnR5Q2hhbmdlZFNpZ25hbCgiVmlld3BvcnRTaXplIik6Q29ubmVjdChzZXRGaXhlZENlbnRlcikKICAgIHNldEZpeGVkQ2VudGVyKCkKICAgIAogICAgLS0g5bel5YW35Ye95pWwCiAgICBsb2NhbCBmdW5jdGlvbiBnZXRBaW1Qb3MoY2hhcmFjdGVyKQogICAgICAgIGlmIG5vdCBjaGFyYWN0ZXIgdGhlbiByZXR1cm4gbmlsIGVuZAogICAgICAgIGxvY2FsIHJvb3QgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIGxvY2FsIGJvbmUgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoYWltYm90Qm9uZSkgb3IgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIZWFkIikKICAgICAgICBpZiBub3QgKHJvb3QgYW5kIGJvbmUpIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCB2ZWwgPSByb290LlZlbG9jaXR5CiAgICAgICAgcmV0dXJuIGJvbmUuUG9zaXRpb24gKyB2ZWwgKiBhaW1ib3RQcmVkaWN0aW9uCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gaXNWaXNpYmxlKHBvcywgdGFyZ2V0Q2hhcmFjdGVyKQogICAgICAgIGlmIG5vdCB3YWxsQ2hlY2tFbmFibGVkIHRoZW4gcmV0dXJuIHRydWUgZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgb3JpZ2luID0gQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbgogICAgICAgIGxvY2FsIGRpcmVjdGlvbiA9IChwb3MgLSBvcmlnaW4pLlVuaXQKICAgICAgICBsb2NhbCByYXkgPSBSYXkubmV3KG9yaWdpbiwgZGlyZWN0aW9uICogKG9yaWdpbiAtIHBvcykuTWFnbml0dWRlKQogICAgICAgIAogICAgICAgIGxvY2FsIGlnbm9yZUxpc3QgPSB7TG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLCBDYW1lcmF9CiAgICAgICAgaWYgdGFyZ2V0Q2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGlnbm9yZUxpc3QsIHRhcmdldENoYXJhY3RlcikKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCBwYXJ0LCBwb3NpdGlvbiA9IHdvcmtzcGFjZTpGaW5kUGFydE9uUmF5V2l0aElnbm9yZUxpc3QocmF5LCBpZ25vcmVMaXN0KQogICAgICAgIHJldHVybiBwYXJ0ID09IG5pbAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGluQW55Rk9WKHdvcmxkUG9zKQogICAgICAgIGxvY2FsIHNjcmVlblBvcyA9IENhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludCh3b3JsZFBvcykKICAgICAgICBpZiBzY3JlZW5Qb3MuWiA8PSAwIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIG1vdXNlUG9zID0gVXNlcklucHV0U2VydmljZTpHZXRNb3VzZUxvY2F0aW9uKCkKICAgICAgICBsb2NhbCBjZW50ZXIgPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgQ2FtZXJhLlZpZXdwb3J0U2l6ZS5ZLzIpCiAgICAgICAgCiAgICAgICAgaWYgbW91c2VGb3ZDaXJjbGUuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgIGlmIChWZWN0b3IyLm5ldyhzY3JlZW5Qb3MuWCwgc2NyZWVuUG9zLlkpIC0gbW91c2VQb3MpLk1hZ25pdHVkZSA8PSBtb3VzZUZPViB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBpZiBmaXhlZEZvdkNpcmNsZS5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgaWYgKFZlY3RvcjIubmV3KHNjcmVlblBvcy5YLCBzY3JlZW5Qb3MuWSkgLSBjZW50ZXIpLk1hZ25pdHVkZSA8PSBmaXhlZEZPViB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBnZXRDbG9zZXN0KCkKICAgICAgICBsb2NhbCBjbG9zZXN0LCBtaW5EaXN0ID0gbmlsLCBtYXRoLmh1Z2UKICAgICAgICBsb2NhbCBjZW50ZXIgPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgQ2FtZXJhLlZpZXdwb3J0U2l6ZS5ZLzIpCiAgICAgICAgCiAgICAgICAgZm9yIF8sIHBsciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgIGlmIHBsciA9PSBMb2NhbFBsYXllciB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICBpZiBhaW1ib3RDaGVja1RlYW0gYW5kIHBsci5UZWFtIGFuZCBwbHIuVGVhbSA9PSBMb2NhbFBsYXllci5UZWFtIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBjaGFyID0gcGxyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBub3QgY2hhciB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgYWltUG9zID0gZ2V0QWltUG9zKGNoYXIpCiAgICAgICAgICAgIGlmIG5vdCBhaW1Qb3MgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgaWYgbm90IGluQW55Rk9WKGFpbVBvcykgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIHNwID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KGFpbVBvcykKICAgICAgICAgICAgaWYgc3AuWiA8PSAwIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBpZ25vcmVMaXN0ID0ge0xvY2FsUGxheWVyLkNoYXJhY3RlciwgQ2FtZXJhfQogICAgICAgICAgICBpZiBub3QgaXNWaXNpYmxlKGFpbVBvcywgY2hhcikgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRpc3QKICAgICAgICAgICAgaWYgYWltYm90TW9kZSA9PSAiRGlzdGFuY2UiIHRoZW4KICAgICAgICAgICAgICAgIGRpc3QgPSAoYWltUG9zIC0gQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbikuTWFnbml0dWRlCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGRpc3QgPSAoVmVjdG9yMi5uZXcoc3AuWCwgc3AuWSkgLSBjZW50ZXIpLk1hZ25pdHVkZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGRpc3QgPCBtaW5EaXN0IHRoZW4KICAgICAgICAgICAgICAgIG1pbkRpc3QsIGNsb3Nlc3QgPSBkaXN0LCBwbHIKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIGNsb3Nlc3QKICAgIGVuZAogICAgCiAgICAtLSDkuLvlvqrnjq/vvIjluKbpmLLnnqznlKnvvIkKICAgIGxvY2FsIGZ1bmN0aW9uIHN0YXJ0QWltYm90KCkKICAgICAgICBpZiBhaW1ib3RDb25uIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGFpbWJvdENvbm4gPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiBub3QgYWltYm90RW5hYmxlZCB0aGVuIAogICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgIHJldHVybiAKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBtb3VzZUZvdkNpcmNsZS5Qb3NpdGlvbiA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpCgogICAgICAgICAgICBsb2NhbCB0YXJnZXQgPSBnZXRDbG9zZXN0KCkKICAgICAgICAgICAgaWYgbm90IHRhcmdldCBvciBub3QgdGFyZ2V0LkNoYXJhY3RlciB0aGVuIAogICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgIHJldHVybiAKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBhaW1Qb3MgPSBnZXRBaW1Qb3ModGFyZ2V0LkNoYXJhY3RlcikKICAgICAgICAgICAgaWYgbm90IGFpbVBvcyB0aGVuIAogICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgIHJldHVybiAKICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBpZiBhaW1MaW5lRW5hYmxlZCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBzY3JlZW5Qb3MgPSBDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoYWltUG9zKQogICAgICAgICAgICAgICAgaWYgc2NyZWVuUG9zLlogPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBhaW1MaW5lLkZyb20gPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgQ2FtZXJhLlZpZXdwb3J0U2l6ZS5ZLzIpCiAgICAgICAgICAgICAgICAgICAgYWltTGluZS5UbyA9IFZlY3RvcjIubmV3KHNjcmVlblBvcy5YLCBzY3JlZW5Qb3MuWSkKICAgICAgICAgICAgICAgICAgICBhaW1MaW5lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBhaW1MaW5lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRlbHRhID0gYWltUG9zIC0gQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbgogICAgICAgICAgICBpZiBkZWx0YS5NYWduaXR1ZGUgPCAwLjAxIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgdGFyZ2V0Q0YgPSBDRnJhbWUubmV3KENhbWVyYS5DRnJhbWUuUG9zaXRpb24sIENhbWVyYS5DRnJhbWUuUG9zaXRpb24gKyBkZWx0YSkKICAgICAgICAgICAgbG9jYWwgY3VycmVudExvb2sgPSBDYW1lcmEuQ0ZyYW1lLkxvb2tWZWN0b3IKICAgICAgICAgICAgbG9jYWwgdGFyZ2V0TG9vayA9IHRhcmdldENGLkxvb2tWZWN0b3IKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRvdCA9IGN1cnJlbnRMb29rOkRvdCh0YXJnZXRMb29rKQogICAgICAgICAgICBsb2NhbCBhbmdsZSA9IG1hdGguYWNvcyhtYXRoLmNsYW1wKGRvdCwgLTEsIDEpKQogICAgICAgICAgICBsb2NhbCBtYXhBbmdsZSA9IG1hdGgucmFkKDkwKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgYW5nbGUgPD0gbWF4QW5nbGUgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgc21vb3RoRmFjdG9yID0gbWF0aC5jbGFtcChhaW1ib3RTbW9vdGgsIDAuMDEsIDAuOTkpCiAgICAgICAgICAgICAgICBsb2NhbCBuZXdMb29rID0gY3VycmVudExvb2s6TGVycCh0YXJnZXRMb29rLCAxIC0gc21vb3RoRmFjdG9yKQogICAgICAgICAgICAgICAgQ2FtZXJhLkNGcmFtZSA9IENGcmFtZS5uZXcoQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbiwgQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbiArIG5ld0xvb2spCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgdGljaygpIC0gbGFzdEZpcmUgPiBhaW1ib3REZWxheSB0aGVuCiAgICAgICAgICAgICAgICBtb3VzZTFwcmVzcygpCiAgICAgICAgICAgICAgICB0YXNrLndhaXQoMC4wNSkKICAgICAgICAgICAgICAgIG1vdXNlMXJlbGVhc2UoKQogICAgICAgICAgICAgICAgbGFzdEZpcmUgPSB0aWNrKCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHN0b3BBaW1ib3QoKQogICAgICAgIGlmIGFpbWJvdENvbm4gdGhlbiAKICAgICAgICAgICAgYWltYm90Q29ubjpEaXNjb25uZWN0KCkgCiAgICAgICAgICAgIGFpbWJvdENvbm4gPSBuaWwgCiAgICAgICAgZW5kCiAgICAgICAgbW91c2VGb3ZDaXJjbGUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgZml4ZWRGb3ZDaXJjbGUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgYWltTGluZS5WaXNpYmxlID0gZmFsc2UKICAgIGVuZAogICAgCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0gQUktQWltYm90IOeLrOeri+agh+etvumhtQogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGxvY2FsIFRhYjMgPSBXaW5kb3c6Q3JlYXRlVGFiKCJBSS1BaW1ib3QiLCA3NzMzOTYxNzQ4KSAtLSDkvb/nlKjkuI3lkIznmoTlm77moIcKICAgIAogICAgVGFiMzpDcmVhdGVTZWN0aW9uKCJBSS1BaW1ib3QiKQogICAgVGFiMzpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5ZCv55SoIEFpbWJvdCIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBhaW1ib3RFbmFibGVkID0gdgogICAgICAgICAgICBpZiB2IHRoZW4gCiAgICAgICAgICAgICAgICBzdGFydEFpbWJvdCgpIAogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgc3RvcEFpbWJvdCgpIAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuS7heeehOWHhuaVjOS6uiIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gYWltYm90Q2hlY2tUZWFtLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgYWltYm90Q2hlY2tUZWFtID0gdiBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuWimeS9k+ajgOa1iyIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gd2FsbENoZWNrRW5hYmxlZCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIHdhbGxDaGVja0VuYWJsZWQgPSB2IGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5pi+56S66Ieq556E57q/5p2hIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBhaW1MaW5lRW5hYmxlZCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbUxpbmVFbmFibGVkID0gdiBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlRHJvcGRvd24oewogICAgICAgIE5hbWUgPSAi556E5YeG5pa55byPIiwKICAgICAgICBPcHRpb25zID0geyJEaXN0YW5jZSIsICJDcm9zc2hhaXIifSwKICAgICAgICBDdXJyZW50T3B0aW9uID0gYWltYm90TW9kZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbWJvdE1vZGUgPSB2IGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVTZWN0aW9uKCLot5/pmo/pvKDmoIcgRk9WIikKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsgCiAgICAgICAgTmFtZSA9ICLmmL7npLrot5/pmo9GT1YiLCAKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwgCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBtb3VzZUZvdkNpcmNsZS5WaXNpYmxlID0gdiBlbmQgCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVNsaWRlcih7CiAgICAgICAgTmFtZSA9ICLljYrlvoTvvIjmu5HmnaHvvIkiLAogICAgICAgIFJhbmdlID0gezAsIDUwMH0sCiAgICAgICAgSW5jcmVtZW50ID0gNSwKICAgICAgICBTdWZmaXggPSAicHgiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IG1vdXNlRk9WLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgCiAgICAgICAgICAgIG1vdXNlRk9WID0gdgogICAgICAgICAgICBtb3VzZUZvdkNpcmNsZS5SYWRpdXMgPSB2IAogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLljYrlvoTvvIjovpPlhaXvvIkiLAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKG1vdXNlRk9WKSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIGxvY2FsIG4gPSB0b251bWJlcih0eHQpIAogICAgICAgICAgICBpZiBuIHRoZW4gCiAgICAgICAgICAgICAgICBtb3VzZUZPViA9IG4KICAgICAgICAgICAgICAgIG1vdXNlRm92Q2lyY2xlLlJhZGl1cyA9IG4KICAgICAgICAgICAgZW5kIAogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVTZWN0aW9uKCLlm7rlrprkuK3lv4MgRk9WIikKICAgIFRhYjM6Q3JlYXRlVG9nZ2xlKHsgCiAgICAgICAgTmFtZSA9ICLmmL7npLrlm7rlrppGT1YiLCAKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwgCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBmaXhlZEZvdkNpcmNsZS5WaXNpYmxlID0gdiBlbmQgCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZVNsaWRlcih7CiAgICAgICAgTmFtZSA9ICLljYrlvoTvvIjmu5HmnaHvvIkiLAogICAgICAgIFJhbmdlID0gezAsIDUwMH0sCiAgICAgICAgSW5jcmVtZW50ID0gNSwKICAgICAgICBTdWZmaXggPSAicHgiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGZpeGVkRk9WLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgCiAgICAgICAgICAgIGZpeGVkRk9WID0gdgogICAgICAgICAgICBmaXhlZEZvdkNpcmNsZS5SYWRpdXMgPSB2IAogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLljYrlvoTvvIjovpPlhaXvvIkiLAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKGZpeGVkRk9WKSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIGxvY2FsIG4gPSB0b251bWJlcih0eHQpIAogICAgICAgICAgICBpZiBuIHRoZW4gCiAgICAgICAgICAgICAgICBmaXhlZEZPViA9IG4KICAgICAgICAgICAgICAgIGZpeGVkRm92Q2lyY2xlLlJhZGl1cyA9IG4KICAgICAgICAgICAgZW5kIAogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVTZWN0aW9uKCLpgJrnlKjlj4LmlbAiKQogICAgVGFiMzpDcmVhdGVTbGlkZXIoewogICAgICAgIE5hbWUgPSAi5bmz5ruR57O75pWw77yI5ruR5p2h77yJIiwKICAgICAgICBSYW5nZSA9IHswLCAxfSwKICAgICAgICBJbmNyZW1lbnQgPSAwLjAxLAogICAgICAgIFN1ZmZpeCA9ICIiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGFpbWJvdFNtb290aCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbWJvdFNtb290aCA9IHYgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZUlucHV0KHsKICAgICAgICBOYW1lID0gIuW5s+a7keezu+aVsO+8iOi+k+WFpe+8iSIsCiAgICAgICAgUGxhY2Vob2xkZXJUZXh0ID0gdG9zdHJpbmcoYWltYm90U21vb3RoKSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIGxvY2FsIG4gPSB0b251bWJlcih0eHQpIAogICAgICAgICAgICBpZiBuIHRoZW4gCiAgICAgICAgICAgICAgICBhaW1ib3RTbW9vdGggPSBuCiAgICAgICAgICAgIGVuZCAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlU2xpZGVyKHsKICAgICAgICBOYW1lID0gIumihOa1iyAo56eSKe+8iOa7keadoe+8iSIsCiAgICAgICAgUmFuZ2UgPSB7MCwgMX0sCiAgICAgICAgSW5jcmVtZW50ID0gMC4wMSwKICAgICAgICBTdWZmaXggPSAicyIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gYWltYm90UHJlZGljdGlvbiwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpIGFpbWJvdFByZWRpY3Rpb24gPSB2IGVuZAogICAgfSkKICAgIAogICAgVGFiMzpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLpooTmtYsgKOenkinvvIjovpPlhaXvvIkiLAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKGFpbWJvdFByZWRpY3Rpb24pLAogICAgICAgIFJlbW92ZVRleHRBZnRlckZvY3VzTG9zdCA9IGZhbHNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odHh0KSAKICAgICAgICAgICAgbG9jYWwgbiA9IHRvbnVtYmVyKHR4dCkgCiAgICAgICAgICAgIGlmIG4gdGhlbiAKICAgICAgICAgICAgICAgIGFpbWJvdFByZWRpY3Rpb24gPSBuCiAgICAgICAgICAgIGVuZCAKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjM6Q3JlYXRlU2xpZGVyKHsKICAgICAgICBOYW1lID0gIuW8gOeBq+W7tui/nyAo56eSKe+8iOa7keadoe+8iSIsCiAgICAgICAgUmFuZ2UgPSB7MCwgMX0sCiAgICAgICAgSW5jcmVtZW50ID0gMC4wMSwKICAgICAgICBTdWZmaXggPSAicyIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gYWltYm90RGVsYXksCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSBhaW1ib3REZWxheSA9IHYgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZUlucHV0KHsKICAgICAgICBOYW1lID0gIuW8gOeBq+W7tui/nyAo56eSKe+8iOi+k+WFpe+8iSIsCiAgICAgICAgUGxhY2Vob2xkZXJUZXh0ID0gdG9zdHJpbmcoYWltYm90RGVsYXkpLAogICAgICAgIFJlbW92ZVRleHRBZnRlckZvY3VzTG9zdCA9IGZhbHNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odHh0KSAKICAgICAgICAgICAgbG9jYWwgbiA9IHRvbnVtYmVyKHR4dCkgCiAgICAgICAgICAgIGlmIG4gdGhlbiAKICAgICAgICAgICAgICAgIGFpbWJvdERlbGF5ID0gbgogICAgICAgICAgICBlbmQgCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIzOkNyZWF0ZURyb3Bkb3duKHsKICAgICAgICBOYW1lID0gIueehOWHhumqqOmqvCIsCiAgICAgICAgT3B0aW9ucyA9IHsiSGVhZCIsIk5lY2siLCJVcHBlclRvcnNvIiwiSHVtYW5vaWRSb290UGFydCJ9LAogICAgICAgIEN1cnJlbnRPcHRpb24gPSBhaW1ib3RCb25lLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgYWltYm90Qm9uZSA9IHYgZW5kCiAgICB9KQogICAgCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0g5Yig6Zmk6Zi05b2x77yI5YWo5bGA5byA5YWz77yJCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5Yig6Zmk6Zi05b2xIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IG5vdCB2CiAgICAgICAgICAgIGZvciBfLCBsIGluIGlwYWlycyh3b3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIGw6SXNBKCJCYXNlUGFydCIpIG9yIGw6SXNBKCJNZXNoUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBsLkNhc3RTaGFkb3cgPSBub3QgdgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgVGl0bGUgPSAi5o+Q56S6IiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSB2IGFuZCAi6Zi05b2x5bey5Yig6ZmkIiBvciAi6Zi05b2x5bey5oGi5aSNIiwKICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMiwKICAgICAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgICAgICB9KQogICAgICAgIGVuZAogICAgfSkKCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0g5LyY5YyW5ZCO55qE6aOe6KGM5Yqf6IO9CiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgbG9jYWwgZmx5aW5nID0gZmFsc2UKICAgIGxvY2FsIGZseVNwZWVkID0gNTAKICAgIGxvY2FsIGJnLCBidgogICAgbG9jYWwgY3RybCA9IHtmID0gMCwgYiA9IDAsIGwgPSAwLCByID0gMCwgdSA9IDAsIGQgPSAwfQogICAgbG9jYWwgZmx5Q29ubmVjdGlvbgogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBmbHlMb29wKCkKICAgICAgICB3aGlsZSBmbHlpbmcgYW5kIGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpXYWl0KCkgZG8KICAgICAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBub3QgY2hhcmFjdGVyIHRoZW4gYnJlYWsgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCB0b3JzbyA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIG9yIAogICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVG9yc28iKSBvciAKICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIlVwcGVyVG9yc28iKQogICAgICAgICAgICBpZiBub3QgdG9yc28gdGhlbiBicmVhayBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIG1vdmVEaXJlY3Rpb24gPSBWZWN0b3IzLm5ldyhjdHJsLnIgLSBjdHJsLmwsIGN0cmwudSAtIGN0cmwuZCwgY3RybC5iIC0gY3RybC5mKQogICAgICAgICAgICBpZiBtb3ZlRGlyZWN0aW9uLk1hZ25pdHVkZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgbW92ZURpcmVjdGlvbiA9IG1vdmVEaXJlY3Rpb24uVW5pdAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGNhbWVyYSA9IHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhCiAgICAgICAgICAgIGxvY2FsIGNhbWVyYUNGcmFtZSA9IGNhbWVyYS5DRnJhbWUKICAgICAgICAgICAgbG9jYWwgY2FtZXJhTG9va1ZlY3RvciA9IGNhbWVyYUNGcmFtZS5Mb29rVmVjdG9yCiAgICAgICAgICAgIGxvY2FsIGNhbWVyYVJpZ2h0VmVjdG9yID0gY2FtZXJhQ0ZyYW1lLlJpZ2h0VmVjdG9yCiAgICAgICAgICAgIGxvY2FsIGNhbWVyYVVwVmVjdG9yID0gY2FtZXJhQ0ZyYW1lLlVwVmVjdG9yCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCB2ZWxvY2l0eSA9IChjYW1lcmFMb29rVmVjdG9yICogbW92ZURpcmVjdGlvbi5aICogZmx5U3BlZWQpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjYW1lcmFSaWdodFZlY3RvciAqIG1vdmVEaXJlY3Rpb24uWCAqIGZseVNwZWVkKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FtZXJhVXBWZWN0b3IgKiBtb3ZlRGlyZWN0aW9uLlkgKiBmbHlTcGVlZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGJ2IHRoZW4KICAgICAgICAgICAgICAgIGJ2LlZlbG9jaXR5ID0gdmVsb2NpdHkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBtb3ZlRGlyZWN0aW9uLk1hZ25pdHVkZSA+IDAgYW5kIGJnIHRoZW4KICAgICAgICAgICAgICAgIGJnLkNGcmFtZSA9IGNhbWVyYUNGcmFtZSAqIENGcmFtZS5BbmdsZXMoCiAgICAgICAgICAgICAgICAgICAgLW1hdGgucmFkKG1vdmVEaXJlY3Rpb24uWiAqIDE1KSwKICAgICAgICAgICAgICAgICAgICBtYXRoLnJhZChtb3ZlRGlyZWN0aW9uLlggKiAxNSksCiAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBzdGFydEZseWluZygpCiAgICAgICAgaWYgZmx5aW5nIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBub3QgY2hhcmFjdGVyIHRoZW4gCiAgICAgICAgICAgIFJheWZpZWxkOk5vdGlmeSh7CiAgICAgICAgICAgICAgICBUaXRsZSA9ICLpo57ooYzplJnor68iLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICLmib7kuI3liLDop5LoibIiLAogICAgICAgICAgICAgICAgRHVyYXRpb24gPSAzLAogICAgICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHJldHVybiAKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICBpZiBub3QgaHVtYW5vaWQgdGhlbiAKICAgICAgICAgICAgUmF5ZmllbGQ6Tm90aWZ5KHsKICAgICAgICAgICAgICAgIFRpdGxlID0gIumjnuihjOmUmeivryIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIuaJvuS4jeWIsEh1bWFub2lkIiwKICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgICAgICB9KQogICAgICAgICAgICByZXR1cm4gCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZmx5aW5nID0gdHJ1ZQogICAgICAgIAogICAgICAgIGxvY2FsIHRvcnNvID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iikgb3IgCiAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIlRvcnNvIikgb3IgCiAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIlVwcGVyVG9yc28iKQogICAgICAgIGlmIG5vdCB0b3JzbyB0aGVuIAogICAgICAgICAgICBmbHlpbmcgPSBmYWxzZQogICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgVGl0bGUgPSAi6aOe6KGM6ZSZ6K+vIiwKICAgICAgICAgICAgICAgIENvbnRlbnQgPSAi5om+5LiN5Yiw6Lqr5L2T6YOo5L2NIiwKICAgICAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgICAgICB9KQogICAgICAgICAgICByZXR1cm4gCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgYmcgPSBJbnN0YW5jZS5uZXcoIkJvZHlHeXJvIiwgdG9yc28pCiAgICAgICAgYmcuUCA9IDllNAogICAgICAgIGJnLm1heFRvcnF1ZSA9IFZlY3RvcjMubmV3KDllOSwgOWU5LCA5ZTkpCiAgICAgICAgYmcuY2ZyYW1lID0gdG9yc28uQ0ZyYW1lCiAgICAgICAgCiAgICAgICAgYnYgPSBJbnN0YW5jZS5uZXcoIkJvZHlWZWxvY2l0eSIsIHRvcnNvKQogICAgICAgIGJ2LlZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoMCwgMC4xLCAwKQogICAgICAgIGJ2Lk1heEZvcmNlID0gVmVjdG9yMy5uZXcoOWU5LCA5ZTksIDllOSkKICAgICAgICAKICAgICAgICBodW1hbm9pZC5QbGF0Zm9ybVN0YW5kID0gdHJ1ZQogICAgICAgIAogICAgICAgIFJheWZpZWxkOk5vdGlmeSh7CiAgICAgICAgICAgIFRpdGxlID0gIumjnuihjOaooeW8jyIsCiAgICAgICAgICAgIENvbnRlbnQgPSAi6aOe6KGM5bey5ZCv55SoICjpgJ/luqY6ICIgLi4gZmx5U3BlZWQgLi4gIikiLAogICAgICAgICAgICBEdXJhdGlvbiA9IDMsCiAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgZmx5Q29ubmVjdGlvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZseUxvb3ApCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gc3RvcEZseWluZygpCiAgICAgICAgaWYgbm90IGZseWluZyB0aGVuIHJldHVybiBlbmQKICAgICAgICBmbHlpbmcgPSBmYWxzZQogICAgICAgIAogICAgICAgIGlmIGJnIHRoZW4gYmc6RGVzdHJveSgpIGJnID0gbmlsIGVuZAogICAgICAgIGlmIGJ2IHRoZW4gYnY6RGVzdHJveSgpIGJ2ID0gbmlsIGVuZAogICAgICAgIGlmIGZseUNvbm5lY3Rpb24gdGhlbiBmbHlDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBmbHlDb25uZWN0aW9uID0gbmlsIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBjaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgaWYgaHVtYW5vaWQgdGhlbgogICAgICAgICAgICAgICAgaHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgYW5pbWF0ZSA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiQW5pbWF0ZSIpCiAgICAgICAgICAgIGlmIGFuaW1hdGUgdGhlbgogICAgICAgICAgICAgICAgYW5pbWF0ZS5EaXNhYmxlZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGN0cmwgPSB7ZiA9IDAsIGIgPSAwLCBsID0gMCwgciA9IDAsIHUgPSAwLCBkID0gMH0KICAgICAgICAKICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLpo57ooYzmqKHlvI8iLAogICAgICAgICAgICBDb250ZW50ID0gIumjnuihjOW3suemgeeUqCIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgfSkKICAgIGVuZAogICAgCiAgICBsb2NhbCBpbnB1dEJlZ2FuQ29ubiwgaW5wdXRFbmRlZENvbm4KICAgIAogICAgbG9jYWwgZnVuY3Rpb24gc2V0dXBJbnB1dCgpCiAgICAgICAgaWYgaW5wdXRCZWdhbkNvbm4gdGhlbiBpbnB1dEJlZ2FuQ29ubjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgaWYgaW5wdXRFbmRlZENvbm4gdGhlbiBpbnB1dEVuZGVkQ29ubjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgCiAgICAgICAgaW5wdXRCZWdhbkNvbm4gPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgICAgIGlmIG5vdCBmbHlpbmcgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5XIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuZiA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLlMgdGhlbgogICAgICAgICAgICAgICAgY3RybC5iID0gMQogICAgICAgICAgICBlbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuQSB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmwgPSAxCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5EIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuciA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLlNwYWNlIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwudSA9IDEKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkxlZnRDb250cm9sIG9yIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkJ1dHRvbkwzIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuZCA9IDEKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgICAgIAogICAgICAgIGlucHV0RW5kZWRDb25uID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikuSW5wdXRFbmRlZDpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQogICAgICAgICAgICBpZiBub3QgZmx5aW5nIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuVyB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmYgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5TIHRoZW4KICAgICAgICAgICAgICAgIGN0cmwuYiA9IDAKICAgICAgICAgICAgZWxzZWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkEgdGhlbgogICAgICAgICAgICAgICAgY3RybC5sID0gMAogICAgICAgICAgICBlbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuRCB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLnIgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5TcGFjZSB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLnUgPSAwCiAgICAgICAgICAgIGVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5MZWZ0Q29udHJvbCBvciBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5CdXR0b25MMyB0aGVuCiAgICAgICAgICAgICAgICBjdHJsLmQgPSAwCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgc3RvcEZseWluZygpCiAgICBlbmQpCiAgICAKICAgIFRhYjI6Q3JlYXRlU2VjdGlvbigi6aOe6KGM5Yqf6IO9IikKICAgIAogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5ZCv55So6aOe6KGMIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGlmIHYgdGhlbgogICAgICAgICAgICAgICAgc3RhcnRGbHlpbmcoKQogICAgICAgICAgICAgICAgc2V0dXBJbnB1dCgpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHN0b3BGbHlpbmcoKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIFRhYjI6Q3JlYXRlU2xpZGVyKHsKICAgICAgICBOYW1lID0gIumjnuihjOmAn+W6piIsCiAgICAgICAgUmFuZ2UgPSB7MTAsIDIwMH0sCiAgICAgICAgSW5jcmVtZW50ID0gNSwKICAgICAgICBTdWZmaXggPSAi5Y2V5L2NIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBmbHlTcGVlZCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKQogICAgICAgICAgICBmbHlTcGVlZCA9IHZhbHVlCiAgICAgICAgICAgIGlmIGZseWluZyB0aGVuCiAgICAgICAgICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIumjnuihjOaooeW8jyIsCiAgICAgICAgICAgICAgICAgICAgQ29udGVudCA9ICLpo57ooYzpgJ/luqbmm7TmlrDkuLo6ICIgLi4gZmx5U3BlZWQsCiAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSAyLAogICAgICAgICAgICAgICAgICAgIEltYWdlID0gNDQ4MzM2MjQ1OAogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIyOkNyZWF0ZUxhYmVsKCLmjqfliLbmlrnlvI86IikKICAgIFRhYjI6Q3JlYXRlTGFiZWwoIlcvQS9TL0QgLSDliY3lkI7lt6blj7Pnp7vliqgiKQogICAgVGFiMjpDcmVhdGVMYWJlbCgi56m65qC86ZSuIC0g5ZCR5LiK6aOe6KGMIikKICAgIFRhYjI6Q3JlYXRlTGFiZWwoIkN0cmzplK4gLSDlkJHkuIvpo57ooYwiKQogICAgCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLS0g5aKe5by654mI546p5a62IEVTUO+8iOWQq+mYn+S8jeajgOa1i+OAgei3neemu+OAgeihgOadoeWSjOe6v+adoee7mOWItu+8iS0g5Y2H57qn5Li654us56uL5byA5YWz6ZSuCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgbG9jYWwgZXNwU2V0dGluZ3MgPSB7CiAgICAgICAgZW5hYmxlZCA9IGZhbHNlLAogICAgICAgIHNob3dCb3ggPSB0cnVlLAogICAgICAgIHNob3dOYW1lID0gdHJ1ZSwKICAgICAgICBzaG93RGlzdGFuY2UgPSB0cnVlLAogICAgICAgIHNob3dIZWFsdGhCYXIgPSB0cnVlLAogICAgICAgIHNob3dIZWFsdGhUZXh0ID0gdHJ1ZSwKICAgICAgICBzaG93VHJhY2VyID0gdHJ1ZSwKICAgICAgICB0cmFjZXJQb3NpdGlvbiA9ICJCb3R0b20iLAogICAgICAgIHNob3dFbmVteU9ubHkgPSBmYWxzZQogICAgfQogICAgCiAgICBsb2NhbCBlc3BDYWNoZSA9IHt9CgogICAgbG9jYWwgZnVuY3Rpb24gZ2V0VGVhbUNvbG9yKHBscikKICAgICAgICBpZiBwbHIuVGVhbSBhbmQgTG9jYWxQbGF5ZXIuVGVhbSBhbmQgcGxyLlRlYW0gPT0gTG9jYWxQbGF5ZXIuVGVhbSB0aGVuCiAgICAgICAgICAgIHJldHVybiBDb2xvcjMuZnJvbVJHQigwLCAyNTUsIDApCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gaXNUZWFtbWF0ZShwbHIpCiAgICAgICAgaWYgcGxyLlRlYW0gYW5kIExvY2FsUGxheWVyLlRlYW0gYW5kIHBsci5UZWFtID09IExvY2FsUGxheWVyLlRlYW0gdGhlbgogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gY3JlYXRlRVNQT2JqZWN0KHBscikKICAgICAgICBsb2NhbCBlc3AgPSB7CiAgICAgICAgICAgIEJveCA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIE5hbWUgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBEaXN0YW5jZSA9IERyYXdpbmcubmV3KCJUZXh0IiksCiAgICAgICAgICAgIEhlYWx0aEJhciA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIEhlYWx0aFRleHQgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBUcmFjZXIgPSBEcmF3aW5nLm5ldygiTGluZSIpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGVzcC5Cb3guVGhpY2tuZXNzID0gMS41CiAgICAgICAgZXNwLkJveC5GaWxsZWQgPSBmYWxzZQogICAgICAgIGVzcC5Cb3guWkluZGV4ID0gNQogICAgICAgIAogICAgICAgIGVzcC5OYW1lLlNpemUgPSAxOAogICAgICAgIGVzcC5OYW1lLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuTmFtZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5OYW1lLlpJbmRleCA9IDYKICAgICAgICAKICAgICAgICBlc3AuRGlzdGFuY2UuU2l6ZSA9IDE2CiAgICAgICAgZXNwLkRpc3RhbmNlLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuRGlzdGFuY2UuT3V0bGluZSA9IHRydWUKICAgICAgICBlc3AuRGlzdGFuY2UuWkluZGV4ID0gNgogICAgICAgIAogICAgICAgIGVzcC5IZWFsdGhCYXIuRmlsbGVkID0gdHJ1ZQogICAgICAgIGVzcC5IZWFsdGhCYXIuVGhpY2tuZXNzID0gMQogICAgICAgIGVzcC5IZWFsdGhCYXIuWkluZGV4ID0gNQogICAgICAgIAogICAgICAgIGVzcC5IZWFsdGhUZXh0LlNpemUgPSAxNAogICAgICAgIGVzcC5IZWFsdGhUZXh0LkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuSGVhbHRoVGV4dC5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5IZWFsdGhUZXh0LlpJbmRleCA9IDYKICAgICAgICAKICAgICAgICBlc3AuVHJhY2VyLlRoaWNrbmVzcyA9IDEuNQogICAgICAgIGVzcC5UcmFjZXIuWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcENhY2hlW3Bscl0gPSBlc3AKICAgICAgICByZXR1cm4gZXNwCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVFU1AoKQogICAgICAgIGlmIG5vdCBlc3BTZXR0aW5ncy5lbmFibGVkIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGZvciBfLCBwbHIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBwbHIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGVzcFNldHRpbmdzLnNob3dFbmVteU9ubHkgYW5kIGlzVGVhbW1hdGUocGxyKSB0aGVuCiAgICAgICAgICAgICAgICBpZiBlc3BDYWNoZVtwbHJdIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcENhY2hlW3Bscl0pIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBjaGFyID0gcGxyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBub3QgY2hhciB0aGVuCiAgICAgICAgICAgICAgICBpZiBlc3BDYWNoZVtwbHJdIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcENhY2hlW3Bscl0pIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgY29udGludWUgCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgcm9vdCA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgICAgICBsb2NhbCBoZWFkID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgICAgIGxvY2FsIGh1bWFub2lkID0gY2hhcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCAocm9vdCBhbmQgaGVhZCBhbmQgaHVtYW5vaWQpIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCByb290UG9zLCByb290VmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KHJvb3QuUG9zaXRpb24pCiAgICAgICAgICAgIGxvY2FsIGhlYWRQb3MsIGhlYWRWaXMgPSBDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoaGVhZC5Qb3NpdGlvbiArIFZlY3RvcjMubmV3KDAsIDEuNSwgMCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgKHJvb3RWaXMgYW5kIGhlYWRWaXMpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGVzcENhY2hlW3Bscl0gdGhlbgogICAgICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwQ2FjaGVbcGxyXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgb2JqLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGVzcCA9IGVzcENhY2hlW3Bscl0gb3IgY3JlYXRlRVNQT2JqZWN0KHBscikKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGhlaWdodCA9IG1hdGguYWJzKGhlYWRQb3MuWSAtIHJvb3RQb3MuWSkgKiAxLjUKICAgICAgICAgICAgbG9jYWwgd2lkdGggPSBoZWlnaHQgKiAwLjYKICAgICAgICAgICAgbG9jYWwgbGVmdCA9IGhlYWRQb3MuWCAtIHdpZHRoIC8gMgogICAgICAgICAgICBsb2NhbCByaWdodCA9IGhlYWRQb3MuWCArIHdpZHRoIC8gMgogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgY29sb3IgPSBnZXRUZWFtQ29sb3IocGxyKQogICAgICAgICAgICAKICAgICAgICAgICAgLS0g54us56uL5o6n5Yi25q+P5Liq5YWD57Sg55qE5pi+56S6CiAgICAgICAgICAgIGVzcC5Cb3guVmlzaWJsZSA9IGVzcFNldHRpbmdzLnNob3dCb3gKICAgICAgICAgICAgZXNwLkJveC5Db2xvciA9IGNvbG9yCiAgICAgICAgICAgIGVzcC5Cb3guUG9pbnRBID0gVmVjdG9yMi5uZXcobGVmdCwgaGVhZFBvcy5ZKQogICAgICAgICAgICBlc3AuQm94LlBvaW50QiA9IFZlY3RvcjIubmV3KHJpZ2h0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgIGVzcC5Cb3guUG9pbnRDID0gVmVjdG9yMi5uZXcocmlnaHQsIGhlYWRQb3MuWSArIGhlaWdodCkKICAgICAgICAgICAgZXNwLkJveC5Qb2ludEQgPSBWZWN0b3IyLm5ldyhsZWZ0LCBoZWFkUG9zLlkgKyBoZWlnaHQpCiAgICAgICAgICAgIAogICAgICAgICAgICBlc3AuTmFtZS5WaXNpYmxlID0gZXNwU2V0dGluZ3Muc2hvd05hbWUKICAgICAgICAgICAgZXNwLk5hbWUuQ29sb3IgPSBjb2xvcgogICAgICAgICAgICBlc3AuTmFtZS5Qb3NpdGlvbiA9IFZlY3RvcjIubmV3KGhlYWRQb3MuWCwgaGVhZFBvcy5ZIC0gMjApCiAgICAgICAgICAgIGVzcC5OYW1lLlRleHQgPSBwbHIuTmFtZQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZGlzdGFuY2UgPSBtYXRoLmZsb29yKChyb290LlBvc2l0aW9uIC0gQ2FtZXJhLkNGcmFtZS5Qb3NpdGlvbikuTWFnbml0dWRlKQogICAgICAgICAgICBlc3AuRGlzdGFuY2UuVmlzaWJsZSA9IGVzcFNldHRpbmdzLnNob3dEaXN0YW5jZQogICAgICAgICAgICBlc3AuRGlzdGFuY2UuQ29sb3IgPSBjb2xvcgogICAgICAgICAgICBlc3AuRGlzdGFuY2UuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhoZWFkUG9zLlgsIGhlYWRQb3MuWSArIGhlaWdodCArIDUpCiAgICAgICAgICAgIGVzcC5EaXN0YW5jZS5UZXh0ID0gdG9zdHJpbmcoZGlzdGFuY2UpIC4uICJtIgogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgaGVhbHRoUGVyY2VudCA9IG1hdGguY2xhbXAoaHVtYW5vaWQuSGVhbHRoIC8gaHVtYW5vaWQuTWF4SGVhbHRoLCAwLCAxKQogICAgICAgICAgICBsb2NhbCBiYXJXaWR0aCA9IHdpZHRoCiAgICAgICAgICAgIGxvY2FsIGJhckhlaWdodCA9IDUKICAgICAgICAgICAgbG9jYWwgYmFyWCA9IGxlZnQKICAgICAgICAgICAgbG9jYWwgYmFyWSA9IGhlYWRQb3MuWSArIGhlaWdodCArIDIwCiAgICAgICAgICAgIAogICAgICAgICAgICBlc3AuSGVhbHRoQmFyLlZpc2libGUgPSBlc3BTZXR0aW5ncy5zaG93SGVhbHRoQmFyCiAgICAgICAgICAgIGVzcC5IZWFsdGhCYXIuQ29sb3IgPSBDb2xvcjMubmV3KDEgLSBoZWFsdGhQZXJjZW50LCBoZWFsdGhQZXJjZW50LCAwKQogICAgICAgICAgICBlc3AuSGVhbHRoQmFyLlBvaW50QSA9IFZlY3RvcjIubmV3KGJhclgsIGJhclkpCiAgICAgICAgICAgIGVzcC5IZWFsdGhCYXIuUG9pbnRCID0gVmVjdG9yMi5uZXcoYmFyWCArIGJhcldpZHRoICogaGVhbHRoUGVyY2VudCwgYmFyWSkKICAgICAgICAgICAgZXNwLkhlYWx0aEJhci5Qb2ludEMgPSBWZWN0b3IyLm5ldyhiYXJYICsgYmFyV2lkdGggKiBoZWFsdGhQZXJjZW50LCBiYXJZICsgYmFySGVpZ2h0KQogICAgICAgICAgICBlc3AuSGVhbHRoQmFyLlBvaW50RCA9IFZlY3RvcjIubmV3KGJhclgsIGJhclkgKyBiYXJIZWlnaHQpCiAgICAgICAgICAgIAogICAgICAgICAgICBlc3AuSGVhbHRoVGV4dC5WaXNpYmxlID0gZXNwU2V0dGluZ3Muc2hvd0hlYWx0aFRleHQKICAgICAgICAgICAgZXNwLkhlYWx0aFRleHQuQ29sb3IgPSBDb2xvcjMubmV3KDEsIDEsIDEpCiAgICAgICAgICAgIGVzcC5IZWFsdGhUZXh0LlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoYmFyWCArIGJhcldpZHRoIC8gMiwgYmFyWSAtIDEwKQogICAgICAgICAgICBlc3AuSGVhbHRoVGV4dC5UZXh0ID0gbWF0aC5mbG9vcihodW1hbm9pZC5IZWFsdGgpIC4uICIvIiAuLiBtYXRoLmZsb29yKGh1bWFub2lkLk1heEhlYWx0aCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGVzcC5UcmFjZXIuVmlzaWJsZSA9IGVzcFNldHRpbmdzLnNob3dUcmFjZXIKICAgICAgICAgICAgZXNwLlRyYWNlci5Db2xvciA9IGNvbG9yCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBzdGFydFBvaW50CiAgICAgICAgICAgIGlmIGVzcFNldHRpbmdzLnRyYWNlclBvc2l0aW9uID09ICJUb3AiIHRoZW4KICAgICAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlgvMiwgMCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgc3RhcnRQb2ludCA9IFZlY3RvcjIubmV3KENhbWVyYS5WaWV3cG9ydFNpemUuWC8yLCBDYW1lcmEuVmlld3BvcnRTaXplLlkpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZW5kUG9pbnQgPSBWZWN0b3IyLm5ldyhoZWFkUG9zLlgsIGhlYWRQb3MuWSArIGhlaWdodC8yKQogICAgICAgICAgICAKICAgICAgICAgICAgZXNwLlRyYWNlci5Gcm9tID0gc3RhcnRQb2ludAogICAgICAgICAgICBlc3AuVHJhY2VyLlRvID0gZW5kUG9pbnQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBmb3IgcGxyLCBlc3AgaW4gcGFpcnMoZXNwQ2FjaGUpIGRvCiAgICAgICAgICAgIGlmIG5vdCBwbHIgb3Igbm90IHBsci5QYXJlbnQgb3IgcGxyID09IExvY2FsUGxheWVyIHRoZW4KICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwKSBkbwogICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBvYmo6UmVtb3ZlKCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZXNwQ2FjaGVbcGxyXSA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGVzcExvb3AKICAgIAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIE5QQyDpgI/op4bvvIjlop7lvLrniYjvvIktIOWNh+e6p+S4uueLrOeri+W8gOWFs+mUrgogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGxvY2FsIG5wY0VzcFNldHRpbmdzID0gewogICAgICAgIGVuYWJsZWQgPSBmYWxzZSwKICAgICAgICBzaG93Qm94ID0gdHJ1ZSwKICAgICAgICBzaG93TmFtZSA9IHRydWUsCiAgICAgICAgc2hvd0Rpc3RhbmNlID0gdHJ1ZQogICAgfQogICAgCiAgICBsb2NhbCBucGNFc3BDYWNoZSA9IHt9CiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIGNyZWF0ZU5wY0VTUE9iamVjdChtb2RlbCkKICAgICAgICBsb2NhbCBlc3AgPSB7CiAgICAgICAgICAgIEJveCA9IERyYXdpbmcubmV3KCJRdWFkIiksCiAgICAgICAgICAgIE5hbWUgPSBEcmF3aW5nLm5ldygiVGV4dCIpLAogICAgICAgICAgICBEaXN0YW5jZSA9IERyYXdpbmcubmV3KCJUZXh0IikKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZXNwLkJveC5UaGlja25lc3MgPSAxLjUKICAgICAgICBlc3AuQm94LkZpbGxlZCA9IGZhbHNlCiAgICAgICAgZXNwLkJveC5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTY1LCAwKQogICAgICAgIGVzcC5Cb3guWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcC5OYW1lLlNpemUgPSAxNgogICAgICAgIGVzcC5OYW1lLkNlbnRlciA9IHRydWUKICAgICAgICBlc3AuTmFtZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5OYW1lLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxNjUsIDApCiAgICAgICAgZXNwLk5hbWUuWkluZGV4ID0gNAogICAgICAgIAogICAgICAgIGVzcC5EaXN0YW5jZS5TaXplID0gMTQKICAgICAgICBlc3AuRGlzdGFuY2UuQ2VudGVyID0gdHJ1ZQogICAgICAgIGVzcC5EaXN0YW5jZS5PdXRsaW5lID0gdHJ1ZQogICAgICAgIGVzcC5EaXN0YW5jZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTY1LCAwKQogICAgICAgIGVzcC5EaXN0YW5jZS5aSW5kZXggPSA0CiAgICAgICAgCiAgICAgICAgbnBjRXNwQ2FjaGVbbW9kZWxdID0gZXNwCiAgICAgICAgcmV0dXJuIGVzcAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHVwZGF0ZU5wY0VTUCgpCiAgICAgICAgaWYgbm90IG5wY0VzcFNldHRpbmdzLmVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgZm9yIF8sIG1vZGVsIGluIGlwYWlycyh3b3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgaWYgbW9kZWw6SXNBKCJNb2RlbCIpIGFuZCBtb2RlbDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIG5vdCBQbGF5ZXJzOkdldFBsYXllckZyb21DaGFyYWN0ZXIobW9kZWwpIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHJvb3QgPSBtb2RlbDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIG9yIG1vZGVsOkZpbmRGaXJzdENoaWxkKCJUb3JzbyIpCiAgICAgICAgICAgICAgICBsb2NhbCBoZWFkID0gbW9kZWw6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgKHJvb3QgYW5kIGhlYWQpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBucGNFc3BDYWNoZVttb2RlbF0gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKG5wY0VzcENhY2hlW21vZGVsXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCByb290UG9zLCByb290VmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KHJvb3QuUG9zaXRpb24pCiAgICAgICAgICAgICAgICBsb2NhbCBoZWFkUG9zLCBoZWFkVmlzID0gQ2FtZXJhOldvcmxkVG9WaWV3cG9ydFBvaW50KGhlYWQuUG9zaXRpb24gKyBWZWN0b3IzLm5ldygwLCAxLjUsIDApKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBub3QgKHJvb3RWaXMgYW5kIGhlYWRWaXMpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBucGNFc3BDYWNoZVttb2RlbF0gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKG5wY0VzcENhY2hlW21vZGVsXSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBlc3AgPSBucGNFc3BDYWNoZVttb2RlbF0gb3IgY3JlYXRlTnBjRVNQT2JqZWN0KG1vZGVsKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBoZWlnaHQgPSBtYXRoLmFicyhoZWFkUG9zLlkgLSByb290UG9zLlkpICogMS41CiAgICAgICAgICAgICAgICBsb2NhbCB3aWR0aCA9IGhlaWdodCAqIDAuNgogICAgICAgICAgICAgICAgbG9jYWwgbGVmdCA9IGhlYWRQb3MuWCAtIHdpZHRoIC8gMgogICAgICAgICAgICAgICAgbG9jYWwgcmlnaHQgPSBoZWFkUG9zLlggKyB3aWR0aCAvIDIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXNwLkJveC5WaXNpYmxlID0gbnBjRXNwU2V0dGluZ3Muc2hvd0JveAogICAgICAgICAgICAgICAgZXNwLkJveC5Qb2ludEEgPSBWZWN0b3IyLm5ldyhsZWZ0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50QiA9IFZlY3RvcjIubmV3KHJpZ2h0LCBoZWFkUG9zLlkpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50QyA9IFZlY3RvcjIubmV3KHJpZ2h0LCBoZWFkUG9zLlkgKyBoZWlnaHQpCiAgICAgICAgICAgICAgICBlc3AuQm94LlBvaW50RCA9IFZlY3RvcjIubmV3KGxlZnQsIGhlYWRQb3MuWSArIGhlaWdodCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZXNwLk5hbWUuVmlzaWJsZSA9IG5wY0VzcFNldHRpbmdzLnNob3dOYW1lCiAgICAgICAgICAgICAgICBlc3AuTmFtZS5Qb3NpdGlvbiA9IFZlY3RvcjIubmV3KGhlYWRQb3MuWCwgaGVhZFBvcy5ZIC0gMTUpCiAgICAgICAgICAgICAgICBlc3AuTmFtZS5UZXh0ID0gbW9kZWwuTmFtZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBkaXN0YW5jZSA9IG1hdGguZmxvb3IoKHJvb3QuUG9zaXRpb24gLSBDYW1lcmEuQ0ZyYW1lLlBvc2l0aW9uKS5NYWduaXR1ZGUpCiAgICAgICAgICAgICAgICBlc3AuRGlzdGFuY2UuVmlzaWJsZSA9IG5wY0VzcFNldHRpbmdzLnNob3dEaXN0YW5jZQogICAgICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoaGVhZFBvcy5YLCBoZWFkUG9zLlkgKyBoZWlnaHQgKyA1KQogICAgICAgICAgICAgICAgZXNwLkRpc3RhbmNlLlRleHQgPSB0b3N0cmluZyhkaXN0YW5jZSkgLi4gIm0iCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGZvciBtb2RlbCwgZXNwIGluIHBhaXJzKG5wY0VzcENhY2hlKSBkbwogICAgICAgICAgICBpZiBub3QgbW9kZWwgb3Igbm90IG1vZGVsLlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcCkgZG8KICAgICAgICAgICAgICAgICAgICBvYmouVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgb2JqOlJlbW92ZSgpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIG5wY0VzcENhY2hlW21vZGVsXSA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBucGNFc3BMb29wCiAgICAKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAtLSDpgI/op4blip/og73ni6znq4vmoIfnrb7pobUgLSDljYfnuqfkuLrni6znq4vlvIDlhbPplK7niYjmnKwKICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBsb2NhbCBUYWI0ID0gV2luZG93OkNyZWF0ZVRhYigi6YCP6KeG5Yqf6IO9IiwgNzczMzk2MTc0OSkKICAgIAogICAgVGFiNDpDcmVhdGVTZWN0aW9uKCLnjqnlrrbpgI/op4borr7nva4iKQogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5ZCv55So546p5a626YCP6KeGIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZXNwU2V0dGluZ3MuZW5hYmxlZCwgCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBlc3BTZXR0aW5ncy5lbmFibGVkID0gdgogICAgICAgICAgICBpZiB2IHRoZW4KICAgICAgICAgICAgICAgIGlmIG5vdCBlc3BMb29wIHRoZW4KICAgICAgICAgICAgICAgICAgICBlc3BMb29wID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KHVwZGF0ZUVTUCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiBlc3BMb29wIHRoZW4KICAgICAgICAgICAgICAgICAgICBlc3BMb29wOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgIGVzcExvb3AgPSBuaWwKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZm9yIHBsciwgZXNwIGluIHBhaXJzKGVzcENhY2hlKSBkbwogICAgICAgICAgICAgICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMoZXNwKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpIG9iajpSZW1vdmUoKSBlbmQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHRhYmxlLmNsZWFyKGVzcENhY2hlKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIH0pCgogICAgVGFiNDpDcmVhdGVTZWN0aW9uKCLnjqnlrrbpgI/op4blhYPntKAiKQogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5pi+56S65pa55qGGIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBlc3BTZXR0aW5ncy5zaG93Qm94LAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgZXNwU2V0dGluZ3Muc2hvd0JveCA9IHYKICAgICAgICBlbmQKICAgIH0pCgogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5pi+56S65ZCN5a2XIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBlc3BTZXR0aW5ncy5zaG93TmFtZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGVzcFNldHRpbmdzLnNob3dOYW1lID0gdgogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLmmL7npLrot53nprsiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGVzcFNldHRpbmdzLnNob3dEaXN0YW5jZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGVzcFNldHRpbmdzLnNob3dEaXN0YW5jZSA9IHYKICAgICAgICBlbmQKICAgIH0pCgogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5pi+56S66KGA5p2hIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBlc3BTZXR0aW5ncy5zaG93SGVhbHRoQmFyLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgZXNwU2V0dGluZ3Muc2hvd0hlYWx0aEJhciA9IHYKICAgICAgICBlbmQKICAgIH0pCgogICAgVGFiNDpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi5pi+56S66KGA6YeP5paH5a2XIiwKICAgICAgICBDdXJyZW50VmFsdWUgPSBlc3BTZXR0aW5ncy5zaG93SGVhbHRoVGV4dCwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGVzcFNldHRpbmdzLnNob3dIZWFsdGhUZXh0ID0gdgogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLmmL7npLrov73ouKrnur/mnaEiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IGVzcFNldHRpbmdzLnNob3dUcmFjZXIsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBlc3BTZXR0aW5ncy5zaG93VHJhY2VyID0gdgogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWI0OkNyZWF0ZURyb3Bkb3duKHsKICAgICAgICBOYW1lID0gIue6v+adoeS9jee9riIsCiAgICAgICAgT3B0aW9ucyA9IHsiVG9wIiwgIkJvdHRvbSJ9LAogICAgICAgIEN1cnJlbnRPcHRpb24gPSBlc3BTZXR0aW5ncy50cmFjZXJQb3NpdGlvbiwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlKQogICAgICAgICAgICBlc3BTZXR0aW5ncy50cmFjZXJQb3NpdGlvbiA9IHZhbHVlCiAgICAgICAgZW5kCiAgICB9KQoKICAgIFRhYjQ6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuWPquaYvuekuuaVjOS6uiIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gZXNwU2V0dGluZ3Muc2hvd0VuZW15T25seSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIGVzcFNldHRpbmdzLnNob3dFbmVteU9ubHkgPSB2CiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWI0OkNyZWF0ZVNlY3Rpb24oIk5QQ+mAj+inhuiuvue9riIpCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLlkK/nlKhOUEPpgI/op4YiLCAKICAgICAgICBDdXJyZW50VmFsdWUgPSBucGNFc3BTZXR0aW5ncy5lbmFibGVkLCAKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHYpCiAgICAgICAgICAgIG5wY0VzcFNldHRpbmdzLmVuYWJsZWQgPSB2CiAgICAgICAgICAgIGlmIHYgdGhlbgogICAgICAgICAgICAgICAgaWYgbm90IG5wY0VzcExvb3AgdGhlbgogICAgICAgICAgICAgICAgICAgIG5wY0VzcExvb3AgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QodXBkYXRlTnBjRVNQKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGlmIG5wY0VzcExvb3AgdGhlbgogICAgICAgICAgICAgICAgICAgIG5wY0VzcExvb3A6RGlzY29ubmVjdCgpCiAgICAgICAgICAgICAgICAgICAgbnBjRXNwTG9vcCA9IG5pbAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBmb3IgbW9kZWwsIGVzcCBpbiBwYWlycyhucGNFc3BDYWNoZSkgZG8KICAgICAgICAgICAgICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGVzcCkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSBvYmo6UmVtb3ZlKCkgZW5kKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB0YWJsZS5jbGVhcihucGNFc3BDYWNoZSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWI0OkNyZWF0ZVNlY3Rpb24oIk5QQ+mAj+inhuWFg+e0oCIpCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLmmL7npLrmlrnmoYYiLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IG5wY0VzcFNldHRpbmdzLnNob3dCb3gsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KQogICAgICAgICAgICBucGNFc3BTZXR0aW5ncy5zaG93Qm94ID0gdgogICAgICAgIGVuZAogICAgfSkKCiAgICBUYWI0OkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLmmL7npLrlkI3lrZciLAogICAgICAgIEN1cnJlbnRWYWx1ZSA9IG5wY0VzcFNldHRpbmdzLnNob3dOYW1lLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgbnBjRXNwU2V0dGluZ3Muc2hvd05hbWUgPSB2CiAgICAgICAgZW5kCiAgICB9KQoKICAgIFRhYjQ6Q3JlYXRlVG9nZ2xlKHsKICAgICAgICBOYW1lID0gIuaYvuekuui3neemuyIsCiAgICAgICAgQ3VycmVudFZhbHVlID0gbnBjRXNwU2V0dGluZ3Muc2hvd0Rpc3RhbmNlLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikKICAgICAgICAgICAgbnBjRXNwU2V0dGluZ3Muc2hvd0Rpc3RhbmNlID0gdgogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC0tIOS4iemUgeWumu+8muenu+mAnyAvIOi3s+i3gyAvIOmHjeWKmwogICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIGxvY2FsIGxvY2tTcGVlZCwgbG9ja0p1bXAsIGxvY2tHcmF2ID0gZmFsc2UsIGZhbHNlLCBmYWxzZQogICAgbG9jYWwgc2F2ZWRTcGVlZCwgc2F2ZWRKdW1wLCBzYXZlZEdyYXYgPSAxNiwgNTAsIDE5NgogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBhcHBseVZhbHVlcygpCiAgICAgICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIG5vdCBjaGFyIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGh1bSA9IGNoYXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICAgICAgaWYgbm90IGh1bSB0aGVuIHJldHVybiBlbmQKICAgICAgICAKICAgICAgICBpZiBsb2NrU3BlZWQgdGhlbiBodW0uV2Fsa1NwZWVkID0gc2F2ZWRTcGVlZCBlbmQKICAgICAgICBpZiBsb2NrSnVtcCB0aGVuIGh1bS5KdW1wUG93ZXIgPSBzYXZlZEp1bXAgZW5kCiAgICAgICAgaWYgbG9ja0dyYXYgdGhlbiB3b3Jrc3BhY2UuR3Jhdml0eSA9IHNhdmVkR3JhdiBlbmQKICAgIGVuZAogICAgCiAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICB0YXNrLndhaXQoMC41KQogICAgICAgIGFwcGx5VmFsdWVzKCkKICAgIGVuZCkKICAgIAogICAgVGFiMjpDcmVhdGVTZWN0aW9uKCLkuInplIHlrpoiKQogICAgVGFiMjpDcmVhdGVJbnB1dCh7CiAgICAgICAgTmFtZSA9ICLorr7lrprnp7vpgJ/vvIjku4Xkv53lrZjlgLzvvIkiLCAKICAgICAgICBQbGFjZWhvbGRlclRleHQgPSB0b3N0cmluZyhzYXZlZFNwZWVkKSwKICAgICAgICBSZW1vdmVUZXh0QWZ0ZXJGb2N1c0xvc3QgPSBmYWxzZSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKHR4dCkgCiAgICAgICAgICAgIHNhdmVkU3BlZWQgPSB0b251bWJlcih0eHQpIG9yIDE2IAogICAgICAgICAgICBhcHBseVZhbHVlcygpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIyOkNyZWF0ZUlucHV0KHsKICAgICAgICBOYW1lID0gIuiuvuWumui3s+i3g+mrmOW6pu+8iOS7heS/neWtmOWAvO+8iSIsIAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKHNhdmVkSnVtcCksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBzYXZlZEp1bXAgPSB0b251bWJlcih0eHQpIG9yIDUwIAogICAgICAgICAgICBhcHBseVZhbHVlcygpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIyOkNyZWF0ZUlucHV0KHsKICAgICAgICBOYW1lID0gIuiuvuWumumHjeWKm+WAvO+8iOS7heS/neWtmOWAvO+8iSIsIAogICAgICAgIFBsYWNlaG9sZGVyVGV4dCA9IHRvc3RyaW5nKHNhdmVkR3JhdiksCiAgICAgICAgUmVtb3ZlVGV4dEFmdGVyRm9jdXNMb3N0ID0gZmFsc2UsCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih0eHQpIAogICAgICAgICAgICBzYXZlZEdyYXYgPSB0b251bWJlcih0eHQpIG9yIDE5NiAKICAgICAgICAgICAgYXBwbHlWYWx1ZXMoKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi6ZSB5a6a56e76YCfIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgCiAgICAgICAgICAgIGxvY2tTcGVlZCA9IHYKICAgICAgICAgICAgYXBwbHlWYWx1ZXMoKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgVGFiMjpDcmVhdGVUb2dnbGUoewogICAgICAgIE5hbWUgPSAi6ZSB5a6a6Lez6LeDIiwgCiAgICAgICAgQ3VycmVudFZhbHVlID0gZmFsc2UsIAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24odikgCiAgICAgICAgICAgIGxvY2tKdW1wID0gdgogICAgICAgICAgICBhcHBseVZhbHVlcygpCiAgICAgICAgZW5kCiAgICB9KQogICAgCiAgICBUYWIyOkNyZWF0ZVRvZ2dsZSh7CiAgICAgICAgTmFtZSA9ICLplIHlrprph43lipsiLCAKICAgICAgICBDdXJyZW50VmFsdWUgPSBmYWxzZSwgCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbih2KSAKICAgICAgICAgICAgbG9ja0dyYXYgPSB2CiAgICAgICAgICAgIGFwcGx5VmFsdWVzKCkKICAgICAgICBlbmQKICAgIH0pCiAgICAKICAgIC0tIFZS6ISa5pysIFRhYgogICAgbG9jYWwgVGFiNSA9IFdpbmRvdzpDcmVhdGVUYWIoIlZSIiwgNzczMzc3OTYxMCkKICAgIFRhYjU6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIkZFVlLohJrmnKwiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JhbmRvbXN0cmluZzAvUXdlcnR5L3JlZnMvaGVhZHMvbWFpbi9xd2VydHk0NS5sdWEiKSkoKQogICAgZW5kfSkKCiAgICAtLSDmjqfliLblj7AgVGFiCiAgICBsb2NhbCBUYWI2ID0gV2luZG93OkNyZWF0ZVRhYigi5o6n5Yi25Y+wIiwgNzczMzc3OTYxMCkKICAgIFRhYjY6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIuaOp+WItuWPsOiEmuacrCIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veXhnaDE2NS95eGdoMTY1L21haW4vNjY2IikpKCkKICAgIGVuZH0pCiAgICAKICAgIC0tIFhB6ISa5pysIFRhYgogICAgbG9jYWwgVGFiNyA9IFdpbmRvdzpDcmVhdGVUYWIoIlhB6ISa5pysIiwgNzczMzc3OTYxMCkKICAgIFRhYjc6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIlhBIEhVQiIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRjb2RlLmNvbS9YaW5ndGFpZHVhbi9TY3JpcHRzL3Jhdy9tYWluL0xvYWRlci5sdWEiKSkoKQogICAgZW5kfSkKICAgIAogICAgLS0gUkLohJrmnKzkuK3lv4MgVGFiCiAgICBsb2NhbCBUYWI4ID0gV2luZG93OkNyZWF0ZVRhYigiUkLohJrmnKwiLCA3NzMzNzc5NjEwKQogICAgVGFiODpDcmVhdGVCdXR0b24oe05hbWUgPSAiUmLohJrmnKwiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1l1bmdlbmd4aW4vcm9ibG94L3JlZnMvaGVhZHMvbWFpbi9SYi1IdWIiKSkoKQogICAgZW5kfSkKICAgIAogICAgLS0g55Sf5a2Y5LiO5p2A5omLIFRhYgogICAgbG9jYWwgVGFiOSA9IFdpbmRvdzpDcmVhdGVUYWIoIueUn+WtmOS4juadgOaJiyIsIDc3MzM3Nzk2MTApCiAgICBUYWI5OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLnlJ/lrZjkuI7mnYDmiYsiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01pbGFuMDhTdHVkaW8vQ2hhaXJXYXJlL21haW4vbWFpbi5sdWEiKSkoKQogICAgZW5kfSkKICAgIAogICAgLS0g54ix5b635Y2OIFRhYgogICAgbG9jYWwgVGFiMTAgPSBXaW5kb3c6Q3JlYXRlVGFiKCLniLHlvrfljY4iLCA3NzMzNzc5NjEwKQogICAgVGFiMTA6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIueIseW+t+WNjiIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZ3VtYW5iYS9TY3JpcHRzL21haW4vRWR3YXJkIikpKCkKICAgIGVuZH0pCiAgICAKICAgIC0tIOa0u+S6hjflpKkgVGFiCiAgICBsb2NhbCBUYWIxMSA9IFdpbmRvdzpDcmVhdGVUYWIoIua0u+S6hjflpKkiLCA3NzMzNzc5NjEwKQogICAgVGFiMTE6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIua0u+S6hjflpKkiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXdzY3JpcHRzLm5ldC9yYXcvVW5pdmVyc2FsLVNjcmlwdC03LWRheXMtdG8tbGl2ZS0zNjgyNCIpKSgpCiAgICBlbmR9KQogICAgCiAgICAtLSDmrbvpk4HovaggVGFiCiAgICBsb2NhbCBUYWIxMiA9IFdpbmRvdzpDcmVhdGVUYWIoIuatu+mTgei9qCIsIDc3MzM5Nzk2MTApCiAgICBUYWIxMjpDcmVhdGVCdXR0b24oe05hbWUgPSAi5q276ZOB6L2oIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pb3Bqa2xibm1zc3MvU2Fuc0h1YlNjcmlwdC9yZWZzL2hlYWRzL21haW4vU2Fuc0h1YiIpKSgpCiAgICBlbmR9KQoKICAgIC0tIOS4gOi3r+WQkeilv+WIt+mSsSBUYWIKICAgIGxvY2FsIFRhYjEzID0gV2luZG93OkNyZWF0ZVRhYigi5LiA6Lev5ZCR6KW/IiwgNzczMzk3OTYxMCkKICAgIFRhYjEzOkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICLkuIDot6/lkJHopb/liLfpkrEiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3l4Z2gxNjUveXhnaDE2NS9tYWluL+S4gOi3r+WQkeilvyIpKSgpCiAgICBlbmR9KQogICAgICAgIAogICAgLS0g6Ieq54S254G+5a6zIFRhYgogICAgbG9jYWwgVGFiMTQgPSBXaW5kb3c6Q3JlYXRlVGFiKCLoh6rnhLbngb7lrrMiLCA3NzMzOTc5NjEwKQogICAgVGFiMTQ6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIuiHqueEtueBvuWus+m7kea0nnY2IiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3c2NyaXB0cy5uZXQvcmF3L1VuaXZlcnNhbC1TY3JpcHQtU3VwZXItcmluZy1QYXJ0cy1WNi0yODU4MSIpKSgpCiAgICBlbmR9KQoKLS0g5L+E5Lql5L+E5beeIFRhYgogICAgbG9jYWwgVGFiMTUgPSBXaW5kb3c6Q3JlYXRlVGFiKCLkv4TkuqXkv4Tlt54iLCA3NzMzOTc5NjEwKQogICAgVGFiMTU6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIlhB5L+E5Lql5L+E5beeIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9YaW5ndGFpZHVhbi9TY3JpcHQvcmVmcy9oZWFkcy9tYWluL0dhbWVzL+S/hOS6peS/hOW3ni5sdWEiKSkoKQogICAgZW5kfSkKCi0tIOWiqOawtOa4uOaIjyBUYWIKICAgIGxvY2FsIFRhYjE2ID0gV2luZG93OkNyZWF0ZVRhYigi5aKo5rC05ri45oiPIiwgNzczMzk3OTYxMCkKICAgIFRhYjE2OkNyZWF0ZUJ1dHRvbih7TmFtZSA9ICJYQeWiqOawtOa4uOaIjyIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWGluZ3RhaWR1YW4vU2NyaXB0L3JlZnMvaGVhZHMvbWFpbi9HYW1lcy/loqjmsLTmuLjmiI8ubHVhIikpKCkKICAgIGVuZH0pCgotLSA5OeWknCBUYWIKICAgIGxvY2FsIFRhYjE3ID0gV2luZG93OkNyZWF0ZVRhYigiOTnlpJwiLCA3NzMzOTc5NjEwKQogICAgVGFiMTc6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIlhBOTnlpJwiLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1hpbmd0YWlkdWFuL1NjcmlwdC9yZWZzL2hlYWRzL21haW4vR2FtZXMv5qOu5p6X5Lit55qEOTnlpJwubHVhIikpKCkKICAgIGVuZH0pCgotLSBkb29ycyBUYWIKICAgIGxvY2FsIFRhYjE4ID0gV2luZG93OkNyZWF0ZVRhYigiZG9vcnMiLCA3NzMzOTc5NjEwKQogICAgVGFiMTg6Q3JlYXRlQnV0dG9uKHtOYW1lID0gImRvb3Jz5rGJ5YyWIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy82NVR3VDhqYSIpKSgpCiAgICBlbmR9KQoKLS0g54OC5qKX56S+5Yy6IFRhYgogICAgbG9jYWwgVGFiMTkgPSBXaW5kb3c6Q3JlYXRlVGFiKCLng4LmopfnpL7ljLoiLCA3NzMzOTc5NjEwKQogICAgVGFiMTk6Q3JlYXRlQnV0dG9uKHtOYW1lID0gIueDguail+ekvuWMuuWIt+mSsSIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vWE9UUlhPTlkvRWFzeVNjcmlwdC9tYWluL1N1YW8ubHVhdScpKSgpCiAgICBlbmR9KQoKICAgIC0tIOiuvue9rlRhYgogICAgbG9jYWwgVGFiMjAgPSBXaW5kb3c6Q3JlYXRlVGFiKCLorr7nva4iLCA3NzMzNzc5NjEwKQogICAgVGFiMjA6Q3JlYXRlQnV0dG9uKHsKICAgICAgICBOYW1lID0gIuS4gOmUruWkjeWItkRpc2NvcmTpk77mjqUiLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBkaXNjb3JkTGluayA9ICJodHRwczovL2Rpc2NvcmQuZ2cveFZVZjdIOU0iCiAgICAgICAgICAgIGxvY2FsIHN1Y2Nlc3MgPSBDb3B5VG9DbGlwYm9hcmQoZGlzY29yZExpbmspCiAgICAgICAgICAgIFNob3dDb3B5Tm90aWZpY2F0aW9uKHN1Y2Nlc3MsIGRpc2NvcmRMaW5rKQogICAgICAgIGVuZAogICAgfSkKICAgIAogICAgLS0g5b+N6ICF5rOo5YWl5Zmo5YW85a655oCn5qOA5p+lCiAgICBpZiBpZGVudGlmeWV4ZWN1dG9yIGFuZCBpZGVudGlmeWV4ZWN1dG9yKCk6bG93ZXIoKTpmaW5kKCJuaW5qYSIpIHRoZW4KICAgICAgICBSYXlmaWVsZDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICLms6jlhaXlmajmo4DmtYsiLAogICAgICAgICAgICBDb250ZW50ID0gIuW/jeiAheazqOWFpeWZqOW3suivhuWIq++8jOaJgOacieWKn+iDveWFvOWuuSIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMywKICAgICAgICAgICAgSW1hZ2UgPSA0NDgzMzYyNDU4CiAgICAgICAgfSkKICAgIGVuZAogICAgCiAgICAtLSDpqozor4HpgJrov4flkI7mkq3mlL7liqjnlLsKICAgIENyZWF0ZUt1bkt1bkFuaW1hdGlvbigpCmVuZAoKLS0g55u05o6l5Yib5bu65Li756qX5Y+j5YaF5a65CkNyZWF0ZU1haW5XaW5kb3dDb250ZW50KCk=")
loadstring(decoded)()
